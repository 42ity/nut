---
 Makefile.am                                     |    9 
 README                                          |    2 
 clients/Makefile.am                             |    2 
 clients/nutclient.cpp                           |    6 
 clients/nutclient.h                             |    2 
 common/Makefile.am                              |   22 
 common/common.c                                 |   45 
 common/dmfsnmp.c                                | 1553 +++++++++++++++++++++++
 common/str.c                                    |   38 
 configure.ac                                    |  404 ++++--
 docs/Makefile.am                                |    9 
 docs/configure.txt                              |   75 +
 docs/daisychain.txt                             |    4 
 docs/download.txt                               |    2 
 docs/man/Makefile.am                            |   39 
 docs/man/nut-scanner.txt                        |   11 
 docs/man/nutupsdrv.txt                          |    2 
 docs/man/snmp-ups-dmf.txt                       |  190 ++
 docs/man/snmp-ups.txt                           |    2 
 docs/new-drivers.txt                            |    4 
 docs/nut-dmf.txt                                |  283 ++++
 docs/nut-names.txt                              |    1 
 docs/nut-qa.txt                                 |   10 
 docs/outlets.txt                                |    1 
 docs/snmp.txt                                   |    2 
 drivers/Makefile.am                             |   34 
 drivers/apc-ats-mib.c                           |   18 
 drivers/apc-iem-mib.h                           |   19 
 drivers/apc-mib.c                               |   12 
 drivers/apc-mib.h                               |   10 
 drivers/baytech-mib.c                           |    4 
 drivers/eaton-ats-mib.c                         |   28 
 drivers/eaton-mib.c                             |   32 
 drivers/huawei-mib.c                            |   34 
 drivers/mge-hid.c                               |    6 
 drivers/mge-mib.c                               |   20 
 drivers/powerware-mib.c                         |    8 
 drivers/raritan-pdu-mib.c                       |    4 
 drivers/snmp-ups.c                              |   82 +
 drivers/snmp-ups.h                              |   33 
 include/Makefile.am                             |    2 
 include/common.h                                |    2 
 include/dmf.h                                   |   30 
 include/dmfsnmp.h                               |  478 +++++++
 include/str.h                                   |    4 
 m4/ax_lua.m4                                    |  664 ++++++++++
 m4/nut_check_libgd.m4                           |   29 
 m4/nut_check_libnetsnmp.m4                      |   25 
 scripts/DMF/.gitignore                          |   12 
 scripts/DMF/Makefile.am                         |  207 +++
 scripts/DMF/README-NUT-DMF.txt                  |    4 
 scripts/DMF/b                                   |    3 
 scripts/DMF/compile                             |    3 
 scripts/DMF/dmf-test.c                          |   95 +
 scripts/DMF/dmfify-mib.sh                       |   98 +
 scripts/DMF/dmfnutscan.xsd                      |   38 
 scripts/DMF/dmfnutscan/dmfnutscan-snmp.dmf      |   26 
 scripts/DMF/dmfsnmp.xsd                         |  138 ++
 scripts/DMF/dmfsnmp/K20compaq-mib.dmf           |  130 +
 scripts/DMF/dmfsnmp/S10apc-ats-mib.dmf          |   54 
 scripts/DMF/dmfsnmp/S30eaton-mib.dmf            |  428 ++++++
 scripts/DMF/dmfsnmp/apc-ats-mib.dmf             |   54 
 scripts/DMF/dmfsnmp/apc-mib.dmf                 |  182 ++
 scripts/DMF/dmfsnmp/baytech-mib.dmf             |   36 
 scripts/DMF/dmfsnmp/bestpower-mib.dmf           |   23 
 scripts/DMF/dmfsnmp/compaq-mib.dmf              |  130 +
 scripts/DMF/dmfsnmp/cyberpower-mib.dmf          |   27 
 scripts/DMF/dmfsnmp/delta_ups-mib.dmf           |   39 
 scripts/DMF/dmfsnmp/eaton-ats-mib.dmf           |   74 +
 scripts/DMF/dmfsnmp/eaton-mib.dmf               |  428 ++++++
 scripts/DMF/dmfsnmp/huawei-mib.dmf              |  116 +
 scripts/DMF/dmfsnmp/ietf-mib.dmf                |  136 ++
 scripts/DMF/dmfsnmp/mge-mib.dmf                 |  155 ++
 scripts/DMF/dmfsnmp/netvision-mib.dmf           |   74 +
 scripts/DMF/dmfsnmp/powerware-mib.dmf           |  195 ++
 scripts/DMF/dmfsnmp/raritan-pdu-mib.dmf         |   45 
 scripts/DMF/dmfsnmp/raritan-px2-mib.dmf         |   65 
 scripts/DMF/dmfsnmp/xppc-mib.dmf                |   33 
 scripts/DMF/jsonify-mib.py                      |  500 +++++++
 scripts/DMF/lua-example-mib.dmf                 |  209 +++
 scripts/DMF/model.xml                           |   47 
 scripts/DMF/nut_cpp                             |   41 
 scripts/DMF/nutscan-snmp.h                      |   57 
 scripts/DMF/powerware-mib.c.json                | 1582 ++++++++++++++++++++++++
 scripts/DMF/test.xml                            |  139 ++
 scripts/DMF/xmlify-mib.py                       |  246 +++
 scripts/Makefile.am                             |    5 
 scripts/README                                  |    1 
 scripts/augeas/Makefile.am                      |    9 
 scripts/subdriver/gen-snmp-subdriver.sh         |  417 ++++--
 tests/Makefile.am                               |    3 
 tests/nutclienttest.cpp                         |  100 +
 tools/nut-scanner/Makefile.am                   |   59 
 tools/nut-scanner/README                        |    8 
 tools/nut-scanner/nut-scan.h                    |    1 
 tools/nut-scanner/nut-scanner-reindex-dmfsnmp.c |  293 ++++
 tools/nut-scanner/nut-scanner.c                 |  110 +
 tools/nut-scanner/nutscan-init.c                |   80 -
 tools/nut-scanner/nutscan-snmp.h                |   71 -
 tools/nut-scanner/scan_snmp.c                   |  151 +-
 tools/nut-snmpinfo.py                           |   33 
 102 files changed, 11213 insertions(+), 480 deletions(-)

Index: nut-2.7.4/Makefile.am
===================================================================
--- nut-2.7.4.orig/Makefile.am
+++ nut-2.7.4/Makefile.am
@@ -14,14 +14,16 @@ EXTRA_DIST = INSTALL.nut LICENSE-GPL2 LI
 # ----------------------------------------------------------------------
 # flags to pass to ./configure when calling "make distcheck" and "make
 # distcheck-light". Try to check as many features as possible! Also
-# need to give hotplug-dir and udev-dir, so that staged install does
-# not fail.
+# need to give augeas-lenses-dir, hotplug-dir and udev-dir, so that
+# staged install does not fail.
 
 DISTCHECK_FLAGS = --with-all --with-ssl --with-doc=auto
 DISTCHECK_LIGHT_FLAGS = --with-all=auto --with-ssl=auto --with-doc=auto
+DISTCHECK_LIGHT_MAN_FLAGS = --with-all=auto --with-ssl=auto --with-doc=man
 
 DISTCHECK_CONFIGURE_FLAGS = ${DISTCHECK_FLAGS}		\
  --with-systemdsystemunitdir='$${prefix}/lib/systemd/system' \
+ --with-augeas-lenses-dir='$${prefix}/usr/share/augeas/lenses'		\
  --with-hotplug-dir='$${prefix}/etc/hotplug'		\
  --with-udev-dir='$${prefix}/etc/udev'			\
  --with-devd-dir='$${prefix}/etc/devd'
@@ -29,6 +31,9 @@ DISTCHECK_CONFIGURE_FLAGS = ${DISTCHECK_
 distcheck-light:
 	$(MAKE) $(AM_MAKEFLAGS) DISTCHECK_FLAGS="$(DISTCHECK_LIGHT_FLAGS)" distcheck
 
+distcheck-light-man:
+	$(MAKE) $(AM_MAKEFLAGS) DISTCHECK_FLAGS="$(DISTCHECK_LIGHT_MAN_FLAGS)" distcheck
+
 # workaround the dist generated files that are also part of the distribution
 # Note that distcleancheck is disabled for now, while waiting for a proper
 # solution, that do not break older unix systems
Index: nut-2.7.4/README
===================================================================
--- nut-2.7.4.orig/README
+++ nut-2.7.4/README
@@ -236,7 +236,7 @@ Power distribution unit management
 
 NUT also provides an advanced support for power distribution units.
 
-You should read the <<Outlets_PDU_notes,Configuring automatic UPS shutdowns>>
+You should read the <<outlet_management,NUT outlets management and PDU notes>>
 chapter to learn more about when to use this feature. 
 
 Network Server
Index: nut-2.7.4/clients/Makefile.am
===================================================================
--- nut-2.7.4.orig/clients/Makefile.am
+++ nut-2.7.4/clients/Makefile.am
@@ -20,9 +20,11 @@ endif
 bin_PROGRAMS = upsc upslog upsrw upscmd
 dist_bin_SCRIPTS = upssched-cmd
 sbin_PROGRAMS = upsmon upssched
+
 lib_LTLIBRARIES = libupsclient.la libnutclient.la
 if WITH_DEV
  include_HEADERS = upsclient.h ../include/parseconf.h nutclient.h
+ include_HEADERS += ../include/dmfsnmp.h
 endif
 if WITH_CGI
  cgiexec_PROGRAMS = upsstats.cgi upsimage.cgi upsset.cgi
Index: nut-2.7.4/clients/nutclient.cpp
===================================================================
--- nut-2.7.4.orig/clients/nutclient.cpp
+++ nut-2.7.4/clients/nutclient.cpp
@@ -1263,24 +1263,26 @@ void strarr_free(strarr arr)
 }
 
 
-static strarr stringset_to_strarr(const std::set<std::string>& strset)
+strarr stringset_to_strarr(const std::set<std::string>& strset)
 {
 	strarr arr = strarr_alloc(strset.size());
 	strarr pstr = arr;
 	for(std::set<std::string>::const_iterator it=strset.begin(); it!=strset.end(); ++it)
 	{
 		*pstr = xstrdup(it->c_str());
+		pstr++;
 	}
 	return arr;	
 }
 
-static strarr stringvector_to_strarr(const std::vector<std::string>& strset)
+strarr stringvector_to_strarr(const std::vector<std::string>& strset)
 {
 	strarr arr = strarr_alloc(strset.size());
 	strarr pstr = arr;
 	for(std::vector<std::string>::const_iterator it=strset.begin(); it!=strset.end(); ++it)
 	{
 		*pstr = xstrdup(it->c_str());
+		pstr++;
 	}
 	return arr;	
 }
Index: nut-2.7.4/clients/nutclient.h
===================================================================
--- nut-2.7.4.orig/clients/nutclient.h
+++ nut-2.7.4/clients/nutclient.h
@@ -122,7 +122,7 @@ class Client
 	friend class Variable;
 	friend class Command;
 public:
-	~Client();
+	virtual ~Client();
 
 	/**
 	 * Intend to authenticate to a NUTD server.
Index: nut-2.7.4/common/Makefile.am
===================================================================
--- nut-2.7.4.orig/common/Makefile.am
+++ nut-2.7.4/common/Makefile.am
@@ -15,3 +15,25 @@ libcommonclient_la_SOURCES = common.c st
 # using LTLIBOBJS. Refer to configure.in -> AC_REPLACE_FUNCS
 libcommon_la_LIBADD = libparseconf.la @LTLIBOBJS@
 libcommonclient_la_LIBADD = libparseconf.la @LTLIBOBJS@
+
+if WITH_NEON
+if WITH_SNMP
+# Naming may be clumsy, but the current intention is that DMF technique
+# can allow dynamic loading of other protocols and mappings - the SNMP
+# application is just the first of many possible. Some code from current
+# dmfsnmp.c/.h is shareable and may become a separate set of sources/headers
+# sometime later, but the libraries for consumers to bind to are named
+# properly already.
+  noinst_LTLIBRARIES += libnutdmfsnmp.la
+  libnutdmfsnmp_la_SOURCES = dmfsnmp.c
+  libnutdmfsnmp_la_CFLAGS = $(AM_CFLAGS) -I$(top_srcdir)/drivers \
+        -I$(top_srcdir)/tools/nut-scanner \
+        $(LIBNETSNMP_CFLAGS) $(LIBNEON_CFLAGS) -DWITH_DMFMIB $(LIBLTDL_LIBS)
+if HAVE_DMF_LUA
+libnutdmfsnmp_la_CFLAGS += -DWITH_DMF_LUA=1 $(LUA_INCLUDE)
+endif
+
+# Note: Consumers of this lib will generally want these linked in:
+#  libnutdmfsnmp_consumer_LDADD = $(LIBNETSNMP_LIBS) $(LIBNEON_LIBS) $(LUA_LIB) libcommon.la
+endif
+endif
Index: nut-2.7.4/common/common.c
===================================================================
--- nut-2.7.4.orig/common/common.c
+++ nut-2.7.4/common/common.c
@@ -23,6 +23,7 @@
 #include <syslog.h>
 #include <pwd.h>
 #include <grp.h>
+#include <dirent.h>
 
 /* the reason we define UPS_VERSION as a static string, rather than a
 	macro, is to make dependency tracking easier (only common.o depends
@@ -30,6 +31,7 @@
 	having to be recompiled each time the version changes (they only
 	need to be re-linked). */
 #include "nut_version.h"
+
 const char *UPS_VERSION = NUT_VERSION_MACRO;
 
 	int	nut_debug_level = 0;
@@ -631,3 +633,46 @@ int select_write(const int fd, const voi
 
 	return write(fd, buf, buflen);
 }
+
+
+/* FIXME: would be good to get more from /etc/ld.so.conf[.d] */
+char * search_paths[] = {
+	LIBDIR,
+	"/usr"LIBDIR,
+	"/usr/lib64",
+	"/lib64",
+	"/usr/lib",
+	"/lib",
+	"/usr/local/lib",
+	NULL
+};
+
+char * get_libname(const char* base_libname)
+{
+	DIR *dp;
+	struct dirent *dirp;
+	int index = 0;
+	char *libname_path = NULL;
+	char current_test_path[LARGEBUF];
+
+	for(index = 0 ; (search_paths[index] != NULL) && (libname_path == NULL) ; index++)
+	{
+		memset(current_test_path, 0, LARGEBUF);
+
+		if ((dp = opendir(search_paths[index])) == NULL)
+			continue;
+
+		while ((dirp = readdir(dp)) != NULL)
+		{
+			if(!strncmp(dirp->d_name, base_libname, strlen(base_libname))) {
+				snprintf(current_test_path, LARGEBUF, "%s/%s", search_paths[index], dirp->d_name);
+				libname_path = realpath(current_test_path, NULL);
+				if (libname_path != NULL)
+					break;
+			}
+		}
+		closedir(dp);
+	}
+	/* fprintf(stderr,"Looking for lib %s, found %s\n", base_libname, (libname_path!=NULL)?libname_path:"NULL");*/
+	return libname_path;
+}
Index: nut-2.7.4/common/dmfsnmp.c
===================================================================
--- /dev/null
+++ nut-2.7.4/common/dmfsnmp.c
@@ -0,0 +1,1553 @@
+/* dmf.c - Network UPS Tools XML-driver-loader
+ *
+ * This file implements procedures to manipulate and load MIB structures
+ * for NUT snmp-ups drivers dynamically, rather than as statically linked
+ * files of the past. See dmf.h for "The big theory" details.
+ *
+ * Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+ * Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+ * Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#include <neon/ne_xml.h>
+#include <errno.h>
+#include <dirent.h>
+#include <assert.h>
+#include <ltdl.h>
+
+#include "common.h"
+#include "dmfsnmp.h"
+
+/*
+ *
+ *  C FILE
+ *
+ */
+static lt_dlhandle handle = NULL;
+static const char *dl_error = NULL;
+
+static ne_xml_parser *(*xml_create)(void);
+static void (*xml_push_handler)(ne_xml_parser*,
+			ne_xml_startelm_cb*, 
+			ne_xml_cdata_cb*,
+			ne_xml_endelm_cb*,
+			void*);
+static int (*xml_parse)(ne_xml_parser*, const char*, size_t);
+static void (*xml_destroy)(ne_xml_parser*);
+
+#ifdef WITH_DMF_LUA
+	int functions_aux = 0;
+	char *luatext = NULL;
+#endif
+/*DEBUGGING*/
+void
+print_snmp_memory_struct(snmp_info_t *self)
+{
+	int i = 0;
+
+	upsdebugx(5, "SNMP: --> Info_type: %s //   Info_len: %f"
+		" //   OID:  %s //   Default: %s",
+		self->info_type, self->info_len,
+		self->OID, self->dfl);
+	if(self->setvar)
+		upsdebugx(5, " //   Setvar: %d\n", *self->setvar);
+
+	if (self->oid2info)
+	{
+		while ( !( (self->oid2info[i].oid_value == 0)
+		        && (!self->oid2info[i].info_value)
+		) ) {
+			upsdebugx(5, "Info_lkp_t-----------> %d",
+				self->oid2info[i].oid_value);
+			if(self->oid2info[i].info_value)
+				upsdebugx(5, "  value---> %s\n",
+					self->oid2info[i].info_value);
+			i++;
+		}
+	}
+	upsdebugx(5, "*-*-*-->Info_flags %d\n", self->info_flags);
+	upsdebugx(5, "*-*-*-->Flags %lu\n", self->flags);
+#ifdef WITH_DMF_LUA
+if(self->function){
+	lua_State *f_aux = luaL_newstate();
+	luaL_openlibs(f_aux);
+	if(luaL_loadstring(f_aux, self->function)){
+		upsdebugx(5, "Error loading LUA functions:\n%s\n", self->function);
+	}else{
+		upsdebugx(5, "***********-> Luatext:\n%s\n", self->function);
+		lua_pcall(f_aux,0,0,0);
+		char *funcname = snmp_info_type_to_main_function_name(self->info_type);
+		lua_getglobal(f_aux, funcname);
+		lua_pcall(f_aux,0,1,0);
+		upsdebugx(5, "==--> Result: %s\n\n", lua_tostring(f_aux, -1));
+		free(funcname);
+	}
+	lua_close(f_aux);
+}
+#endif
+}
+
+void
+print_alarm_memory_struct(alarms_info_t *self)
+{
+	upsdebugx(5, "Alarm: -->  OID: %s //   Status: %s //   Value: %s\n",
+		self->OID, self->status_value, self->alarm_value);
+}
+
+void
+print_mib2nut_memory_struct(mib2nut_info_t *self)
+{
+	int i = 0;
+	upsdebugx(5, "\n       MIB2NUT: --> Mib_name: %s //   Version: %s"
+		" //   Power_status: %s //   Auto_check: %s"
+		" //   SysOID: %s\n",
+		self->mib_name, self->mib_version,
+		self->oid_pwr_status, self->oid_auto_check,
+		self->sysOID);
+
+	if (self->snmp_info)
+	{
+		while ( !( (!self->snmp_info[i].info_type)
+		        && (self->snmp_info[i].info_len == 0)
+		        && (!self->snmp_info[i].OID)
+		        && (!self->snmp_info[i].dfl)
+		        && (self->snmp_info[i].flags == 0)
+		        && (!self->snmp_info[i].oid2info)
+		) ) {
+			print_snmp_memory_struct(self->snmp_info+i);
+			i++;
+		}
+	}
+
+	i = 0;
+	if (self->alarms_info)
+	{
+		while ( (self->alarms_info[i].alarm_value)
+		     || (self->alarms_info[i].OID)
+		     || (self->alarms_info[i].status_value)
+		) {
+			print_alarm_memory_struct(self->alarms_info+i);
+			i++;
+		}
+	}
+}
+/*END DEBUGGING*/
+
+int load_neon_lib(void){
+	char *neon_libname = get_libname("libneon.so");
+
+	if( lt_dlinit() != 0 ) {
+		fprintf(stderr, "Error initializing lt_init\n");
+		upsdebugx(1, "Error initializing lt_init\n");
+		return ERR;
+	}
+
+	if(!neon_libname) return ERR;
+	handle = lt_dlopen(neon_libname);
+	free(neon_libname);
+	if(!handle) return ERR;
+	*(void**)&xml_create = lt_dlsym(handle, "ne_xml_create");
+	*(void**)&xml_push_handler = lt_dlsym(handle, "ne_xml_push_handler");
+	*(void**)&xml_parse = lt_dlsym(handle, "ne_xml_parse");
+	*(void**)&xml_destroy = lt_dlsym(handle, "ne_xml_destroy");
+
+	dl_error = lt_dlerror();
+	if (dl_error)
+		return ERR;
+	else
+		return OK;
+}
+void unload_neon_lib(){
+	lt_dlclose(handle);
+	handle = NULL;
+}
+
+#ifdef WITH_DMF_LUA
+char *
+snmp_info_type_to_main_function_name(const char * info_type)
+{
+	assert(info_type);
+	char *result = (char *) calloc(strlen(info_type), sizeof(char));
+	int i = 0;
+	int j = 0;
+	while(info_type[i]){
+		if(info_type[i] != '.'){
+			result[j] = info_type[i];
+			j++;
+		}
+		i++;
+	}
+	return result;
+}
+#endif
+
+char *
+get_param_by_name (const char *name, const char **items)
+{
+	int iname;
+
+	if (!items || !name) return NULL;
+	iname = 0;
+	while (items[iname]) {
+		if (strcmp (items[iname],name) == 0) {
+			return strdup(items[iname+1]);
+		}
+		iname += 2;
+	}
+	return NULL;
+}
+
+/*Create a lookup element*/
+info_lkp_t *
+info_lkp_new (int oid, const char *value)
+{
+	info_lkp_t *self = (info_lkp_t*) calloc (1, sizeof (info_lkp_t));
+	assert (self);
+	self->oid_value = oid;
+	if (value)
+		self->info_value = strdup (value);
+	return self;
+}
+
+/*Create alarm element*/
+alarms_info_t *
+info_alarm_new (const char *oid, const char *status, const char *alarm)
+{
+	alarms_info_t *self = (alarms_info_t*) calloc(1, sizeof (alarms_info_t));
+	assert (self);
+	if(oid)
+		self->OID = strdup (oid);
+	if(status)
+		self->status_value = strdup (status);
+	if(alarm)
+		self->alarm_value = strdup (alarm);
+	return self;
+}
+
+snmp_info_t *
+info_snmp_new (const char *name, int info_flags, double multiplier,
+	const char *oid, const char *dfl, unsigned long flags,
+	info_lkp_t *lookup, int *setvar
+#ifdef WITH_DMF_LUA
+, char **function
+#endif
+)
+{
+	snmp_info_t *self = (snmp_info_t*) calloc (1, sizeof (snmp_info_t));
+	assert (self);
+	if(name)
+		self->info_type = strdup (name);
+	self->info_len = multiplier;
+	if(oid)
+		self->OID = strdup (oid);
+	if(dfl)
+		self->dfl = strdup (dfl);
+	self->info_flags = info_flags;
+	self->flags = flags;
+	self->oid2info = lookup;
+	self->setvar = setvar;
+#ifdef WITH_DMF_LUA
+self->function = *function;
+if(self->function){
+	self->luaContext = luaL_newstate();
+	luaL_openlibs(self->luaContext);
+	if(luaL_loadstring(self->luaContext, self->function)){
+		lua_close(self->luaContext);
+		self->luaContext = NULL;
+	}else
+		lua_pcall(self->luaContext,0,0,0);
+}else
+	self->luaContext = NULL;
+#endif
+	return self;
+}
+
+mib2nut_info_t *
+info_mib2nut_new (const char *name, const char *version,
+	const char *oid_power_status, const char *oid_auto_check,
+	snmp_info_t *snmp, const char *sysOID, alarms_info_t *alarms)
+{
+	mib2nut_info_t *self = (mib2nut_info_t*) calloc(1, sizeof(mib2nut_info_t));
+	assert (self);
+	if(name)
+		self->mib_name = strdup (name);
+	if(version)
+		self->mib_version = strdup (version);
+	if(oid_power_status)
+		self->oid_pwr_status = strdup (oid_power_status);
+	if(oid_auto_check)
+		self->oid_auto_check = strdup (oid_auto_check);
+	if(sysOID)
+		self->sysOID = strdup (sysOID);
+	self->snmp_info = snmp;
+	self->alarms_info = alarms;
+        
+	return self;
+}
+#ifdef WITH_DMF_LUA
+function_t *
+function_new (const char *name){
+	function_t *self = (function_t*) calloc(1, sizeof(function_t));
+	self->name = strdup (name);
+	return self;
+}
+
+void
+function_destroy (void **self_p){
+	if (*self_p)
+	{
+		function_t *self = (function_t*) *self_p;
+		if(self->name){
+			free(self->name);
+			self->name = NULL;
+		}
+		if(self->code){
+			free(self->code);
+			self->code = NULL;
+		}
+		free(self);
+		self = NULL;
+	}
+}
+#endif
+
+/*Destroy full array of lookup elements*/
+void
+info_lkp_destroy (void **self_p)
+{
+	if (*self_p)
+	{
+		info_lkp_t *self = (info_lkp_t*) *self_p;
+		if (self->info_value)
+		{
+			free ((char*)self->info_value);
+			self->info_value = NULL;
+		}
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+/*Destroy full array of alarm elements*/
+void
+info_alarm_destroy (void **self_p)
+{
+	if (*self_p)
+	{
+		alarms_info_t *self = (alarms_info_t*) *self_p;
+		if (self->OID)
+		{
+			free ((char*)self->OID);
+			self->OID = NULL;
+		}
+		if (self->status_value)
+		{
+			free ((char*)self->status_value);
+			self->status_value = NULL;
+		}
+		if (self->alarm_value)
+		{
+			free ((char*)self->alarm_value);
+			self->alarm_value = NULL;
+		}
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+void
+info_snmp_destroy (void **self_p)
+{
+	if (*self_p) {
+		snmp_info_t *self = (snmp_info_t*) *self_p;
+
+		if (self->info_type)
+		{
+			free ((char*)self->info_type);
+			self->info_type = NULL;
+		}
+
+		if (self->OID)
+		{
+			free ((char*)self->OID);
+			self->OID = NULL;
+		}
+
+		if (self->dfl)
+		{
+			free ((char*)self->dfl);
+			self->dfl = NULL;
+		}
+
+		free ((info_lkp_t*)self->oid2info);
+		self->oid2info = NULL;
+
+#ifdef WITH_DMF_LUA
+if(self->function){
+	self->function = NULL;
+}
+if(self->luaContext){
+	lua_close(self->luaContext);
+	self->luaContext = NULL;
+}
+#endif
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+void
+info_mib2nut_destroy (void **self_p)
+{
+	if (*self_p) {
+		mib2nut_info_t *self = (mib2nut_info_t*) *self_p;
+		if (self->mib_name)
+		{
+			free ((char*)self->mib_name);
+			self->mib_name = NULL;
+		}
+		if (self->mib_version)
+		{
+			free ((char*)self->mib_version);
+			self->mib_version = NULL;
+		}
+		if (self->oid_pwr_status)
+		{
+			free ((char*)self->oid_pwr_status);
+			self->oid_pwr_status = NULL;
+		}
+		if (self->oid_auto_check)
+		{
+			free ((char*)self->oid_auto_check);
+			self->oid_auto_check = NULL;
+		}
+		if (self->sysOID)
+		{
+			free ((char*)self->sysOID);
+			self->sysOID = NULL;
+		}
+		if (self->snmp_info)
+		{
+			
+			free ((snmp_info_t*)self->snmp_info);
+			self->snmp_info = NULL;
+		}
+		if (self->alarms_info)
+		{
+			
+			free ((alarms_info_t*)self->alarms_info);
+			self->alarms_info = NULL;
+		}
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+/*New generic list element (can be the root element)*/
+alist_t *
+alist_new ( const char *name,
+	void (*destroy)(void **self_p),
+	void (*new_element)(void) )
+{
+	alist_t *self = (alist_t*) calloc (1, sizeof (alist_t));
+	assert (self);
+	self->size = 0;
+	self->capacity = DEFAULT_CAPACITY;
+	self->values = (void**) calloc (self->capacity, sizeof (void*));
+	assert (self->values);
+	self->destroy = destroy;
+	self->new_element = new_element;
+	if(name)
+		self->name = strdup(name);
+	else
+		self->name = NULL;
+	return self;
+}
+
+/*Destroy full array of generic list elements*/
+void
+alist_destroy (alist_t **self_p)
+{
+	if (*self_p)
+	{
+		alist_t *self = *self_p;
+		for (;self->size > 0; self->size--)
+		{
+			if (self->destroy)
+				self->destroy(& self->values [self->size-1]);
+			else
+				free(self->values[self->size-1]);
+		}
+		if (self->name)
+			free(self->name);
+		free (self->values);
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+/*Add a generic element at the end of the list*/
+void
+alist_append (alist_t *self, void *element)
+{
+	if (self->size + 1 == self->capacity)
+	{
+		self->capacity += DEFAULT_CAPACITY;
+		self->values = (void**) realloc (
+			self->values,
+			self->capacity * sizeof(void*) );
+	}
+	self->values[self->size] = element;
+	self->size++;
+	self->values[self->size] = NULL;
+}
+
+/*Return the last element of the list*/
+alist_t *
+alist_get_last_element (alist_t *self)
+{
+	if(self)
+		return (alist_t*)self->values[self->size-1];
+	return NULL;
+}
+
+alist_t *
+alist_get_element_by_name (alist_t *self, char *name)
+{
+	int i;
+	if (self)
+		for (i = 0; i < self->size; i++)
+			if ( ((alist_t*)self->values[i])->name )
+				if (strcmp(((alist_t*)self->values[i])->name, name) == 0)
+					return (alist_t*)self->values[i];
+	return NULL;
+}
+
+/* Accessors and lifecycle management for the structure that marries DMF and MIB*/
+snmp_device_id_t *
+mibdmf_get_device_table(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return dmp->device_table;
+}
+
+snmp_device_id_t **
+mibdmf_get_device_table_ptr(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return &(dmp->device_table);
+}
+
+int
+mibdmf_get_device_table_counter(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return -1;
+	return dmp->device_table_counter;
+}
+
+int *
+mibdmf_get_device_table_counter_ptr(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return &(dmp->device_table_counter);
+}
+
+mib2nut_info_t **
+mibdmf_get_mib2nut_table(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return dmp->mib2nut_table;
+}
+
+mib2nut_info_t ***
+mibdmf_get_mib2nut_table_ptr(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return &(dmp->mib2nut_table);
+}
+
+alist_t *
+mibdmf_get_aux_list(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return dmp->list[dmp->sublist_elements - 1];
+}
+
+alist_t **
+mibdmf_get_aux_list_ptr(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return &(dmp->list[dmp->sublist_elements - 1]);
+}
+
+alist_t **
+mibdmf_get_initial_list_ptr(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return NULL;
+	return dmp->list;
+}
+
+int
+mibdmf_get_list_size(mibdmf_parser_t *dmp)
+{
+	if (dmp==NULL) return 0;
+	return dmp->sublist_elements;
+}
+
+/* Properly destroy the object hierarchy and NULLify the caller's pointer*/
+void
+mibdmf_parser_destroy(mibdmf_parser_t **self_p)
+{
+	if (*self_p)
+	{
+                int i;
+		mibdmf_parser_t *self = (mibdmf_parser_t *) *self_p;
+		/* First we destroy the index tables that reference data in the list...*/
+		if (self->device_table)
+		{
+			free(self->device_table);
+			self->device_table = NULL;
+		}
+		if (self->mib2nut_table)
+		{
+			free(self->mib2nut_table);
+			self->mib2nut_table = NULL;
+		}
+		for(i = 0; i < self->sublist_elements; i++)
+		{
+                     if(self->list[i])
+			alist_destroy( &(self->list[i]) );
+			self->list[i] = NULL;
+		}
+		free(self->list);
+		self->device_table_counter = 0;
+		free (self);
+		*self_p = NULL;
+	}
+}
+
+/*This function is implemented for isolate every XML driver.
+ * before was all drivers fields in the same list and this causes problems when
+ * two elements from difrent driver have the same name, now all drivers are isolete in their
+ * own alist, then is possible to have the same names without making bugs
+ * If it necessary, the design allows in the future implement a function for share elements with drivers.
+ * but no anymore by accident.*/
+void
+mibdmf_parser_new_list(mibdmf_parser_t *dmp)
+{
+	dmp->sublist_elements++;
+	if(dmp->sublist_elements == 1)
+		dmp->list = (alist_t **) malloc((dmp->sublist_elements + 1) * sizeof(alist_t *));
+	else
+		dmp->list = (alist_t **) realloc(dmp->list, (dmp->sublist_elements + 1) * sizeof(alist_t *));
+	assert (dmp->list);
+	dmp->list[dmp->sublist_elements - 1] = alist_new( NULL,(void (*)(void **))alist_destroy, NULL );
+	assert (dmp->list[dmp->sublist_elements - 1]);
+	dmp->list[dmp->sublist_elements] = NULL;
+}
+
+mibdmf_parser_t *
+mibdmf_parser_new()
+{
+	mibdmf_parser_t *self = (mibdmf_parser_t *) calloc (1, sizeof (mibdmf_parser_t));
+	assert (self);
+	// Preallocate the sentinel in tables
+	self->device_table_counter = 1;
+	self->device_table = (snmp_device_id_t *)calloc(
+		self->device_table_counter, sizeof(snmp_device_id_t));
+	self->mib2nut_table = (mib2nut_info_t **)calloc(
+		self->device_table_counter, sizeof(mib2nut_info_t*));
+	assert (self->device_table);
+	assert (self->mib2nut_table);
+	assert (self->device_table_counter >= 1);
+	self->sublist_elements = 0;
+	return self;
+}
+
+
+/*I splited because with the error control is going a grow a lot*/
+void
+mib2nut_info_node_handler (alist_t *list, const char **attrs)
+{
+	alist_t *element = alist_get_last_element(list);
+	int i=0;
+	snmp_info_t *snmp = NULL;
+	alarms_info_t *alarm = NULL;
+
+	char **arg = (char**) calloc (
+		(INFO_MIB2NUT_MAX_ATTRS + 1), sizeof (void**) );
+	assert (arg);
+
+	arg[0] = get_param_by_name(MIB2NUT_MIB_NAME, attrs);
+	arg[1] = get_param_by_name(MIB2NUT_VERSION, attrs);
+	arg[2] = get_param_by_name(MIB2NUT_OID, attrs);
+	arg[3] = get_param_by_name(MIB2NUT_POWER_STATUS, attrs);
+	arg[4] = get_param_by_name(MIB2NUT_AUTO_CHECK, attrs);
+	arg[5] = get_param_by_name(MIB2NUT_SNMP, attrs);
+	arg[6] = get_param_by_name(MIB2NUT_ALARMS, attrs);
+
+	if (arg[5])
+	{
+		alist_t *lkp = alist_get_element_by_name(list, arg[5]);
+		snmp = (snmp_info_t*) calloc(
+			(lkp->size + 1), sizeof(snmp_info_t) );
+		for(i = 0; i < lkp->size; i++)
+		{
+			snmp[i].info_flags = ((snmp_info_t*)
+				lkp->values[i])->info_flags;
+			snmp[i].info_len = ((snmp_info_t*)
+				lkp->values[i])->info_len;
+			snmp[i].flags = ((snmp_info_t*)
+				lkp->values[i])->flags;
+
+			if( ((snmp_info_t*) lkp->values[i])->info_type )
+				snmp[i].info_type = ((snmp_info_t*)
+					lkp->values[i])->info_type;
+			else	snmp[i].info_type = NULL;
+
+			if( ((snmp_info_t*) lkp->values[i])->OID )
+				snmp[i].OID = ((snmp_info_t*)
+					lkp->values[i])->OID;
+			else	snmp[i].OID = NULL;
+
+			if( ((snmp_info_t*) lkp->values[i])->dfl )
+				snmp[i].dfl = ((snmp_info_t*)
+					lkp->values[i])->dfl;
+			else	snmp[i].dfl = NULL;
+
+			if( ((snmp_info_t*) lkp->values[i])->setvar )
+				snmp[i].setvar = ((snmp_info_t*)
+					lkp->values[i])->setvar;
+			else	snmp[i].setvar = NULL;
+
+			if( ((snmp_info_t*) lkp->values[i])->oid2info )
+				snmp[i].oid2info = ((snmp_info_t*)
+					lkp->values[i])->oid2info;
+			else	snmp[i].oid2info = NULL;
+                        
+#ifdef WITH_DMF_LUA
+			if( ((snmp_info_t*) lkp->values[i])->function )
+				snmp[i].function = ((snmp_info_t*)
+					lkp->values[i])->function;
+			else    snmp[i].function = NULL;
+                        
+			if( ((snmp_info_t*) lkp->values[i])->luaContext )
+				snmp[i].luaContext = ((snmp_info_t*)
+					lkp->values[i])->luaContext;
+			else    snmp[i].luaContext = NULL;
+#endif
+		}
+
+		/* To be safe, do the sentinel entry explicitly */
+		snmp[i].info_flags = 0;
+		snmp[i].info_type = NULL;
+		snmp[i].info_len = 0;
+		snmp[i].OID = NULL;
+		snmp[i].flags = 0;
+		snmp[i].dfl = NULL;
+		snmp[i].setvar = NULL;
+		snmp[i].oid2info = NULL;
+#ifdef WITH_DMF_LUA
+                snmp[i].function = NULL;
+                snmp[i].luaContext = NULL;
+#endif
+	}
+
+	if(arg[6])
+	{
+		alist_t *alm = alist_get_element_by_name(list, arg[6]);
+		alarm = (alarms_info_t*) calloc(
+			alm->size + 1, sizeof(alarms_info_t) );
+		for(i = 0; i < alm->size; i++)
+		{
+			if( ((alarms_info_t*) alm->values[i])->OID )
+				alarm[i].OID = ((alarms_info_t*)
+					alm->values[i])->OID;
+			else	alarm[i].OID = NULL;
+
+			if( ((alarms_info_t*) alm->values[i])->status_value )
+				alarm[i].status_value = ((alarms_info_t*)
+					alm->values[i])->status_value;
+			else alarm[i].status_value = NULL;
+
+			if( ((alarms_info_t*) alm->values[i])->alarm_value )
+				alarm[i].alarm_value = ((alarms_info_t*)
+					alm->values[i])->alarm_value;
+			else alarm[i].alarm_value = NULL;
+		}
+		alarm[i].OID = NULL;
+		alarm[i].status_value = NULL;
+		alarm[i].alarm_value = NULL;
+	}
+
+	if(arg[0])
+	{
+		alist_append(element, ((mib2nut_info_t *(*) (
+			const char *, const char *, const char *,
+			const char *, snmp_info_t *, const char *,
+			alarms_info_t *)) element->new_element)
+			(arg[0], arg[1], arg[3], arg[4],
+			 snmp, arg[2], alarm));
+	}
+
+	for (i = 0; i < (INFO_MIB2NUT_MAX_ATTRS + 1); i++)
+		free (arg[i]);
+        
+	free (arg);
+}
+
+void
+alarm_info_node_handler(alist_t *list, const char **attrs)
+{
+	alist_t *element = alist_get_last_element(list);
+	int i=0;
+	char **arg = (char**) calloc (
+		(INFO_ALARM_MAX_ATTRS + 1), sizeof (void**) );
+	assert (arg);
+
+	arg[0] = get_param_by_name(ALARM_ALARM, attrs);
+	arg[1] = get_param_by_name(ALARM_STATUS, attrs);
+	arg[2] = get_param_by_name(ALARM_OID, attrs);
+
+	if(arg[0])
+		alist_append(element, ( (alarms_info_t *(*)
+			(const char *, const char *, const char *) )
+			element->new_element) (arg[0], arg[1], arg[2]));
+
+	for(i = 0; i < (INFO_ALARM_MAX_ATTRS + 1); i++)
+		free (arg[i]);
+
+	free (arg);
+}
+
+void
+lookup_info_node_handler(alist_t *list, const char **attrs)
+{
+	alist_t *element = alist_get_last_element(list);
+	int i = 0;
+	char **arg = (char**) calloc ((INFO_LOOKUP_MAX_ATTRS + 1), sizeof (void**));
+	assert (arg);
+
+	arg[0] = get_param_by_name(LOOKUP_OID, attrs);
+	arg[1] = get_param_by_name(LOOKUP_VALUE, attrs);
+
+	if(arg[0])
+	alist_append(element, ((info_lkp_t *(*) (int, const char *)) element->new_element) (atoi(arg[0]), arg[1]));
+
+	for(i = 0; i < (INFO_LOOKUP_MAX_ATTRS + 1); i++)
+		free (arg[i]);
+
+	free (arg);
+}
+
+#ifdef WITH_DMF_LUA
+void
+function_node_handler(alist_t *list, const char **attrs)
+{
+	alist_t *element = alist_get_last_element(list);
+	char *arg = (char*) calloc (32, sizeof (char *));
+	arg = get_param_by_name(SNMP_NAME, attrs);
+    
+	if(arg)
+		alist_append(element, ((function_t *(*) (const char *)) element->new_element) (arg));
+	free(arg);
+}
+#endif
+
+void
+snmp_info_node_handler(alist_t *list, const char **attrs)
+{
+#ifdef WITH_DMF_LUA
+	char *buff = NULL;
+#endif
+	double multiplier = 128;
+	
+	unsigned long flags;
+	int info_flags;
+	info_lkp_t *lookup = NULL;
+	alist_t *element = alist_get_last_element(list);
+	int i = 0;
+	char **arg = (char**) calloc (
+		(INFO_SNMP_MAX_ATTRS + 1), sizeof (void**) );
+	assert (arg);
+
+	arg[0] = get_param_by_name(SNMP_NAME, attrs);
+	arg[1] = get_param_by_name(SNMP_MULTIPLIER, attrs);
+	arg[2] = get_param_by_name(SNMP_OID, attrs);
+	arg[3] = get_param_by_name(SNMP_DEFAULT, attrs);
+	arg[4] = get_param_by_name(SNMP_LOOKUP, attrs);
+	arg[5] = get_param_by_name(SNMP_SETVAR, attrs);
+	
+#ifdef WITH_DMF_LUA
+arg[6] = get_param_by_name(TYPE_FUNCTION, attrs);
+if(arg[6]){
+	alist_t *funcs = alist_get_element_by_name(list, arg[6]);
+	if(funcs){
+		for (i = 0; i < funcs->size; i++)
+			if(strcmp(((function_t*)funcs->values[i])->name, arg[0]) == 0){
+				buff = ((function_t*)funcs->values[i])->code;
+			}
+		}
+}
+#endif
+	/*Info_flags*/
+	info_flags = compile_info_flags(attrs);
+	/*Flags*/
+	flags = compile_flags(attrs);
+
+	if(arg[4])
+	{
+		alist_t *lkp = alist_get_element_by_name(list, arg[4]);
+		lookup = (info_lkp_t*) calloc(
+			(lkp->size + 1), sizeof(info_lkp_t) );
+		for (i = 0; i < lkp->size; i++)
+		{
+			lookup[i].oid_value = ((info_lkp_t*)
+				lkp->values[i])->oid_value;
+			if( ((info_lkp_t*) lkp->values[i])->info_value )
+				lookup[i].info_value = ((info_lkp_t*)
+					lkp->values[i])->info_value;
+			else	lookup[i].info_value = NULL;
+		}
+		lookup[i].oid_value = 0;
+		lookup[i].info_value = NULL;
+	}
+
+	if(arg[1])
+		multiplier = atof(arg[1]);
+
+	if(arg[5])
+	{
+		flags |= SU_FLAG_SETINT;
+		if(strcmp(arg[5], SETVAR_INPUT_PHASES) == 0)
+			alist_append(element, ((snmp_info_t *(*)
+				(const char *, int, double, const char *,
+				 const char *, unsigned long, info_lkp_t *,
+				 int *
+#ifdef WITH_DMF_LUA
+, char**
+#endif
+                                )) element->new_element)
+				(arg[0], info_flags, multiplier, arg[2],
+				 arg[3], flags, lookup, &input_phases
+#ifdef WITH_DMF_LUA
+, &buff
+#endif
+                                ));
+		else if(strcmp(arg[5], SETVAR_OUTPUT_PHASES) == 0)
+			alist_append(element, ((snmp_info_t *(*)
+				(const char *, int, double, const char *,
+				 const char *, unsigned long, info_lkp_t *,
+				 int *
+#ifdef WITH_DMF_LUA
+, char**
+#endif
+                                )) element->new_element)
+				(arg[0], info_flags, multiplier, arg[2],
+				 arg[3], flags, lookup, &output_phases
+#ifdef WITH_DMF_LUA
+, &buff
+#endif
+                                ));
+		else if(strcmp(arg[5], SETVAR_BYPASS_PHASES) == 0)
+			alist_append(element, ((snmp_info_t *(*)
+				(const char *, int, double, const char *,
+				 const char *, unsigned long, info_lkp_t *,
+				 int *
+#ifdef WITH_DMF_LUA
+, char**
+#endif
+                                )) element->new_element)
+				(arg[0], info_flags, multiplier, arg[2],
+				 arg[3], flags, lookup, &bypass_phases
+#ifdef WITH_DMF_LUA
+, &buff
+#endif
+                                ));
+	} else
+		alist_append(element, ((snmp_info_t *(*)
+			(const char *, int, double, const char *,
+			 const char *, unsigned long, info_lkp_t *, int *
+#ifdef WITH_DMF_LUA
+, char**
+#endif
+                        ))
+			element->new_element)
+			(arg[0], info_flags, multiplier, arg[2],
+			 arg[3], flags, lookup, NULL
+#ifdef WITH_DMF_LUA
+, &buff
+#endif
+                        ));
+
+	for(i = 0; i < (INFO_SNMP_MAX_ATTRS + 1); i++)
+		free (arg[i]);
+
+	free (arg);
+}
+
+unsigned long
+compile_flags(const char **attrs)
+{
+	unsigned long flags = 0;
+	char *aux_flags = NULL;
+	aux_flags = get_param_by_name(SNMP_FLAG_OK, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_FLAG_OK;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_FLAG_STATIC, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_FLAG_STATIC;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_FLAG_ABSENT, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_FLAG_ABSENT;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_FLAG_NEGINVALID, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_FLAG_NEGINVALID;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_FLAG_UNIQUE, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_FLAG_UNIQUE;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_STATUS_PWR, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_STATUS_PWR;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_STATUS_BATT, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_STATUS_BATT;
+	
+	if(aux_flags)free(aux_flags);
+		aux_flags = get_param_by_name(SNMP_STATUS_CAL, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_STATUS_CAL;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_STATUS_RB, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_STATUS_RB;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_TYPE_CMD, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_TYPE_CMD;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_OUTLET_GROUP, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_OUTLET_GROUP;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_OUTLET, attrs);
+		if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_OUTLET;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_OUTPUT_1, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_OUTPUT_1;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_OUTPUT_3, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_OUTPUT_3;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_INPUT_1, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_INPUT_1;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_INPUT_3, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_INPUT_3;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_BYPASS_1, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_BYPASS_1;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_BYPASS_3, attrs);
+	if(aux_flags)if(strcmp(aux_flags, YES) == 0)
+			flags = flags | SU_BYPASS_3;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(TYPE_DAISY, attrs);
+	if(aux_flags){
+		if(strcmp(aux_flags, "1") == 0)
+			flags = flags | SU_TYPE_DAISY_1;
+		else if(strcmp(aux_flags, "2") == 0)
+			flags = flags | SU_TYPE_DAISY_2;
+	}
+	if(aux_flags)free(aux_flags);
+#ifdef WITH_DMF_LUA
+	aux_flags = get_param_by_name(TYPE_FUNCTION, attrs);
+	if(aux_flags){
+		flags = flags | SU_FLAG_FUNCTION;
+	}
+	if(aux_flags)free(aux_flags);
+#endif
+	return flags;
+}
+
+int
+compile_info_flags(const char **attrs)
+{
+	int info_flags = 0;
+	char *aux_flags = NULL;
+	aux_flags = get_param_by_name(SNMP_INFOFLAG_WRITABLE, attrs);
+	if(aux_flags)
+		if(strcmp(aux_flags, YES) == 0)
+			info_flags = info_flags | ST_FLAG_RW;
+	
+	if(aux_flags)free(aux_flags);
+	aux_flags = get_param_by_name(SNMP_INFOFLAG_STRING, attrs);
+	if(aux_flags)
+		if(strcmp(aux_flags, YES) == 0)
+			info_flags = info_flags | ST_FLAG_STRING;
+	
+	if(aux_flags)free(aux_flags);
+
+	return info_flags;
+}
+
+int
+xml_dict_start_cb(void *userdata, int parent,
+		const char *nspace, const char *name,
+		const char **attrs)
+{
+	if(!userdata)return ERR;
+
+	char *auxname = get_param_by_name("name",attrs);
+	mibdmf_parser_t *dmp = (mibdmf_parser_t*) userdata;
+	alist_t *list = *(mibdmf_get_aux_list_ptr(dmp));
+
+	if(strcmp(name,DMFTAG_MIB2NUT) == 0)
+	{
+		alist_append(list, alist_new(auxname, info_mib2nut_destroy,
+			(void (*)(void)) info_mib2nut_new));
+		mib2nut_info_node_handler(list,attrs);
+	}
+	else if(strcmp(name,DMFTAG_LOOKUP) == 0)
+	{
+		alist_append(list, alist_new(auxname, info_lkp_destroy,
+			(void (*)(void)) info_lkp_new));
+	}
+	else if(strcmp(name,DMFTAG_ALARM) == 0)
+	{
+		alist_append(list, alist_new(auxname, info_alarm_destroy,
+			(void (*)(void)) info_alarm_new));
+	}
+	else if(strcmp(name,DMFTAG_SNMP) == 0)
+	{
+		alist_append(list, alist_new(auxname, info_snmp_destroy,
+			(void (*)(void)) info_snmp_new));
+	}
+	else if(strcmp(name,DMFTAG_INFO_LOOKUP) == 0)
+	{
+		lookup_info_node_handler(list,attrs);
+	}
+	else if(strcmp(name,DMFTAG_INFO_ALARM) == 0)
+	{
+		alarm_info_node_handler(list,attrs);
+	}
+	else if(strcmp(name,DMFTAG_INFO_SNMP) == 0)
+	{
+		snmp_info_node_handler(list,attrs);
+	}
+	else if(strcmp(name,DMFTAG_FUNCTIONS) == 0)
+	{
+#ifdef WITH_DMF_LUA
+	alist_append(list, alist_new(auxname, function_destroy,
+			(void (*)(void)) function_new));
+	functions_aux = 1;
+#else
+	upsdebugx(5, "NUT was not compiled with Lua function feature.\n");
+	upslogx(2, "NUT was not compiled with Lua function feature.\n");
+#endif
+	}
+	else if(strcmp(name,DMFTAG_FUNCTION) == 0)
+	{
+#ifdef WITH_DMF_LUA
+		upsdebugx(1, "LUA support COMPILED IN");
+		function_node_handler(list,attrs);
+#else
+		upsdebugx(1, "LUA support *NOT* COMPILED IN");
+		upsdebugx(5, "NUT was not compiled with Lua function feature.\n");
+		upslogx(2, "NUT was not compiled with Lua function feature.\n");
+#endif
+	}
+	else if(strcmp(name,DMFTAG_NUT) != 0)
+	{
+		upslogx(2, "WARN: The '%s' tag in DMF is not recognized!\n", name);
+	}
+	free(auxname);
+	return DMF_NEON_CALLBACK_OK;
+}
+
+int
+xml_end_cb(void *userdata, int state, const char *nspace, const char *name)
+{
+	if(!userdata)return ERR;
+
+	mibdmf_parser_t *dmp = (mibdmf_parser_t*) userdata;
+	alist_t *list = *(mibdmf_get_aux_list_ptr(dmp));
+	alist_t *element = alist_get_last_element(list);
+
+	/* Currently, special handling in the DMF tag closure is for "mib2nut"
+	 * tags that are last in the file according to schema - so we know we
+	 * have all needed info at this time to populate an instance of the
+	 * mib2nut_table index (there may be several such entries in one DMF).
+	 */
+	if(strcmp(name,DMFTAG_MIB2NUT) == 0)
+	{
+		int device_table_counter = mibdmf_get_device_table_counter(dmp);
+
+		*mibdmf_get_device_table_ptr(dmp) = (snmp_device_id_t *) realloc(*mibdmf_get_device_table_ptr(dmp),
+			device_table_counter * sizeof(snmp_device_id_t));
+		*mibdmf_get_mib2nut_table_ptr(dmp) = (mib2nut_info_t **) realloc(*mibdmf_get_mib2nut_table_ptr(dmp),
+			device_table_counter * sizeof(mib2nut_info_t*));
+
+		snmp_device_id_t *device_table = mibdmf_get_device_table(dmp);
+		assert (device_table);
+
+		/* Make sure the new last entry in the table is zeroed-out */
+		memset (device_table + device_table_counter - 1, 0,
+			sizeof (snmp_device_id_t));
+
+		(*mibdmf_get_mib2nut_table_ptr(dmp))[device_table_counter - 1] =
+			(mib2nut_info_t *) element->values[0];
+
+		if(((mib2nut_info_t *) element->values[0])->oid_auto_check)
+			device_table[device_table_counter - 1].oid =
+			(char *)((mib2nut_info_t *) element->values[0])->oid_auto_check;
+
+		if(((mib2nut_info_t *) element->values[0])->mib_name)
+			device_table[device_table_counter - 1].mib
+			= (char *)((mib2nut_info_t *) element->values[0])->mib_name;
+
+		if(((mib2nut_info_t *) element->values[0])->sysOID)
+			device_table[device_table_counter - 1].sysoid =
+			(char *)((mib2nut_info_t *) element->values[0])->sysOID;
+
+		(*mibdmf_get_device_table_counter_ptr(dmp))++;
+	}
+#ifdef WITH_DMF_LUA
+	else if(strcmp(name,DMFTAG_FUNCTIONS) == 0)
+	{
+		functions_aux = 0;
+		free(luatext);
+		luatext = NULL;
+          
+	}else if(strcmp(name,DMFTAG_FUNCTION) == 0)
+	{
+		alist_t *element = alist_get_last_element(list);
+		function_t *func =(function_t *) alist_get_last_element(element);
+		func->code = strdup(luatext);
+		free(luatext);
+		luatext = NULL;
+	}
+#endif
+	return OK;
+}
+
+int
+xml_cdata_cb(void *userdata, int state, const char *cdata, size_t len)
+{
+	if(!userdata)
+		return ERR;
+
+#ifdef WITH_DMF_LUA
+if(len > 2){
+/* NOTE: Child-tags are also CDATA when parent-tag processing starts,
+ so we do not report "unsupported" errors when we it a CDATA process.*/
+	if(functions_aux){
+		if(!luatext){
+			luatext = (char*) calloc(len + 2, sizeof(char));
+			sprintf(luatext, "%.*s\n", (int) len, cdata);
+
+		}else{
+			luatext = (char*) realloc(luatext, (strlen(luatext) + len + 2) * sizeof(char));
+			char *aux_str = (char*) calloc(len + 2, sizeof(char));
+			sprintf(aux_str, "%.*s\n", (int) len, cdata);
+			strcat(luatext, aux_str);
+			free(aux_str);
+		}
+	}
+}
+#endif
+	return OK;
+}
+
+/* Load DMF XML file into structure tree at *list (precreate with alist_new)
+ Returns 0 on success, or an <errno> code on system or parsing errors*/
+int
+mibdmf_parse_file(char *file_name, mibdmf_parser_t *dmp)
+{
+	char buffer[4096]; /* Align with common cluster/FSblock size nowadays */
+	FILE *f;
+	int result = 0;
+	int flag = 0;
+        
+	assert (file_name);
+	assert (dmp);
+	mibdmf_parser_new_list(dmp);
+	assert (mibdmf_get_aux_list(dmp)!=NULL);
+
+	upsdebugx(1, "%s(%s)", __func__, file_name);
+
+	if ( (file_name == NULL ) || \
+	     ( (f = fopen(file_name, "r")) == NULL ) )
+	{
+		upsdebugx(1, "ERROR: DMF file '%s' not found or not readable\n",
+			file_name ? file_name : "<NULL>");
+		return ENOENT;
+	}
+	if(!handle){
+		flag = 1;
+		if(load_neon_lib() == ERR) return ERR;
+	}
+	ne_xml_parser *parser = xml_create ();
+	xml_push_handler (parser, xml_dict_start_cb,
+		xml_cdata_cb
+		, xml_end_cb, dmp);
+
+	/* The neon XML parser would get blocks from the DMF file and build
+	   the in-memory representation with our xml_dict_start_cb() callback.
+	   Any hiccup (FS, neon, callback) is failure. */
+	while (!feof (f))
+	{
+		size_t len = fread(buffer, sizeof(char), sizeof(buffer), f);
+		if (len == 0) /* Should not zero-read from a non-EOF file */
+		{
+			fprintf(stderr, "ERROR parsing DMF from '%s'"
+				"(unexpected short read)\n", file_name);
+			upslogx(2, "ERROR parsing DMF from '%s'"
+				"(unexpected short read)\n", file_name);
+			result = EIO;
+			break;
+		} else {
+			if ((result = xml_parse (parser, buffer, len)))
+			{
+				fprintf(stderr, "ERROR parsing DMF from '%s'"
+					"(unexpected markup?)\n", file_name);
+				upslogx(2, "ERROR parsing DMF from '%s'"
+					"(unexpected markup?)\n", file_name);
+				result = ENOMSG;
+				break;
+			}
+		}
+	}
+	fclose (f);
+	if (!result) /* no errors, complete the parse with len==0 call */
+		xml_parse (parser, buffer, 0);
+	xml_destroy (parser);
+	if(flag == 1)
+		unload_neon_lib();
+
+	upsdebugx(1, "%s DMF acquired from '%s' (result = %d) %s",
+		( result == 0 ) ? "[--OK--]" : "[-FAIL-]", file_name, result,
+		( result == 0 ) ? "" : strerror(result)
+	);
+
+	/* Extend or truncate the tables to the current amount of known entries
+	   To be on the safe side, we do this even if current file hiccuped. */
+	assert (mibdmf_get_device_table_counter(dmp)>=1); /* Avoid underflow in memset below */
+	*mibdmf_get_device_table_ptr(dmp) = (snmp_device_id_t *) realloc(*mibdmf_get_device_table_ptr(dmp),
+		mibdmf_get_device_table_counter(dmp) * sizeof(snmp_device_id_t));
+	*mibdmf_get_mib2nut_table_ptr(dmp) = (mib2nut_info_t **) realloc(*mibdmf_get_mib2nut_table_ptr(dmp),
+		mibdmf_get_device_table_counter(dmp) * sizeof(mib2nut_info_t *));
+	assert (mibdmf_get_device_table(dmp));
+	assert (mibdmf_get_mib2nut_table(dmp));
+
+	/* Make sure the last entry in the table is the zeroed-out sentinel */
+	memset (*mibdmf_get_device_table_ptr(dmp) + mibdmf_get_device_table_counter(dmp) - 1, 0,
+		sizeof (snmp_device_id_t));
+	*(*mibdmf_get_mib2nut_table_ptr(dmp) + mibdmf_get_device_table_counter(dmp) - 1) = NULL;
+
+	return result;
+}
+
+/* Parse a buffer with complete DMF XML (from <nut> to </nut>)*/
+int
+mibdmf_parse_str (const char *dmf_string, mibdmf_parser_t *dmp)
+{
+	int result = 0;
+	size_t len;
+
+	assert (dmf_string);
+	assert (dmp);
+	mibdmf_parser_new_list(dmp);
+	assert (mibdmf_get_aux_list(dmp)!=NULL);
+
+	if ( (dmf_string == NULL ) || \
+	     ( (len = strlen(dmf_string)) == 0 ) )
+	{
+		fprintf(stderr, "ERROR: DMF passed in a string is empty or NULL\n");
+		upslogx(1, "ERROR: DMF passed in a string is empty or NULL\n");
+		return ENOENT;
+	}
+	if(load_neon_lib() == ERR) return ERR;
+	ne_xml_parser *parser = xml_create ();
+	xml_push_handler (parser, xml_dict_start_cb,
+		xml_cdata_cb
+		, xml_end_cb, dmp);
+
+	if ((result = xml_parse (parser, dmf_string, len)))
+	{
+		fprintf(stderr, "ERROR parsing DMF from string "
+			"(unexpected markup?)\n");
+		upslogx(2, "ERROR parsing DMF from string "
+			"(unexpected markup?)\n");
+		result = ENOMSG;
+	}
+
+	if (!result) /* no errors, complete the parse with len==0 call */
+		xml_parse (parser, dmf_string, 0);
+	xml_destroy (parser);
+	unload_neon_lib();
+
+	upsdebugx(1, "%s DMF acquired from string (result = %d) %s",
+		( result == 0 ) ? "[--OK--]" : "[-FAIL-]", result,
+		( result == 0 ) ? "" : strerror(result)
+	);
+
+	/* Extend or truncate the tables to the current amount of known entries
+	   To be on the safe side, we do this even if current file hiccuped. */
+	assert (mibdmf_get_device_table_counter(dmp)>=1); /* Avoid underflow in memset below */
+	*mibdmf_get_device_table_ptr(dmp) = (snmp_device_id_t *) realloc(*mibdmf_get_device_table_ptr(dmp),
+		mibdmf_get_device_table_counter(dmp) * sizeof(snmp_device_id_t));
+	*mibdmf_get_mib2nut_table_ptr(dmp) = (mib2nut_info_t **) realloc(*mibdmf_get_mib2nut_table_ptr(dmp),
+		mibdmf_get_device_table_counter(dmp) * sizeof(mib2nut_info_t *));
+	assert (mibdmf_get_device_table(dmp));
+	assert (mibdmf_get_mib2nut_table(dmp));
+
+	/* Make sure the last entry in the table is the zeroed-out sentinel */
+	memset (*mibdmf_get_device_table_ptr(dmp) + mibdmf_get_device_table_counter(dmp) - 1, 0,
+		sizeof (snmp_device_id_t));
+	*(*mibdmf_get_mib2nut_table_ptr(dmp) + mibdmf_get_device_table_counter(dmp) - 1) = NULL;
+
+	return result;
+}
+
+/* Load all `*.dmf` DMF XML files from specified directory into aux list tree
+ NOTE: Technically by current implementation, this is `*.dmf*`*/
+int
+mibdmf_parse_dir (char *dir_name, mibdmf_parser_t *dmp)
+{
+	struct dirent **dir_ent;
+	int i = 0, x = 0, result = 0, n = 0;
+
+	assert (dir_name);
+	assert (dmp);
+
+	if ( (dir_name == NULL ) || \
+	     ( (n = scandir(dir_name, &dir_ent, NULL, alphasort)) == 0 ) )
+	{
+		upsdebugx(1, "ERROR: DMF directory '%s' not found or not readable",
+			dir_name ? dir_name : "<NULL>");
+		return ENOENT;
+	}
+	if(load_neon_lib() == ERR) {
+		upsdebugx(1, "ERROR: can't load Neon library");
+		return ERR;
+	}
+	int c;
+	for (c = 0; c < n; c++)
+	{
+		if ((strstr(dir_ent[c]->d_name, ".dmf")) && (dir_ent[c]->d_name[0] == 'S'))
+		{
+			i++;
+			if(strlen(dir_name) + strlen(dir_ent[c]->d_name) < PATH_MAX_SIZE){
+				char *file_path = (char *) calloc(PATH_MAX_SIZE, sizeof(char));
+				sprintf(file_path, "%s/%s", dir_name, dir_ent[c]->d_name);
+				assert(file_path);
+				int res = mibdmf_parse_file(file_path, dmp);
+				if ( res != 0 )
+				{
+					x++;
+					result = res;
+					/* No debug: parse_file() did it if enabled*/
+				}
+				free(file_path);
+			}else{
+				upsdebugx(5, "File path too long\n");
+				upslogx(2, "File path too long\n");
+			}
+		}
+		free(dir_ent[c]);
+	}
+	free(dir_ent);
+	
+	unload_neon_lib();
+
+	if (i==0) {
+		upsdebugx(1, "WARN: No DMF files were found or readable in directory '%s'",
+			dir_name ? dir_name : "<NULL>");
+	} else {
+		upsdebugx(1, "INFO: %d DMF files were inspected in directory '%s'",
+			i, dir_name ? dir_name : "<NULL>");
+	}
+	if (result!=0 || x>0) {
+		upsdebugx(1, "WARN: Some %d DMF files were not readable in directory '%s' (last bad result %d)",
+			x, dir_name ? dir_name : "<NULL>", result);
+	}
+
+	return result;
+}
+
+bool
+dmf_streq (const char* x, const char* y)
+{
+	if (!x && !y)
+		return true;
+	if (!x || !y) {
+		upsdebugx(2, "\nDEBUG: strEQ(): One compared string (but not both) is NULL:\n\t%s\n\t%s\n", x ? x : "<NULL>" , y ? y : "<NULL>");
+		return false;
+		}
+	int cmp = strcmp (x, y);
+	if (cmp != 0) {
+		upsdebugx(2, "\nDEBUG: strEQ(): Strings not equal (%i):\n\t%s\n\t%s\n", cmp, x, y);
+	}
+	return (cmp == 0);
+}
+
+bool
+dmf_strneq (const char* x, const char* y)
+{
+	if (!x && !y) {
+		upsdebugx(2, "\nDEBUG: strNEQ(): Both compared strings are NULL\n");
+		return false;
+	}
+	if (!x || !y) {
+		return true;
+	}
+	int cmp = strcmp (x, y);
+	if (cmp == 0) {
+		upsdebugx(2, "\nDEBUG: strNEQ(): Strings are equal (%i):\n\t%s\n\t%s\n\n", cmp, x, y);
+	}
+	return (cmp != 0);
+}
Index: nut-2.7.4/common/str.c
===================================================================
--- nut-2.7.4.orig/common/str.c
+++ nut-2.7.4/common/str.c
@@ -25,6 +25,7 @@
 #include <limits.h>
 #include <stdlib.h>
 #include <string.h>
+#include <stdarg.h>	// va_*
 
 #include "str.h"
 
@@ -605,3 +606,40 @@ int	str_to_double_strict(const char *str
 
 	return 1;
 }
+
+/* Based on code by "mmdemirbas" posted "Jul 9 '12 at 11:41" to forum page
+ * http://stackoverflow.com/questions/8465006/how-to-concatenate-2-strings-in-c
+ * This concatenates the given number of strings into one freshly allocated
+ * heap object; NOTE that it is up to the caller to free the object afterwards.
+ */
+char *	str_concat(size_t count, ...)
+{
+	va_list ap;
+	size_t i, len, null_pos;
+	char* merged = NULL;
+
+	// Find required length to store merged string
+	va_start(ap, count);
+	len = 1; // room for '\0' in the end
+	for(i=0 ; i<count ; i++)
+		len += strlen(va_arg(ap, char*));
+	va_end(ap);
+
+	// Allocate memory to concat strings
+	merged = (char*)calloc(len,sizeof(char));
+	if (merged == NULL)
+		return merged;
+
+	// Actually concatenate strings
+	va_start(ap, count);
+	null_pos = 0;
+	for(i=0 ; i<count ; i++)
+	{
+		char *s = va_arg(ap, char*);
+		strcpy(merged+null_pos, s);
+		null_pos += strlen(s);
+	}
+	va_end(ap);
+
+	return merged;
+}
Index: nut-2.7.4/configure.ac
===================================================================
--- nut-2.7.4.orig/configure.ac
+++ nut-2.7.4/configure.ac
@@ -3,7 +3,7 @@ dnl | Network UPS Tools: configure.ac
 dnl +------------------------------------------------------------------+
 
 dnl NUT version number is defined here, with a Git suffix in include/nut_version.h
-AC_INIT(nut, 2.7.4, [https://github.com/networkupstools/nut/issues])
+AC_INIT(nut, 2.7.4.1, [https://github.com/networkupstools/nut/issues])
 AC_CONFIG_AUX_DIR([.])
 AC_CONFIG_SRCDIR(server/upsd.c)
 AC_CONFIG_MACRO_DIR([m4])
@@ -67,6 +67,13 @@ cgiexecdir='${exec_prefix}/cgi-bin'
 driverexecdir='${exec_prefix}/bin'
 htmldir='${prefix}/html'
 pkgconfigdir='${libdir}/pkgconfig'
+auglensdir='/usr/share/augeas/lenses/dist'
+if test ! -d "${auglensdir}"; then
+   auglensdir='/usr/share/augeas/lenses'
+   if test ! -d "${auglensdir}"; then
+      auglensdir=''
+   fi
+fi
 hotplugdir='/etc/hotplug'
 if test ! -d "${hotplugdir}"; then
    hotplugdir=''
@@ -202,7 +209,7 @@ AC_CHECK_DECLS(__func__, [], [
 		AC_DEFINE(__func__, __LINE__, [Replace missing  __func__ declaration])
 	], [AC_INCLUDES_DEFAULT])
 ], [AC_INCLUDES_DEFAULT])
-	      
+
 dnl Solaris compatibility - check for -lnsl and -lsocket
 AC_SEARCH_LIBS(gethostbyname, nsl)
 AC_SEARCH_LIBS(connect, socket)
@@ -210,7 +217,7 @@ AC_SEARCH_LIBS(connect, socket)
 AC_HEADER_TIME
 AC_CHECK_HEADERS(sys/modem.h stdarg.h varargs.h sys/termios.h sys/time.h, [], [], [AC_INCLUDES_DEFAULT])
 
-# pthread related checks
+dnl pthread related checks
 AC_SEARCH_LIBS([pthread_create], [pthread],
        [AC_DEFINE(HAVE_PTHREAD, 1, [Define to enable pthread support code])],
        [])
@@ -224,7 +231,7 @@ dnl check for --with-all (or --without-a
 
 AC_MSG_CHECKING(for --with-all)
 AC_ARG_WITH(all,
-	AS_HELP_STRING([--with-all], [enable serial, usb, snmp, neon, ipmi, powerman, cgi, dev, avahi, linux_i2c]),
+	AS_HELP_STRING([--with-all], [enable serial, usb, snmp, neon, ipmi, powerman, cgi, dev, avahi, linux_i2c, dmf]),
 [
 	if test -n "${withval}"; then
 		dnl Note: we allow "no" as a positive value, because
@@ -239,6 +246,7 @@ AC_ARG_WITH(all,
 		if test -z "${with_avahi}"; then with_avahi="${withval}"; fi
 		if test -z "${with_ipmi}"; then with_ipmi="${withval}"; fi
 		if test -z "${with_linux_i2c}"; then with_linux_i2c="${withval}"; fi
+		if test -z "${with_dmf}"; then with_dmf="${withval}"; fi
 		AC_MSG_RESULT("${withval}")
 	else
 		AC_MSG_RESULT(not given)
@@ -254,7 +262,7 @@ dnl they are listed near the top by "./c
 NUT_ARG_WITH([dev], [build and install the development files], [no])
 NUT_ARG_WITH([serial], [build and install serial drivers], [yes])
 NUT_ARG_WITH([usb], [build and install USB drivers], [auto])
-NUT_ARG_WITH([doc], [build and install documentation], [no])
+NUT_ARG_WITH([doc], [build and install documentation], [man=yes])
 NUT_ARG_WITH([avahi], [build and install Avahi support], [auto])
 
 dnl ----------------------------------------------------------------------
@@ -398,7 +406,7 @@ if test "${nut_with_ipmi}" != "no"; then
    if test "${nut_with_freeipmi}" = "yes"; then
       NUT_CHECK_LIBFREEIPMI
       if test "${nut_have_freeipmi}" != "yes"; then
-         AC_MSG_ERROR(["GNU FreeIPMI not found, required for IPMI support"])
+         AC_MSG_ERROR(["FreeIPMI not found, required for IPMI support"])
       fi
       dnl Implies --with-ipmi
       nut_with_ipmi="yes"
@@ -629,52 +637,167 @@ dnl Always check for AsciiDoc prerequisi
 dnl is set to 'no', we may still want to build some doc targets manually
 NUT_CHECK_ASCIIDOC
 
+AC_MSG_CHECKING([if asciidoc version can build manpages (minimum required 8.6.3)])
+AX_COMPARE_VERSION([${ASCIIDOC_VERSION}], [ge], [8.6.3], [
+	AC_MSG_RESULT(yes)
+	nut_have_asciidoc="yes"
+], [
+	AC_MSG_RESULT(no)
+	nut_have_asciidoc="no"
+])
+
+AC_MSG_CHECKING([if a2x version can build manpages (minimum required 8.6.3)])
+AX_COMPARE_VERSION([${A2X_VERSION}], [ge], [8.6.3], [
+	AC_MSG_RESULT(yes)
+], [
+	AC_MSG_RESULT(no)
+	nut_have_asciidoc="no"
+])
+
+dnl TODO: test for docbook-xsl files (maybe build a test man page?)
+dnl https://github.com/networkupstools/nut/issues/162
+AC_MSG_CHECKING([if xsltproc is present (mandatory for man page regeneration)])
+if test -n "${XSLTPROC}"; then
+  AC_MSG_RESULT(yes)
+else
+  AC_MSG_RESULT(no)
+  nut_have_asciidoc="no"
+fi
+
+AC_MSG_CHECKING([if xmllint is present (mandatory for man page regeneration)])
+if test -n "${XMLLINT}"; then
+  AC_MSG_RESULT(yes)
+else
+  AC_MSG_RESULT(no)
+  nut_have_asciidoc="no"
+fi
+
+AC_MSG_CHECKING([if source-highlight is present (preferable for documentation generation)])
+if test -n "${SOURCE_HIGHLIGHT}"; then
+  AC_MSG_RESULT(yes)
+else
+  AC_MSG_RESULT(no)
+fi
+
+NUT_REPORT_FEATURE([build and install documentation], [${nut_with_doc}], [],
+					[WITH_ASCIIDOC], [Define to enable Asciidoc support])
+
+dnl Notes: we also keep HAVE_ASCIIDOC for implicit targets, such as manpage
+dnl building
+AM_CONDITIONAL([HAVE_ASCIIDOC], [test "${nut_have_asciidoc}" = "yes"])
+
+
 case "${nut_with_doc}" in
-	yes|all|auto)
-		nut_doc_build_list="html-single html-chunked pdf"
+	yes|all)
+		nut_doc_build_list="man html-single html-chunked pdf"
+		;;
+	auto)
+		nut_doc_build_list="man=auto html-single=auto html-chunked=auto pdf=auto"
 		;;
 	no)
 		nut_doc_build_list=""
 		;;
+dnl If user passed --with-doc='' they they want nothing, right?
+	"")
+		nut_doc_build_list=""
+		AC_MSG_NOTICE([Got explicit empty list of document formats to build; nothing will be generated])
+		;;
 	*)
 		nut_doc_build_list="`echo ${nut_with_doc} | sed 's/,/ /g'`"
+		AC_MSG_NOTICE([Got explicit list of document formats to build or not: ${nut_doc_build_list}; formats not listed will be silently skipped])
 		;;
 esac
 
-for nut_doc_build_target in ${nut_doc_build_list}; do
+dnl Note: Do not cover ${nut_doc_build_list} in braces or quotes here,
+dnl to ensure that it is processed as several space-separated tokens
+for nut_doc_build_target in $nut_doc_build_list; do
+	case "${nut_doc_build_target}" in
+	*=*=*) AC_MSG_ERROR([Invalid documentation format option: ${nut_doc_build_target}]) ;;
+	*=*)
+		nut_doc_build_target_base="`echo "${nut_doc_build_target}" | sed 's,=.*$,,'`"
+		nut_doc_build_target_flag="`echo "${nut_doc_build_target}" | sed 's,^.*=,,'`"
+		;;
+	*)
+		nut_doc_build_target_base="${nut_doc_build_target}"
+		nut_doc_build_target_flag="yes"
+		;;
+	esac
+	case "${nut_doc_build_target_flag}" in
+	yes|no|auto|skip) ;;
+	"") nut_doc_build_target_flag="yes" ;;
+	*)  AC_MSG_ERROR([Invalid documentation format option: ${nut_doc_build_target}]) ;;
+	esac
+	AC_MSG_CHECKING([desire and ability to build ${nut_doc_build_target_base} documentation])
+	AC_MSG_RESULT([${nut_doc_build_target_flag}])
+
 	case "${nut_doc_build_target}" in
-	html-single)
-		AC_MSG_CHECKING([if asciidoc version can build ${nut_doc_build_target} (minimum required 8.6.3)])
+	*=no|*=skip)
+		DOC_SKIPBUILD_LIST="${DOC_SKIPBUILD_LIST} ${nut_doc_build_target_base}"
+		;;
+
+dnl Notes: Document options below assume either no flag value (which
+dnl by default means "yes"), "yes" which is a requirement, or "auto"
+dnl to detect if we can build the wanted documentation format and yet
+dnl not fail if we have no tools to generate it.
+
+	html-single*)
+		AC_MSG_CHECKING([if asciidoc version can build ${nut_doc_build_target_base} (minimum required 8.6.3)])
 		AX_COMPARE_VERSION([${ASCIIDOC_VERSION}], [ge], [8.6.3], [
 			AC_MSG_RESULT(yes)
-			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target}"
+			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target_base}"
 		], [
 			AC_MSG_RESULT(no)
-			DOC_NOBUILD_LIST="${DOC_NOBUILD_LIST} ${nut_doc_build_target}"
+			if test "${nut_doc_build_target}" = "yes" ; then
+				AC_MSG_ERROR([Unable to build ${nut_doc_build_target_base} documentation which you requested])
+			fi
+			DOC_CANNOTBUILD_LIST="${DOC_CANNOTBUILD_LIST} ${nut_doc_build_target_base}"
 		])
 		;;
 
-	html-chunked)
-		AC_MSG_CHECKING([if a2x version can build ${nut_doc_build_target} (minimum required 8.6.3)])
+	html-chunked*)
+		AC_MSG_CHECKING([if a2x version can build ${nut_doc_build_target_base} (minimum required 8.6.3)])
 		AX_COMPARE_VERSION([${A2X_VERSION}], [ge], [8.6.3], [
 			AC_MSG_RESULT(yes)
-			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target}"
+			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target_base}"
 		], [
 			AC_MSG_RESULT(no)
-			DOC_NOBUILD_LIST="${DOC_NOBUILD_LIST} ${nut_doc_build_target}"
+			if test "${nut_doc_build_target}" = "yes" ; then
+				AC_MSG_ERROR([Unable to build ${nut_doc_build_target_base} documentation which you requested])
+			fi
+			DOC_CANNOTBUILD_LIST="${DOC_CANNOTBUILD_LIST} ${nut_doc_build_target_base}"
 		])
 		;;
 
-	pdf)
-		AC_MSG_CHECKING([if dblatex version can build ${nut_doc_build_target} (minimum required 0.2.5)])
+	pdf*)
+		AC_MSG_CHECKING([if dblatex version can build ${nut_doc_build_target_base} (minimum required 0.2.5)])
 		AX_COMPARE_VERSION([${DBLATEX_VERSION}], [ge], [0.2.5], [
 			AC_MSG_RESULT(yes)
-			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target}"
+			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target_base}"
 		], [
 			AC_MSG_RESULT(no)
-			DOC_NOBUILD_LIST="${DOC_NOBUILD_LIST} ${nut_doc_build_target}"
+			if test "${nut_doc_build_target}" = "yes" ; then
+				AC_MSG_ERROR([Unable to build ${nut_doc_build_target_base} documentation which you requested])
+			fi
+			DOC_CANNOTBUILD_LIST="${DOC_CANNOTBUILD_LIST} ${nut_doc_build_target_base}"
 		])
 		;;
+
+	man*)
+		AC_MSG_CHECKING([if we can build ${nut_doc_build_target_base}])
+		if test "${nut_have_asciidoc}" = yes ; then
+			AC_MSG_RESULT(yes)
+			DOC_BUILD_LIST="${DOC_BUILD_LIST} ${nut_doc_build_target_base}"
+		else
+			AC_MSG_RESULT(no)
+			if test "${nut_doc_build_target}" = "yes" ; then
+				AC_MSG_ERROR([Unable to build ${nut_doc_build_target_base} documentation which you requested])
+			fi
+			DOC_CANNOTBUILD_LIST="${DOC_CANNOTBUILD_LIST} ${nut_doc_build_target_base}"
+		fi
+		;;
+
+	*) AC_MSG_ERROR([--with-doc option refers to unknown documentation format: $nut_doc_build_target]) ;;
+
 	esac
 done
 
@@ -685,70 +808,34 @@ auto)
 	else
 		nut_with_doc="no"
 	fi
-	;;	
+	;;
 no)
 	;;
 *)
-	if test -z "${DOC_NOBUILD_LIST}"; then
+	if test -n "${DOC_CANNOTBUILD_LIST}"; then
+		AC_MSG_ERROR([Unable to build${DOC_CANNOTBUILD_LIST} documentation (check for 'no' results above)])
+	fi
+
+	if test -n "${DOC_SKIPBUILD_LIST}"; then
+		AC_MSG_NOTICE([Skipping build of${DOC_SKIPBUILD_LIST} documentation (check for 'skip' results above)])
+	fi
+
+	if test -n "${DOC_BUILD_LIST}"; then
 		nut_with_doc="yes"
 	else
-		AC_MSG_ERROR(["Unable to build ${DOC_NOBUILD_LIST} documentation (check for 'no' results above)"])
+		nut_with_doc="no"
 	fi
 	;;
 esac
 
-AC_MSG_CHECKING([if asciidoc version can build manpages (minimum required 8.6.3)])
-AX_COMPARE_VERSION([${ASCIIDOC_VERSION}], [ge], [8.6.3], [
-	AC_MSG_RESULT(yes)
-	nut_have_asciidoc="yes"
-], [
-	AC_MSG_RESULT(no)
-	nut_have_asciidoc="no"
-])
+NUT_REPORT_FEATURE([build specific documentation format(s)], [${nut_with_doc}], [${DOC_BUILD_LIST}],
+					[WITH_DOCS], [Define to enable overall documentation generation])
 
-AC_MSG_CHECKING([if a2x version can build manpages (minimum required 8.6.3)])
-AX_COMPARE_VERSION([${A2X_VERSION}], [ge], [8.6.3], [
-	AC_MSG_RESULT(yes)
-], [
-	AC_MSG_RESULT(no)
-	nut_have_asciidoc="no"
-])
-
-dnl TODO: test for docbook-xsl files (maybe build a test man page?)
-dnl https://github.com/networkupstools/nut/issues/162
-AC_MSG_CHECKING([if xsltproc is present (mandatory for man page regeneration)])
-if test -n "${XSLTPROC}"; then
-  AC_MSG_RESULT(yes)
-else
-  AC_MSG_RESULT(no)
-  nut_have_asciidoc="no"
-fi
-
-AC_MSG_CHECKING([if xmllint is present (mandatory for man page regeneration)])
-if test -n "${XMLLINT}"; then
-  AC_MSG_RESULT(yes)
-else
-  AC_MSG_RESULT(no)
-  nut_have_asciidoc="no"
-fi
-
-AC_MSG_CHECKING([if source-highlight is present (preferable for documentation generation)])
-if test -n "${SOURCE_HIGHLIGHT}"; then
-  AC_MSG_RESULT(yes)
-else
-  AC_MSG_RESULT(no)
-fi
-
-NUT_REPORT_FEATURE([build and install documentation], [${nut_with_doc}], [],
-					[WITH_ASCIIDOC], [Define to enable Asciidoc support])
-
-dnl Notes: we also keep HAVE_ASCIIDOC for implicit targets, such as manpage
-dnl building
-AM_CONDITIONAL([HAVE_ASCIIDOC], [test "${nut_have_asciidoc}" = "yes"])
-
-if test "${nut_with_doc}" = "yes"; then
-	NUT_REPORT([only build specific documentation format], [${DOC_BUILD_LIST}])
+WITH_MANS=no
+if echo "${DOC_BUILD_LIST}" | grep -w "man" >/dev/null ; then
+	WITH_MANS=yes
 fi
+AM_CONDITIONAL(WITH_MANS, test "${WITH_MANS}" = "yes")
 
 dnl ----------------------------------------------------------------------
 dnl checks related to --with-dev
@@ -993,17 +1080,22 @@ if test "${DRIVER_BUILD_LIST}" != "all";
 fi
 
 AC_MSG_CHECKING(which driver man pages to install)
-if test "${DRIVER_BUILD_LIST}" = "all"; then
-	DRIVER_MAN_LIST=all
-	AC_MSG_RESULT(all available)
+if test "${WITH_MANS}" = "yes"; then
+	if test "${DRIVER_BUILD_LIST}" = "all"; then
+		DRIVER_MAN_LIST=all
+		AC_MSG_RESULT(all available)
+	else
+		DRIVER_MAN_LIST=""
+		for i in ${DRIVER_BUILD_LIST}; do
+			if test -f ${srcdir}/docs/man/$i.8; then
+				DRIVER_MAN_LIST="${DRIVER_MAN_LIST} $i.8"
+			fi
+		done
+		AC_MSG_RESULT(${DRIVER_MAN_LIST})
+	fi
 else
 	DRIVER_MAN_LIST=""
-	for i in ${DRIVER_BUILD_LIST}; do
-		if test -f ${srcdir}/docs/man/$i.8; then
-			DRIVER_MAN_LIST="${DRIVER_MAN_LIST} $i.8"
-		fi
-	done
-	AC_MSG_RESULT(${DRIVER_MAN_LIST})
+	AC_MSG_RESULT([none (manpages disabled)])
 fi
 
 AC_MSG_CHECKING(whether to strip debug symbols)
@@ -1046,13 +1138,13 @@ fi
 AM_CONDITIONAL(WITH_PKG_CONFIG, test -n "${pkgconfigdir}")
 
 PKG_PROG_PKG_CONFIG
-systemdsystemunitdir=`$PKG_CONFIG --variable=systemdsystemunitdir systemd`
 AC_MSG_CHECKING(whether to install systemd files)
 AC_ARG_WITH([systemdsystemunitdir],
 	AS_HELP_STRING([--with-systemdsystemunitdir=DIR], [Directory for systemd service files (auto)]),
 [
 	case "${withval}" in
-	yes|auto)
+	yes|auto|"")
+		systemdsystemunitdir=`$PKG_CONFIG --variable=systemdsystemunitdir systemd`
 		;;
 	no)
 		systemdsystemunitdir=""
@@ -1073,6 +1165,34 @@ else
 fi
 AM_CONDITIONAL(HAVE_SYSTEMD, test "$systemdsystemunitdir" != "")
 
+AC_MSG_CHECKING(whether to install Augeas configuration-management lenses)
+AC_ARG_WITH(augeas-lenses-dir,
+	AS_HELP_STRING([--with-augeas-lenses-dir=PATH], [where to install Augeas configuration-management lenses (/usr/share/augeas/lenses{/dist,/})]),
+[
+	case "${withval}" in
+	yes)
+		if test -z "${auglensdir}"; then
+			AC_MSG_RESULT(no)
+			AC_MSG_ERROR(["augeas lenses directory requested but not found in default location"])
+		fi
+		;;
+	auto)
+		;;
+	no)
+		auglensdir=""
+		;;
+	*)
+		auglensdir="${withval}"
+		;;
+	esac
+], [])
+if test -n "${auglensdir}"; then
+	AC_MSG_RESULT(using ${auglensdir})
+else
+	AC_MSG_RESULT(no)
+fi
+AM_CONDITIONAL(WITH_AUGLENS, test -n "${auglensdir}")
+
 AC_MSG_CHECKING(whether to install hotplug rules)
 AC_ARG_WITH(hotplug-dir,
 	AS_HELP_STRING([--with-hotplug-dir=PATH], [where to install hotplug rules (/etc/hotplug)]),
@@ -1210,6 +1330,116 @@ eval conftemp=\"${conftemp}\"
 LIBDIR=${conftemp}
 AC_DEFINE_UNQUOTED(LIBDIR, "${conftemp}", [Default path for system libraries])
 
+dnl ----------------------------------------------------------------------
+dnl Check for --with-dmf
+dnl This MUST be after DATADIR has been processed!
+
+NUT_ARG_WITH([dmf], [enable DMF (data mapping file) support for snmp-ups], [auto])
+
+dnl ${nut_with_dmf}: any value except "yes" or "no" is treated as "auto".
+dnl Check for Neon (mandatory)
+if test "${nut_with_dmf}" = "yes" -a "${nut_have_neon}" != "yes"; then
+   AC_MSG_ERROR(["neon libraries not found, required for DMF (data mapping file) support for snmp-ups"])
+fi
+
+if test "${nut_with_dmf}" != "no"; then
+   nut_with_dmf="${nut_have_neon}"
+fi
+
+DMF_BUILD_OPTIONS=""
+AM_CONDITIONAL([HAVE_XMLLINT], [test -n "${XMLLINT}" ])
+AX_PROG_LUA([5.1], [], [nut_have_lua=yes])
+AX_LUA_HEADERS
+AX_LUA_LIBS
+AM_CONDITIONAL(HAVE_DMF_LUA, test "${nut_have_lua}" = "yes")
+if test "${nut_with_dmf}" = "yes"; then
+   AC_MSG_CHECKING(whether to enable LUA scripting for DMF (data mapping file))
+   if test "${nut_have_lua}" != "no"; then
+      DMF_BUILD_OPTIONS="lua scripting"
+      AC_MSG_RESULT(yes)
+   else
+      AC_MSG_RESULT(no)
+   fi
+
+   dnl The HAVE_XMLLINT flag is used to decide if we want to validate DMFs
+   AC_MSG_CHECKING(whether to enable XML conformance validation on DMFs (data mapping files))
+   if test "${XMLLINT}" != "no"; then
+      if test -n "${DMF_BUILD_OPTIONS}"; then
+        DMF_BUILD_OPTIONS="${DMF_BUILD_OPTIONS}, "
+      fi
+      DMF_BUILD_OPTIONS="${DMF_BUILD_OPTIONS}xml validation"
+      AC_MSG_RESULT(yes)
+   else
+      AC_MSG_RESULT(no)
+   fi
+fi
+
+NUT_REPORT_FEATURE([enable DMF (data mapping file) support for snmp-ups], [${nut_with_dmf}], [(${DMF_BUILD_OPTIONS})],
+					[WITH_DMF], [Define to enable DMF (data mapping file) support for snmp-ups])
+
+dmfsnmpdir="${DATADIR}/dmfsnmp"
+dmfnutscandir="${DATADIR}/dmfnutscan"
+
+AC_MSG_CHECKING(whether to install DMF collection of mappings for SNMP-UPS driver)
+AC_ARG_WITH(dmfsnmp-dir,
+	AS_HELP_STRING([--with-dmfsnmp-dir=PATH], [where to install DMF collection of mappings for SNMP-UPS driver (DATADIR/dmfsnmp)]),
+[
+	case "${withval}" in
+	yes)
+		if test -z "${dmfsnmpdir}"; then
+			AC_MSG_RESULT(no)
+			AC_MSG_ERROR(["DMF SNMP mappings directory requested but not found"])
+		fi
+		;;
+	auto)
+		;;
+	no)
+		dmfsnmpdir=""
+		;;
+	*)
+		dmfsnmpdir="${withval}"
+		;;
+	esac
+], [])
+if test -n "${dmfsnmpdir}"; then
+	AC_MSG_RESULT(using ${dmfsnmpdir})
+else
+	AC_MSG_RESULT(no)
+fi
+AC_DEFINE_UNQUOTED(DEFAULT_DMFSNMP_DIR, "${dmfsnmpdir}", [Default path for DMF collection of mappings for SNMP-UPS driver])
+AM_CONDITIONAL(WITH_DMF, test -n "${dmfsnmpdir}")
+
+AC_MSG_CHECKING(whether to install DMF collection of mappings for nut-scanner SNMP mode)
+AC_ARG_WITH(dmfnutscan-dir,
+	AS_HELP_STRING([--with-dmfnutscan-dir=PATH], [where to install DMF collection of mappings for nut-scanner SNMP mode (DATADIR/dmfnutscan)]),
+[
+	case "${withval}" in
+	yes)
+		if test -z "${dmfnutscandir}"; then
+			AC_MSG_RESULT(no)
+			AC_MSG_ERROR(["DMF SNMP mappings directory for nut-scanner requested but not found"])
+		fi
+		;;
+	auto)
+		;;
+	no)
+		dmfnutscandir=""
+		;;
+	*)
+		dmfnutscandir="${withval}"
+		;;
+	esac
+], [])
+if test -n "${dmfnutscandir}"; then
+	AC_MSG_RESULT(using ${dmfnutscandir})
+else
+	AC_MSG_RESULT(no)
+fi
+AC_DEFINE_UNQUOTED(DEFAULT_DMFNUTSCAN_DIR, "${dmfnutscandir}", [Default path for DMF collection of mappings for SNMP mode of nut-scanner])
+AM_CONDITIONAL(WITH_DMF, test -n "${dmfnutscandir}")
+
+dnl ----------------------------------------------------------------------
+
 dnl Current date
 now=`TZ=UTC date +%Y-%m-%d`
 
@@ -1262,6 +1492,9 @@ AC_SUBST(htmldir)
 AC_SUBST(pkgconfigdir)
 AC_SUBST(systemdsystemunitdir)
 AC_SUBST(systemdsystemshutdowndir)
+AC_SUBST(dmfsnmpdir)
+AC_SUBST(dmfnutscandir)
+AC_SUBST(auglensdir)
 AC_SUBST(hotplugdir)
 AC_SUBST(udevdir)
 
@@ -1308,6 +1541,7 @@ AC_OUTPUT([
  scripts/systemd/nut-monitor.service
  scripts/systemd/nut-server.service
  scripts/systemd/nutshutdown
+ scripts/DMF/Makefile
  scripts/Solaris/Makefile
  scripts/Solaris/pkginfo
  scripts/Solaris/postinstall
Index: nut-2.7.4/docs/Makefile.am
===================================================================
--- nut-2.7.4.orig/docs/Makefile.am
+++ nut-2.7.4/docs/Makefile.am
@@ -21,7 +21,7 @@ USER_MANUAL_DEPS = acknowledgements.txt
 DEVELOPER_GUIDE_DEPS = contact-closure.txt design.txt developers.txt	\
  developer-guide.txt hid-subdrivers.txt macros.txt new-clients.txt	\
  new-drivers.txt net-protocol.txt nutdrv_qx-subdrivers.txt	\
- snmp-subdrivers.txt sock-protocol.txt
+ snmp-subdrivers.txt sock-protocol.txt nut-dmf.txt
 
 CABLES_DEPS = cables/apc-rs500-serial.txt	\
  cables/apc.txt cables/ge-imv-victron.txt cables/imv.txt		\
@@ -100,6 +100,13 @@ A2X_COMMON_OPTS = $(ASCIIDOC_VERBOSE) --
     --attribute=external_title \
     --attribute tree_version=@TREE_VERSION@ \
     -a toc -a numbered --destination-dir=.
+# NOTE: a2x newer than 8.6.8 says "--destination-dir" is only valid for HTML.
+# As of version 8.6.9 it lies, and the argument is required for our distcheck.
+# For more details see issues https://github.com/asciidoc/asciidoc/issues/44
+# and https://github.com/networkupstools/nut/pull/281 (in short, attempts
+# to "fix" this warning broke NUT build). If this is to be retried later, see
+# https://github.com/networkupstools/nut/pull/281/commits/fe17861c4ea12679b3ebfefa8a6d692d79d99f2d
+# and do not forget to fix up docs/man/Makefile.am too ;)
 
 .txt.html: common.xsl xhtml.xsl
 	$(A2X) $(A2X_COMMON_OPTS) --attribute=xhtml11_format --format=xhtml --xsl-file=$(srcdir)/xhtml.xsl $<
Index: nut-2.7.4/docs/configure.txt
===================================================================
--- nut-2.7.4.orig/docs/configure.txt
+++ nut-2.7.4/docs/configure.txt
@@ -23,6 +23,13 @@ Note that you need to install the libusb
 Build and install the SNMP drivers (default: auto-detect)
 Note that you need to install libsnmp development package or files.
 
+	--with-net-snmp-config
+
+In addition to the `--with-snmp` option above, this one allows to provide
+a custom program name (in `PATH`) or complete pathname to `net-snmp-config`.
+This may be needed on build systems which support multiple architectures,
+or in cases where your distribution names this program differently.
+
 	--with-neon
 
 Build and install the XML drivers (default: auto-detect)
@@ -39,16 +46,21 @@ Note that you need to install powerman d
 	--with-freeipmi
 
 Build and install IPMI PSU driver (default: auto-detect)
-This allows to monitor numerous Power Supply Units (PSU) found
-on servers.
-Note that you need to install freeipmi (0.8.5 or higher) development package or
-files.
+This allows to monitor numerous Power Supply Units (PSU) found on servers.
+Note that you need to install freeipmi (0.8.5 or higher, for nut-scanner ; and
+1.0.1 or higher, for nut-ipmipsu) development package or files.
 
 	--with-linux_i2c
 
 Build and install i2c drivers (default: auto-detect)
 Note that you need to install libi2c development package or files.
 
+	--with-dmf
+
+Build and install DMF (data mapping file) support for snmp-ups (default: auto-detect)
+Note that you need to install libneon (mandatory) and xmllint / lua development
+package or files.
+
 	--with-drivers=<driver>,<driver>,...
 
 Specify exactly which driver or drivers to build and install (this
@@ -83,13 +95,40 @@ information on how to set up CGI program
 	--with-doc=<output-format(s)>  (default: no)
 
 Build and install NUT documentation file(s).
+
 The possible values are "html-single" for single page HTML, "html-chunked"
-for multi pages HTML, "pdf" for a PDF file or "auto" to build all the
-possible previous documentation formats.
+for multi pages HTML, "pdf" for a PDF file, and "man" for the usual manpages.
+
+If the "--with-doc" argument is passed without a list, or lists just "=yes"
+or "=all", it enables all supported formats with a "=yes".
+
+An (explicit!) "--with-doc=auto" argument tries to enable all supported
+formats with an "=auto".
+
+A "--with-doc=no" quietly skips generation of all types of documentation,
+including manpages.
+
+Multiple documentation format values can be specified, separated with comma.
+Each such value can be suffixed with "=yes" to require building of the this
+documentation format (abort configuration if tools are missing), "=auto" to
+detect and enable if we can build it on this system (and not abort if we
+can not), and "=no" (or "=skip") to explicitly skip generation of this
+document format even if we do have the tools to build it.
+
+If a document format is mentioned in the list without a suffix, then it is
+treated as a "=yes" requirement.
+
 Verbose output can be enabled using: ASCIIDOC_VERBOSE=-v make
 
 This feature requires AsciiDoc 8.6.3 (http://www.methods.co.nz/asciidoc).
 
+Example valid formats of this flag:
+* `--with-doc`
+* `--with-doc=` is a valid empty list, effectively same as `--with-doc=no`
+* `--with-doc=auto`
+* `--with-doc=pdf,html-chunked`
+* `--with-doc=man=no,pdf=auto,html-single`
+
 	--with-dev (default: no)
 
 Build and install the upsclient and nutclient library and header files. 
@@ -293,6 +332,23 @@ override this option.
 
 Use --without-udev-dir to disable this feature altogether. 
 
+	--with-systemdsystemunitdir=PATH
+
+Where to install Linux systemd unit definitions. Useless and harmless
+on other OSes, including Linux distributions without systemd, just adding
+a little noise to configure script output.
+
+Use --with-systemdsystemunitdir to detect the settings using pkg-config.
+
+Use --with-systemdsystemunitdir=no to disable this feature altogether.
+
+	--with-augeas-lenses-dir=PATH
+
+Where to install Augeas configuration-management lenses. Only useful and valid
+if you use Augeas to parse and modify configuration files. The default is
+/usr/share/augeas/lenses, if that directory exists, and not to install it
+otherwise.
+
 
 Directories used by NUT at run-time
 -----------------------------------
@@ -335,6 +391,13 @@ NOTE: the --with-gd switches are not nec
 or higher installed properly.  The gdlib-config script will be 
 detected and used by default in that situation.
 
+	--with-gdlib-config
+
+This option allows to provide a custom program name (in `PATH`) or
+a complete pathname to `gdlib-config`. This may be needed on build
+systems which support multiple architectures, or in cases where your
+distribution names this program differently.
+
 	--with-ssl-includes, --with-usb-includes, --with-snmp-includes,
 	--with-neon-includes, --with-libltdl-includes,
 	--with-powerman-includes="-I/foo/bar"
Index: nut-2.7.4/docs/daisychain.txt
===================================================================
--- nut-2.7.4.orig/docs/daisychain.txt
+++ nut-2.7.4/docs/daisychain.txt
@@ -7,7 +7,7 @@ endif::external_title[]
 NUT supports daisychained devices for any kind of device that proposes
 it. This chapter introduces:
 
-* for developers: how to implement such mechanism,
+* for developers: how to implement such mechanism
 * for users: how to manage and use daisychained devices in NUT in general, and
 how to take advantage of the provided features.
 
@@ -135,6 +135,8 @@ steps have to be done:
 if the daisychain support has to be enabled (if more than 1 device).
 To achieve this, use one of the following type of declarations:
 +
+There are two possibilities:
++
 a) point at an OID which provides the number of devices:
 
 	{ "device.count", 0, 1, ".1.3.6.1.4.1.13742.6.3.1.0", "1", SU_FLAG_STATIC, NULL },
Index: nut-2.7.4/docs/download.txt
===================================================================
--- nut-2.7.4.orig/docs/download.txt
+++ nut-2.7.4/docs/download.txt
@@ -109,7 +109,7 @@ link:http://packages.gentoo.org/package/
 Mandriva,
 link:https://apps.fedoraproject.org/packages/nut[Red Hat / Fedora],
 link:http://software.opensuse.org/package/nut[Novell Suse / openSUSE],
-link:https://forum.openwrt.org/viewtopic.php?id=26269[OpenWrt],
+link:https://github.com/openwrt/packages/tree/master/net/nut[OpenWrt],
 link:http://packages.ubuntu.com/nut[Ubuntu],
 link:https://github.com/voidlinux/xbps-packages/blob/master/srcpkgs/network-ups-tools/template[Void Linux].
 
Index: nut-2.7.4/docs/man/Makefile.am
===================================================================
--- nut-2.7.4.orig/docs/man/Makefile.am
+++ nut-2.7.4/docs/man/Makefile.am
@@ -21,6 +21,7 @@ SRC_CONF_PAGES = \
 	upsmon.conf.txt \
 	upssched.conf.txt
 
+if WITH_MANS
 MAN_CONF_PAGES = \
 	nut.conf.5 \
 	ups.conf.5 \
@@ -28,6 +29,7 @@ MAN_CONF_PAGES = \
 	upsd.users.5 \
 	upsmon.conf.5 \
 	upssched.conf.5
+endif
 
 man5_MANS = $(MAN_CONF_PAGES)
 
@@ -50,6 +52,7 @@ SRC_CLIENT_PAGES = \
 	upsrw.txt \
 	upssched.txt
 
+if WITH_MANS
 MAN_CLIENT_PAGES = \
 	nutupsdrv.8 \
 	upsc.8 \
@@ -60,6 +63,7 @@ MAN_CLIENT_PAGES = \
 	upsmon.8 \
 	upsrw.8 \
 	upssched.8
+endif
 
 man8_MANS = $(MAN_CLIENT_PAGES)
 
@@ -76,7 +80,9 @@ HTML_CLIENT_MANS = \
 
 SRC_TOOL_PAGES = nut-scanner.txt nut-recorder.txt
 
+if WITH_MANS
 MAN_TOOL_PAGES = nut-scanner.8 nut-recorder.8
+endif
 
 man8_MANS += $(MAN_TOOL_PAGES)
 
@@ -91,6 +97,7 @@ SRC_CGI_PAGES = \
 	upsstats.cgi.txt \
 	upsimage.cgi.txt
 
+if WITH_MANS
 MAN5_CGI_PAGES = \
 	hosts.conf.5 \
 	upsset.conf.5 \
@@ -100,6 +107,7 @@ MAN8_CGI_PAGES = \
 	upsset.cgi.8 \
 	upsstats.cgi.8 \
 	upsimage.cgi.8
+endif
 
 if WITH_CGI
  man5_MANS += $(MAN5_CGI_PAGES)
@@ -162,6 +170,7 @@ SRC_DEV_PAGES = \
 	libupsclient-config.txt \
 	skel.txt
 
+if WITH_MANS
 # NOTE: nutclient_*.3 has no source counterpart (libnutclient_*.txt)
 MAN3_DEV_PAGES = \
 	upsclient.3 \
@@ -235,6 +244,7 @@ MAN3_DEV_PAGES = \
 
 MAN1_DEV_PAGES = \
 	libupsclient-config.1
+endif
 
 if WITH_DEV
  man3_MANS = $(MAN3_DEV_PAGES)
@@ -343,6 +353,7 @@ SRC_SERIAL_PAGES = \
 	victronups.txt	\
 	apcupsd-ups.txt
 
+if WITH_MANS
 MAN_SERIAL_PAGES = \
 	al175.8	\
 	apcsmart.8	\
@@ -384,6 +395,7 @@ MAN_SERIAL_PAGES = \
 	upscode2.8	\
 	victronups.8	\
 	apcupsd-ups.8
+endif
 
 if WITH_SERIAL
   man8_MANS +=  $(MAN_SERIAL_PAGES)
@@ -433,7 +445,9 @@ HTML_SERIAL_MANS = \
 
 # (--with-snmp)
 SRC_SNMP_PAGES = snmp-ups.txt
+if WITH_MANS
 MAN_SNMP_PAGES = snmp-ups.8
+endif
 
 if WITH_SNMP
   man8_MANS += $(MAN_SNMP_PAGES)
@@ -453,6 +467,7 @@ SRC_USB_LIBUSB_PAGES = \
 	tripplite_usb.txt \
 	usbhid-ups.txt
 
+if WITH_MANS
 MAN_USB_LIBUSB_PAGES = \
 	bcmxcp_usb.8 \
 	blazer_usb.8 \
@@ -462,6 +477,7 @@ MAN_USB_LIBUSB_PAGES = \
 	riello_usb.8	\
 	tripplite_usb.8 \
 	usbhid-ups.8
+endif
 
 if WITH_USB
  man8_MANS += $(MAN_USB_LIBUSB_PAGES)
@@ -479,7 +495,9 @@ HTML_USB_LIBUSB_MANS = \
 
 # (--with-neon)
 SRC_NETXML_PAGES = netxml-ups.txt
+if WITH_MANS
 MAN_NETXML_PAGES = netxml-ups.8
+endif
 
 if WITH_NEON
    man8_MANS += $(MAN_NETXML_PAGES)
@@ -489,7 +507,9 @@ HTML_NETXML_MANS = netxml-ups.html
 
 # (--with-powerman)
 SRC_POWERMAN_PAGES = powerman-pdu.txt
+if WITH_MANS
 MAN_POWERMAN_PAGES = powerman-pdu.8
+endif
 
 if WITH_LIBPOWERMAN
    man8_MANS += $(MAN_POWERMAN_PAGES)
@@ -499,7 +519,9 @@ HTML_POWERMAN_MANS = powerman-pdu.html
 
 # (--with-ipmi)
 SRC_IPMIPSU_PAGES = nut-ipmipsu.txt
+if WITH_MANS
 MAN_IPMIPSU_PAGES = nut-ipmipsu.8
+endif
 
 if WITH_IPMI
    man8_MANS += $(MAN_IPMIPSU_PAGES)
@@ -508,7 +530,9 @@ endif
 HTML_IPMIPSU_MANS = nut-ipmipsu.html
 
 SRC_MACOSX_PAGES = macosx-ups.txt
+if WITH_MANS
 MAN_MACOSX_PAGES = macosx-ups.8
+endif
 
 if WITH_MACOSX
    man8_MANS += $(MAN_MACOSX_PAGES)
@@ -517,7 +541,9 @@ endif
 HTML_MACOSX_MANS = macosx-ups.html
 
 SRC_LINUX_I2C_PAGES = asem.txt
+if WITH_MANS
 MAN_LINUX_I2C_PAGES = asem.8
+endif
 
 if WITH_LINUX_I2C
    man8_MANS += $(LINUX_I2C_PAGES)
@@ -528,7 +554,9 @@ HTML_LINUX_I2C_MANS = asem.html
 # SOME_DRIVERS
 endif
 
-MAN_MANS = \
+MAN_MANS =
+if WITH_MANS
+MAN_MANS += \
 	$(MAN_CONF_PAGES) \
 	$(MAN_CLIENT_PAGES) \
 	$(MAN_TOOL_PAGES) \
@@ -544,6 +572,7 @@ MAN_MANS = \
 	$(MAN_IPMIPSU_PAGES) \
 	$(MAN_MACOSX_PAGES) \
 	$(MAN_LINUX_I2C_PAGES)
+endif
 
 # distribute everything, even those not installed by default
 # Note that 'dist' target requires AsciiDoc!
@@ -564,6 +593,13 @@ EXTRA_DIST = \
 	$(MAN_MANS) \
 	asciidoc.conf
 
+if ! WITH_MANS
+# Cause "make dist" to fail
+EXTRA_DIST += dist
+dist:
+	@echo "ERROR: Manpage building was disabled by configure script, and these pages are required for our proper 'make dist'" >&2 ; false
+endif
+
 HTML_MANS = \
 	$(HTML_CONF_MANS) \
 	$(HTML_CLIENT_MANS) \
@@ -597,6 +633,7 @@ if HAVE_ASCIIDOC
 		-o $@ $<
 
 ### Prior to Asciidoc ~8.6.8, the --destination-dir flag didn't seem to affect the location of the intermediate .xml file.
+### This parameter is currently required; see docs/Makefile.am for more detail.
 A2X_MANPAGE_OPTS = --doctype manpage --format manpage \
 	--xsltproc-opts "--nonet" \
 	--attribute mansource="Network UPS Tools" \
Index: nut-2.7.4/docs/man/nut-scanner.txt
===================================================================
--- nut-2.7.4.orig/docs/man/nut-scanner.txt
+++ nut-2.7.4/docs/man/nut-scanner.txt
@@ -140,7 +140,7 @@ Specify the password to use when authent
 Specify the IPMI 1.5 authentication type to use (NONE, STRAIGHT_PASSWORD_KEY, MD2, and MD5) with the remote host (default=MD5).
 This forces connection through the 'lan' IPMI interface , thus in IPMI 1.5 mode.
 
-*-D* | *--cipher_suite_id* 'cipher suite identifier'::
+*-L* | *--cipher_suite_id* 'cipher suite identifier'::
 Specify the IPMI 2.0 cipher suite ID to use. The Cipher Suite ID identifies a set of authentication, integrity, and
 confidentiality algorithms to use for IPMI 2.0  communication. The authentication algorithm identifies the algorithm
 to use for session setup, the integrity algorithm identifies the algorithm to use for session packet signatures, and the
@@ -173,6 +173,15 @@ Display available bus that can be scanne
 *-q* | *--quiet*::
 Display only scan result. No information on currently scanned bus is displayed.
 
+*-D* | *--nut_debug_level*::
+Raise the debugging level.  Use this multiple times to see more details.
++
+The level of debugging needed depends both on nut-scanner and the
+problem you're trying to diagnose.  Therefore, first explain the problem you
+have with nut-scanner to a developer/maintainer, before sending them debugging
+output.  More often than not, if you just pick a level, the output may be
+either too limited or too verbose to be of any use.
+
 EXAMPLES
 --------
 
Index: nut-2.7.4/docs/man/nutupsdrv.txt
===================================================================
--- nut-2.7.4.orig/docs/man/nutupsdrv.txt
+++ nut-2.7.4/docs/man/nutupsdrv.txt
@@ -72,7 +72,7 @@ Raise log level threshold.  Use this mul
 The debugging comment above also applies here.
  
 *-i* 'interval'::
-Set the poll interval for the device.
+Set the poll interval for the device.  The default value is 2 (in seconds).
 
 *-V*::
 Print only version information, then exit.
Index: nut-2.7.4/docs/man/snmp-ups-dmf.txt
===================================================================
--- /dev/null
+++ nut-2.7.4/docs/man/snmp-ups-dmf.txt
@@ -0,0 +1,190 @@
+snmp-ups-dmf(8)
+===========
+
+NAME
+----
+
+snmp-ups-dmf - Multi-MIB Driver for SNMP UPS equipment
+
+NOTE
+----
+This man page only documents the hardware-specific features of the
+snmp-ups-dmf driver.  For information about the core driver, see
+linkman:nutupsdrv[8].
+
+SUPPORTED HARDWARE
+------------------
+
+The snmp-ups-dmf driver automatically detects and supports a wide range of devices by loading various MIBS:
+
+*ietf*::
+UPS that is RFC 1628 (UPS MIB) compliant, e.g. MGE UPS SYSTEMS, Liebert, perhaps others (default)
+
+*mge*::
+MGE UPS SYSTEMS and MGE Office Protection Systems devices with SNMP cards (ref 66062, 66045, 66074 and 66244)
+
+*apcc*::
+APC AP9605, AP9606, AP9617, and AP9618 APC network management cards, as well as any others supporting the APC POWERNET MIB
+
+*netvision*::
+Socomec Sicon UPS with Netvision Web/SNMP management card/external box
+
+*pw*::
+Powerware devices with ConnectUPS SNMP cards
+
+*pxgx_ups*::
+Eaton devices with Power Xpert Gateway UPS Card
+
+*aphel_genesisII*::
+Eaton Powerware ePDU Monitored
+
+*aphel_revelation*::
+Eaton Powerware ePDU Managed
+
+*raritan*::
+Various Raritan PDUs (Dominion PX, PM, RPC)
+
+*raritan-px2*::
+Various Raritan PDUs (Dominion PX2)
+
+*baytech*::
+Various BayTech PDUs
+
+*cpqpower*::
+HP/Compaq AF401A management card, perhaps others
+
+*cyberpower*::
+Cyberpower RMCARD201. Should also support RMCARD100 (net version), RMCARD202 and RMCARD301
+
+*huawei*::
+Huawei UPS5000-E, perhaps others
+
+EXTRA ARGUMENTS
+---------------
+
+This driver supports the following optional settings in the
+linkman:ups.conf[5]:
+
+*mibs*='name'::
+Set MIB compliance (default=auto, allowed entries: refer to SUPPORTED HARDWARE above).
+With "auto", the driver will try a select set of SNMP objects until it finds
+one that the device responds to.  Note that since NUT 2.6.2, snmp-ups-dmf has a new
+method that uses sysObjectID (which is a pointer to the prefered MIB of the
+device) to detect supported devices.  This renders void the use of "mibs" option.
+   
+*community*='name'::
+Set community name (default = public).
+Note that a RW community name is required to change UPS settings (as for a powerdown).
+
+*snmp_version*='version'::
+Set SNMP version (default = v1, allowed: v2c, v3)
+
+*snmp_retries*='retries'::
+Specifies the number of Net-SNMP retries to be used in the requests (default=5)
+
+*snmp_timeout*='timeout'::
+Specifies the Net-SNMP timeout in seconds between retries (default=1)
+
+*pollfreq*='value'::
+Set polling frequency in seconds, to reduce network flow (default=30)
+
+*notransferoids*::
+Disable the monitoring of the low and high voltage transfer OIDs in
+the hardware.  This will remove input.transfer.low and input.transfer.high
+from the list of variables.  This should only be used on APCC Symmetra
+equipment which has strangeness in the three-phase power reporting.
+
+*secLevel*='value'::
+Set the securityLevel used for SNMPv3 messages (default=noAuthNoPriv,
+allowed: authNoPriv,authPriv)
+
+*secName*='value'::
+Set the securityName used for authenticated SNMPv3 messages (no default)
+
+*authPassword*='value'::
+Set the authentication pass phrase used for authenticated SNMPv3 messages
+(no default)
+
+*privPassword*='value'::
+Set the privacy pass phrase used for encrypted SNMPv3 messages (no default)
+
+*authProtocol*='value'::
+Set the authentication protocol (MD5 or SHA) used for authenticated SNMPv3
+messages (default=MD5)
+
+*privProtocol*='value'::
+Set the privacy protocol (DES or AES) used for encrypted SNMPv3 messages
+(default=DES)
+
+*dmfpath*='path'::
+Specifies DMF file for this driver, in case of be missing NUT will load
+all DMF files in default path.
+
+REQUIREMENTS
+------------
+You will need to install the Net-SNMP package from
+http://www.net-snmp.org/ before building this driver.
+
+SNMP v3 also requires OpenSSL support from http://www.openssl.org.
+
+LIMITATIONS
+-----------
+Shutdown
+~~~~~~~~
+
+The shutdown sequence should be tested before relying on NUT to send a
+shutdown command to the UPS. The problem is that the host network stack may
+have been torn down by the time the driver is invoked to send the shutdown
+command. The driver attempts to send +shutdown.return+, +shutdown.reboot+,
+and +load.off.delay+ commands to the UPS in sequence, stopping after the first
+supported command.
+
+INSTALLATION
+------------
+This driver is only built if the Net-SNMP development files are present at
+configuration time.  You can also force it to be built by using
++configure --with-snmp=yes+ before calling make.
+
+EXAMPLES
+--------
+The hostname of the UPS is specified with the "port" value in
+`ups.conf`:
+
+	[snmpv1]
+		driver = snmp-ups-dmf
+		port = snmp-ups.example.com
+		community = public
+		snmp_version = v1
+		pollfreq = 15
+		desc = "Example SNMP v1 device"
+                dmfpath = /tmp/example-mib.dmf
+
+	[snmpv3]
+		driver = snmp-ups-dmf
+		port = 166.99.224.132
+		snmp_version = v3
+		secLevel = authPriv
+		secName = mysecurityname
+		authPassword = myauthenticationpassphrase
+		privPassword = myprivatepassphrase
+		desc = "Example SNMP v3 device, with the highest security level"
+
+AUTHORS
+-------
+Arnaud Quette, Dmitry Frolov
+
+
+SEE ALSO
+--------
+
+The core driver:
+~~~~~~~~~~~~~~~~
+linkman:nutupsdrv[8]
+
+NUT SNMP Protocols Library
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+Available at: http://www.networkupstools.org/ups-protocols.html#_snmp
+
+Internet resources:
+~~~~~~~~~~~~~~~~~~~
+The NUT (Network UPS Tools) home page: http://www.networkupstools.org/
Index: nut-2.7.4/docs/man/snmp-ups.txt
===================================================================
--- nut-2.7.4.orig/docs/man/snmp-ups.txt
+++ nut-2.7.4/docs/man/snmp-ups.txt
@@ -178,7 +178,7 @@ linkman:nutupsdrv[8]
 
 NUT SNMP Protocols Library
 ~~~~~~~~~~~~~~~~~~~~~~~~~~
-Available at: http://www.networkupstools.org/protocols/snmp/
+Available at: http://www.networkupstools.org/ups-protocols.html#_snmp
 
 Internet resources:
 ~~~~~~~~~~~~~~~~~~~
Index: nut-2.7.4/docs/new-drivers.txt
===================================================================
--- nut-2.7.4.orig/docs/new-drivers.txt
+++ nut-2.7.4/docs/new-drivers.txt
@@ -263,6 +263,10 @@ Also refer to the <<daisychain,NUT daisy
 of the user manual and developer guide for information related to alarms
 handling in daisychain mode.
 
+Also refer to the <<daisychain,NUT daisychain support notes>> chapter
+of the user manual and developer guide for information related to alarms
+handling in daisychain mode.
+
 Staleness control
 -----------------
 
Index: nut-2.7.4/docs/nut-dmf.txt
===================================================================
--- /dev/null
+++ nut-2.7.4/docs/nut-dmf.txt
@@ -0,0 +1,283 @@
+= DMF - Device Mapping File
+
+== Abstract
+
+The aim is to develop a solution allowing to modify or even add new NUT
+SNMP (only, right now) MIBs mappings without having to recompile the binary
+driver (`snmp-ups`) or the whole NUT source. Support for DMF requires linking
+with the `libneon` XML parser, already used in `netxml-ups` NUT driver.
+
+The present solution is a first iteration to read this information from an
+external file (XML formatted). The `*-mib.c` files present in the vanilla
+NUT sources at this time have been processed to produce `*.dmf` data files
+ready for dynamic loading at end-user installations. Conversion tools are
+also distributed in this iteration, see their chapter below. They do bring
+some Python dependency requirements, but are not strict requirements for
+NUT (as common-case nor `distcheck` builds) -- the tools are only intended
+for manual usage by a few developers.
+
+The source files and recipes related to DMF support are dispersed across the
+NUT codebase, while helpful resources (including the generation of DMF files)
+are distributed in `$NUTSRC/scripts/DMF/` subdirectory.
+
+As something between conversion tools and a sample program, the `dmf-reindex`
+code is provided to read the library of complete DMFs (and validate their
+contents along the way), and produce a DMF file that only contains truncated
+`mib2nut` entries as needed for the `nut-scanner`. This `dmf-reindex` program
+is expected to become an end-user tool, to help during updates of the DMF set.
+NOTE: In the current iteration the `dmf-reindex` program is not configurable,
+so it just scans all `*.dmf*` files in the current directory and prints XML
+DMF markup to `stdout` so you can redirect it to another file. To avoid later
+duplicate entries, consider naming that file with a different extension (may
+be uppercased `*.DMF` for example) or save it into a different directory.
+
+NOTE: If you provide your own DMF files that are not generated from existing
+`*-mib.c` sources, use some filename pattern that does not end in `-mib.dmf`!
+
+Overview of DMF usage from C code is maintained in the `dmf.h` file, driver
+and application developers should look there for the "The big theory" details.
+It is expected that DMF will outgrow the initial SNMP use-case, so there is
+a separation of `dmf.h` and `dmfsnmp.h` already in place.
+
+A second iteration is experimentally provided, but may be incomplete and is
+subject to change after some team discussions, which is to support not only
+static mappings of the first iteration (so as to be functionally and logically
+equivalent to the pre-DMF code), but also add support for dynamic mappings
+using an interpreted language. LUA is the first implementation in the works,
+so it would be the default option (given experimental status, it is not
+compilable by default unless you define `-DWITH_DMF_LUA=1` to the compiler
+command-line or `CFLAGS`; also the implementation is currently compatible
+with LUA-5.1 or *older* -- so the include-file path and library name should
+match your OS distribution's naming for this version).
+
+== DMF XML spec
+
+The DMF files are implemented as XML with a particular schema.
+
+Verifiable schemas are provided as XSD files and can be run against existing
+or generated DMF files with `make dmf-validate` in the `scripts/DMF` directory
+(uses `xmllint` which is also needed to build NUT manpages with `asciidoc`).
+
+The command-line method of verification that a DMF SNMP file or an index file
+built for the `nut-scanner` conforms to expected schema is:
+
+----
+    $ xmllint --noout --schema $SCHEMADIR/dmfsnmp.xsd $TESTEDFILE.dmf
+    $ xmllint --noout --schema $SCHEMADIR/dmfnutscan.xsd $TESTEDINDEX.dmf
+----
+
+There are *4* main structures in the DMF XML:
+
+ * `info_lkp_t`: mapping between NUT and SNMP values for a variable
+
+ * `alarms_info_t`: mapping between NUT and SNMP `ups.alarm` values for a
+   variable
+
+ * `snmp_info_t`: mapping between NUT variables and SNMP OIDs
+
+ * `mib2nut_info_t`: declaration of discovery and mapping (`snmp_info_t`)
+    information
+
+These structures are wrapped by a `nut` tag with `version` and `xmlns`
+attributes so the DMF file can refer to the currently applicable schema.
+
+=== LOOKUP
+
+----
+<nut>
+    <lookup name="ats_output_status_info">
+        <item oid = "1" info = "OFF" />
+    </lookup>
+</nut>
+----
+
+== LUA FUNCTIONS
+
+Is possible to emulate non provide data by LUA, for example, the UPS provides
+current in Amperes and voltage, but not power in Watts, is possible to have
+a function for calculate this value and serve.
+A simple example:
+
+        <functions name="eaton_functions">
+          <function name="device.amperes">
+            function deviceamperes(device)
+                power = tonumber(lua_C_gateway("input.power", device))
+                voltage = tonumber(lua_C_gateway("input.voltage", device))
+                if voltage ~= 0 and power ~= 0 then
+                    return power / voltage
+                else
+                    return nil
+                end
+            end
+          </function>
+          <function name="device.luaOutlet">
+            function deviceluaOutlet(device)
+                outlet = tonumber(lua_C_gateway("outlet.count", device))
+                if outlet ~= 0 then
+                  for i=0,outlet,1
+                    do
+                      publish_Lua_dstate("device."..device..".outlet."..i..".wastePower", wastePower(device, i))
+                    end
+                end
+                
+                return nil
+            end
+            
+            
+            function wastePower(device, outlet)
+                power = tonumber(lua_C_gateway("outlet."..outlet..".power", device))
+                realpower = tonumber(lua_C_gateway("outlet."..outlet..".realpower", device))
+                
+                return power - realpower
+            end
+          </function>
+        </functions>
+        <snmp name="eaton_marlin_mib">
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.amperes" string="yes" function="eaton_functions"/>
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.luaOutlet" string="yes" function="eaton_functions"/>
+   
+Functions block is the function collection for a driver (mib2nut)
+
+Function block is the function collection for one value (snmp_info)
+  -Attribute name should be the same as the "snmp" name.
+  -Have mandatory at least one function named with the same name of the "snmp", main function,
+      but without point (device.lua -> function devicelua(device))
+  -Could have more functions, but main fuction will be allways the mandatory one, unique,
+      and is the entry point.
+  -"device" parameter is mandatory for internal requerements.
+  -Main function can returns data, if returns, a new variable is going a be created by
+      the driver, named as (device.X.function_name) with the returned value, if not,
+      nothing is publish by the driver.
+  
+There is implemented two Lua - C functions bindings
+
+  lua_C_gateway(variable, device) - As a parameter recives the name of the requested variable
+    and number of device (string, integer), returns the value for this variable as string.
+    
+  publish_Lua_dstate(variable, value) - As a parameter recives the name of a variable and value
+    for this variable (string, string), this function create new variables and publish directly data
+    bypassing the driver, useful for publish multiple variables or publish in difren variable name,
+    no returns.
+                
+== Tools
+
+For the sake of future temporary co-existence of legacy and DMF-enhanced
+implementations of `snmp-ups` as a fall-back solution or for peace of mind
+for conservative users, and even more as an aid to the deviated downstream
+NUT forks that might have modified MIB files (perhaps in-house NUT builds
+of some end-users), the tools we made to convert existing C-structure MIB
+implementations to such external DMF files are also distributed here.
+
+Before using the scripts, make sure you have run `./autogen.sh && ./configure`
+in the root of NUT sources tree and generally can build NUT (the `pycparser`
+tries to compile instrumented sources, and requires the toolchain as well as
+the `config.h` file generated by `configure` script).
+
+They are a mix of Python and shell scripts:
+
+ * `jsonify-mib.py`: process MIB mapping from C source and print it to stdout
+    as JSON
+
+ * `nut_cpp`: calls the C preprosessor and filters away GCC modifiers that are
+    not handled well by `pycparser` code
+
+ * `xmlify-mib.py`: process JSON output produced by `jsonify-mib.py` and output
+    the final DMF XML format
+
+ * `dmfify-mib.sh`: execute this from the `$NUT_SOURCE/scripts/DMF/` directory
+    and it will find and process existing `../../drivers/*-mib.c` files to feed
+    them into the pipeline of the two scripts above and produce `*.dmf` files.
+    It calls `jsonify-mib.py --test` so the parsed structures are recreated
+    into a C file, compiled and instantly tested to make sure they match.
+
+NOTE: At this time the Python scripts are not intended for direct execution
+(exec bits not set), so you should prepend them with versioned parser name
+(e.g. `python2.7 jsonify-mib.py`). If your system default version is Python-2.x
+then just `python` program name may suffice.
+
+Details on some of the tools are presented below.
+
+=== Python and pycparser prerequisites
+
+You need Python version 2.7 with an `argparse` module, as well as a separate
+project `pycparser` installed on the build host to run the `jsonify-mib.py`
+script:
+
+ * via your package management
+   As an example, you can do so:
+
+  ** on Debian and derivative systems, using:
+
+----
+    # apt-get install python-pycparser
+----
+
+        and / or
+
+----
+    # apt-get install python3-pycparser
+----
+
+  ** on Redhat and derivative systems, using:
+
+----
+    # yum install <... to be completed>
+----
+
+  ** on OpenIndiana and similar systems, using:
+
+----
+    # pkg install -v pycparser
+----
+
+   and / or specifically
+
+----
+    # pkg install pycparser-27
+----
+
+
+ * or using `pip`:
+
+----
+    virtualenv dmf
+    source dmf/bin/activate
+    pip install -e pycparser
+----
+
+=== jsonify-mib.py
+
+Tool parses `*-mib.c` files (picking `snmp_info_t` and `info_lkp_t` structures)
+and prints the output of those as JSON. Note this is NOT intended as final DMF
+form, this JSON markup is an intermediate form for easier processing.
+
+Usage is then like this:
+
+----
+    $ python2.7 jsonify-mib.py ../../drivers/apc-ats-mib.c
+    {
+        "INFO": {
+            "ats_output_status_info": {
+                "1": "OFF",
+                "2": "OL"
+            },
+            "ats_sensitivity_info": {
+                "1": "high",
+                "2": "low"
+            },
+    ...
+----
+
+=== xmlify-mib.py
+
+Assming you have installed Python e.g. using instructions above, you can
+produce final DMF XML markup from the intermediate JSON by simply piping
+it to the standard input of this script:
+
+----
+    $ python2.7 xmlify-mib.py < apc-ats-mib.json > apc-ats-mib.dmf
+----
+
+You can also build a pipeline of these two scripts, which is essentially
+what `dmfify-mib.sh` is for.
+
Index: nut-2.7.4/docs/nut-names.txt
===================================================================
--- nut-2.7.4.orig/docs/nut-names.txt
+++ nut-2.7.4/docs/nut-names.txt
@@ -537,6 +537,7 @@ of the user manual.
 | outlet.n.crestfactor           | Crest Factor (dimensionless,
                                    equal to or greater than 1) | 1.41
 | outlet.n.power                 | Apparent power (VA)         | 46
+| outlet.n.type                  | Physical outlet type        | french
 |===============================================================================
 
 outlet.group: groups of smart outlets
Index: nut-2.7.4/docs/nut-qa.txt
===================================================================
--- nut-2.7.4.orig/docs/nut-qa.txt
+++ nut-2.7.4/docs/nut-qa.txt
@@ -75,8 +75,11 @@ link:http://lists.alioth.debian.org/mail
 mailing list, and fixed quickly.
 ////////////////////////////////////////////////////////////////////////////////
 
-- a project portal with trackers for bugs, feature request, patchs
-and tasks
+- a project portal with trackers for bugs, feature request, patchs and tasks
+
+- Static code analysis:
+  * link:https://scan.coverity.com/projects/networkupstools-nut[Coverity Scan overview of NUT]
+  * status: image:https://scan.coverity.com/projects/8829/badge.svg[Coverity Scan Build Status]
 
 NUT QA also relies on external tools and trackers, like:
 
@@ -84,8 +87,7 @@ NUT QA also relies on external tools and
 FIXME (POST):
 - integrate static code analysis
 	- consider splint, Frama-C, BLAST and Clang, and choose one.
-	- integrate link:http://scan.coverity.com[Coverity Scan] program.
-	Note: request made by Arnaud to scan-admin@coverity.com on Sep 24 2009
+	- only use coverity?!
 - point other distro BTS (use Launchpad as an aggregator?!)
 
 ////////////////////////////////////////////////////////////////////////////////
Index: nut-2.7.4/docs/outlets.txt
===================================================================
--- nut-2.7.4.orig/docs/outlets.txt
+++ nut-2.7.4/docs/outlets.txt
@@ -1,3 +1,4 @@
+[[outlet_management]]
 NUT outlets management and PDU notes
 ====================================
 
Index: nut-2.7.4/docs/snmp.txt
===================================================================
--- nut-2.7.4.orig/docs/snmp.txt
+++ nut-2.7.4/docs/snmp.txt
@@ -47,4 +47,4 @@ manpage (man 8 snmp-ups).
 	
 References:
 - NUT SNMP Protocols Library Available at:
-http://random.networkupstools.org/protocols/snmp/
+http://www.networkupstools.org/ups-protocols.html#_snmp
Index: nut-2.7.4/drivers/Makefile.am
===================================================================
--- nut-2.7.4.orig/drivers/Makefile.am
+++ nut-2.7.4/drivers/Makefile.am
@@ -37,6 +37,13 @@ SERIAL_DRIVERLIST = al175 bcmxcp belkin
  blazer_ser clone clone-outlet ivtscd apcsmart apcsmart-old apcupsd-ups riello_ser	\
  nutdrv_qx
 SNMP_DRIVERLIST = snmp-ups
+if WITH_SNMP
+if WITH_NEON
+if WITH_DMF
+  SNMP_DRIVERLIST += snmp-ups-dmf
+endif
+endif
+endif
 USB_LIBUSB_DRIVERLIST = usbhid-ups bcmxcp_usb tripplite_usb \
  blazer_usb richcomm_usb riello_usb \
  nutdrv_atcl_usb \
@@ -203,10 +210,35 @@ snmp_ups_SOURCES = snmp-ups.c apc-mib.c
  bestpower-mib.c cyberpower-mib.c delta_ups-mib.c xppc-mib.c huawei-mib.c \
  eaton-ats-mib.c apc-ats-mib.c raritan-px2-mib.c apc-pdu-mib.c
 snmp_ups_LDADD = $(LDADD_DRIVERS) $(LIBNETSNMP_LIBS)
+snmp_ups_CFLAGS = $(AM_CFLAGS) -UWITH_DMFMIB -UWITH_DMF_LUA
+
+# DMF SNMP
+snmp_ups_dmf_SOURCES = snmp-ups.c
+snmp_ups_dmf_LDADD = $(LDADD_DRIVERS) $(LIBNETSNMP_LIBS) \
+ $(top_builddir)/common/libnutdmfsnmp.la $(LIBNEON_LIBS) $(LUA_LIB) \
+ $(top_builddir)/common/libcommon.la
+snmp_ups_dmf_CFLAGS = $(AM_CFLAGS) -I$(top_srcdir)/tools/nut-scanner -DWITH_DMFMIB=1
+if HAVE_DMF_LUA
+snmp_ups_dmf_CFLAGS += -DWITH_DMF_LUA=1 $(LUA_INCLUDE)
+endif
+
+if WITH_SSL
+  snmp_ups_CFLAGS += $(LIBSSL_CFLAGS)
+  snmp_ups_LDADD += $(LIBSSL_LIBS)
+
+  snmp_ups_dmf_CFLAGS += $(LIBSSL_CFLAGS)
+  snmp_ups_dmf_LDADD += $(LIBSSL_LIBS)
+endif
 
 # NEON XML/HTTP
 netxml_ups_SOURCES = netxml-ups.c mge-xml.c
 netxml_ups_LDADD = $(LDADD_DRIVERS) $(LIBNEON_LIBS)
+netxml_ups_CFLAGS = $(AM_CFLAGS)
+
+if WITH_SSL
+  netxml_ups_CFLAGS += $(LIBSSL_CFLAGS)
+  netxml_ups_LDADD += $(LIBSSL_LIBS)
+endif
 
 # Powerman
 powerman_pdu_SOURCES = powerman-pdu.c
@@ -252,7 +284,7 @@ nutdrv_qx_SOURCES += $(NUTDRV_QX_SUBDRIV
 # tracking (which is automatic), but to ensure these files are
 # distributed by "make dist".
 
-dist_noinst_HEADERS = apc-mib.h apc-hid.h baytech-mib.h bcmxcp.h	\
+dist_noinst_HEADERS = apc-mib.h apc-iem-mib.h apc-hid.h baytech-mib.h bcmxcp.h	\
  bcmxcp_io.h belkin.h belkin-hid.h bestpower-mib.h blazer.h cps-hid.h dstate.h \
  dummy-ups.h eaton-mib.h explore-hid.h gamatronic.h genericups.h	\
  hidparser.h hidtypes.h ietf-mib.h libhid.h libshut.h libusb.h liebert-hid.h	\
Index: nut-2.7.4/drivers/apc-ats-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/apc-ats-mib.c
+++ nut-2.7.4/drivers/apc-ats-mib.c
@@ -28,26 +28,26 @@
 
 #define APC_ATS_SYSOID       ".1.3.6.1.4.1.318.1.3.11"
 
-static info_lkp_t ats_sensitivity_info[] = {
+static info_lkp_t apc_ats_sensitivity_info[] = {
 	{ 1, "high" },
 	{ 2, "low" },
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_output_status_info[] = {
+static info_lkp_t apc_ats_output_status_info[] = {
 	{ 1, "OFF" }, /* fail */
 	{ 2, "OL" },  /* ok */
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_outletgroups_name_info[] = {
+static info_lkp_t apc_ats_outletgroups_name_info[] = {
 	{ 1, "total" },
 	{ 2, "bank1" },
 	{ 3, "bank2" },
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_outletgroups_status_info[] = {
+static info_lkp_t apc_ats_outletgroups_status_info[] = {
 	{ 1, "OL" },   /* normal */
 	{ 2, "" },     /* lowload */
 	{ 3, "" },     /* nearoverload */
@@ -98,7 +98,7 @@ static snmp_info_t apc_ats_mib[] = {
 	/* atsInputFrequency.2 = INTEGER: 50 */
 	{ "input.2.frequency", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.3.2.1.4.2", NULL, SU_FLAG_OK, NULL, NULL },
 	/* atsConfigVoltageSensitivity.0 = INTEGER: high(1) */
-	{ "input.sensitivity", ST_FLAG_RW, 1, ".1.3.6.1.4.1.318.1.1.8.4.4.0", NULL, SU_FLAG_OK, &ats_sensitivity_info[0], NULL },
+	{ "input.sensitivity", ST_FLAG_RW, 1, ".1.3.6.1.4.1.318.1.1.8.4.4.0", NULL, SU_FLAG_OK, &apc_ats_sensitivity_info[0], NULL },
 	/* FIXME: RFC for input.count! */
 	/* atsNumInputs.0 = INTEGER: 2 */
 	{ "input.count", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.3.1.0", NULL, SU_FLAG_OK, NULL, NULL },
@@ -112,7 +112,7 @@ static snmp_info_t apc_ats_mib[] = {
 	/* UPS collection */
 	/* FIXME: RFC for device.status! */
 	/* atsStatusVoltageOutStatus.0 = INTEGER: ok(2) */
-	{ "ups.status", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.1.15.0", NULL, SU_FLAG_OK, &ats_output_status_info[0], NULL },
+	{ "ups.status", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.1.15.0", NULL, SU_FLAG_OK, &apc_ats_output_status_info[0], NULL },
 
 	/* Outlet groups collection */
 	/* Note: prefer the OutputBank data to the ConfigBank ones */
@@ -125,13 +125,13 @@ static snmp_info_t apc_ats_mib[] = {
 	/* atsOutputBankTableIndex.%i = INTEGER: %i */
 	{ "outlet.group.%i.id", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.1.%i", NULL, SU_FLAG_OK | SU_OUTLET_GROUP, NULL, NULL },
 	/* atsConfigBank.%i = INTEGER: total(1) */
-	/*{ "outlet.group.%i.name", 0, 1, ".1.3.6.1.4.1.318.1.1.8.4.14.1.2.%i", NULL, SU_FLAG_STATIC | SU_OUTLET_GROUP, &ats_group_name_info[0], NULL },*/
+	/*{ "outlet.group.%i.name", 0, 1, ".1.3.6.1.4.1.318.1.1.8.4.14.1.2.%i", NULL, SU_FLAG_STATIC | SU_OUTLET_GROUP, &apc_ats_group_name_info[0], NULL },*/
 	/* atsOutputBank.1 = INTEGER: total(1) */
-	{ "outlet.group.%i.name", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.3.%i", NULL, SU_FLAG_STATIC | SU_OUTLET_GROUP, &ats_outletgroups_name_info[0], NULL },
+	{ "outlet.group.%i.name", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.3.%i", NULL, SU_FLAG_STATIC | SU_OUTLET_GROUP, &apc_ats_outletgroups_name_info[0], NULL },
 	/* atsOutputBankCurrent.%i = Gauge32: 88 */
 	{ "outlet.group.%i.current", 0, 0.1, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.4.%i", NULL, SU_OUTLET_GROUP, NULL, NULL },
 	/* atsOutputBankState.%i = INTEGER: normal(1) */
-	{ "outlet.group.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.5.%i", NULL, SU_OUTLET_GROUP, &ats_outletgroups_status_info[0], NULL },
+	{ "outlet.group.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.5.%i", NULL, SU_OUTLET_GROUP, &apc_ats_outletgroups_status_info[0], NULL },
 	/* atsOutputBankOutputVoltage.%i = INTEGER: 215 */
 	{ "outlet.group.%i.voltage", 0, 1, ".1.3.6.1.4.1.318.1.1.8.5.4.5.1.6.%i", NULL, SU_OUTLET_GROUP, NULL, NULL },
 	/* atsOutputBankPower.1 = INTEGER: 1883 */
Index: nut-2.7.4/drivers/apc-iem-mib.h
===================================================================
--- /dev/null
+++ nut-2.7.4/drivers/apc-iem-mib.h
@@ -0,0 +1,19 @@
+#ifndef APC_IEM_MIB_H
+#define APC_IEM_MIB_H
+
+/*
+ * FIXME: The below is needed because the main driver body uses this to determine
+ * whether a conversion from Fahrenheit to Celsius is needed (which really should
+ * be solved in subdriver specific formatting functions, like we do in usbhid-ups
+ * This is used in both snmp-ups.c and apc.c logics.
+ */
+
+/* IEM ambient variables */
+/* IEM: integrated environment monitor probe */
+
+#define APCC_OID_IEM_TEMP    	".1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1"
+#define APCC_OID_IEM_TEMP_UNIT	".1.3.6.1.4.1.318.1.1.10.2.3.2.1.5.1"
+#define APCC_IEM_FAHRENHEIT  	2
+#define APCC_OID_IEM_HUMID   	".1.3.6.1.4.1.318.1.1.10.2.3.2.1.6.1"
+
+#endif /* APC_IEM_MIB_H */
Index: nut-2.7.4/drivers/apc-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/apc-mib.c
+++ nut-2.7.4/drivers/apc-mib.c
@@ -213,10 +213,10 @@ static snmp_info_t apcc_mib[] = {
 	{ "battery.current.total", 0, 0.1, ".1.3.6.1.4.1.318.1.1.1.2.3.6.0", "", SU_FLAG_OK, NULL },
 	{ "battery.packs", 0, 1, ".1.3.6.1.4.1.318.1.1.1.2.2.5.0", "", SU_FLAG_OK, NULL },
 	{ "battery.packs.bad", 0, 1, ".1.3.6.1.4.1.318.1.1.1.2.2.6.0", "", SU_FLAG_OK, NULL },
-	{ "battery.date", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.2.1.3.0", "", SU_FLAG_OK | SU_FLAG_STATIC | SU_TYPE_STRING, NULL },
-	{ "ups.id", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.1.1.2.0", "", SU_FLAG_OK | SU_FLAG_STATIC | SU_TYPE_STRING, NULL },
+	{ "battery.date", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.2.1.3.0", "", SU_FLAG_OK | SU_FLAG_STATIC, NULL },
+	{ "ups.id", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.1.1.2.0", "", SU_FLAG_OK | SU_FLAG_STATIC, NULL },
 	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, APCC_OID_TESTDIAGRESULTS, "", SU_FLAG_OK, apcc_testdiag_results },
-	{ "ups.test.date", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.7.2.4.0", "", SU_FLAG_OK | SU_FLAG_STATIC | SU_TYPE_STRING, NULL },
+	{ "ups.test.date", ST_FLAG_STRING | ST_FLAG_RW, 8, ".1.3.6.1.4.1.318.1.1.1.7.2.4.0", "", SU_FLAG_OK | SU_FLAG_STATIC, NULL },
 	{ "output.voltage", 0, 0.1, ".1.3.6.1.4.1.318.1.1.1.4.3.1.0", "", SU_FLAG_OK | SU_FLAG_UNIQUE, NULL },
 	{ "output.voltage", 0, 1, ".1.3.6.1.4.1.318.1.1.1.4.2.1.0", "", SU_FLAG_OK, NULL },
 	{ "output.phases", ST_FLAG_STRING, 2, ".1.3.6.1.4.1.318.1.1.1.9.3.2.1.2.1", "", SU_FLAG_STATIC | SU_FLAG_OK, NULL },
@@ -265,13 +265,7 @@ static snmp_info_t apcc_mib[] = {
 	{ "ambient.humidity", 0, 1, ".1.3.6.1.4.1.318.1.1.2.1.2.0", "", SU_FLAG_OK, NULL },
 	{ "ambient.1.humidity.alarm.high", 0, 1, ".1.3.6.1.4.1.318.1.1.10.1.2.2.1.6.1", "", SU_FLAG_OK, NULL },
 	{ "ambient.1.humidity.alarm.low", 0, 1, ".1.3.6.1.4.1.318.1.1.10.1.2.2.1.7.1", "", SU_FLAG_OK, NULL },
-
-	/* IEM ambient variables */
 /* IEM: integrated environment monitor probe */
-#define APCC_OID_IEM_TEMP       ".1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1"
-#define APCC_OID_IEM_TEMP_UNIT  ".1.3.6.1.4.1.318.1.1.10.2.3.2.1.5.1"
-#define APCC_IEM_FAHRENHEIT	    2
-#define APCC_OID_IEM_HUMID      ".1.3.6.1.4.1.318.1.1.10.2.3.2.1.6.1"
 	{ "ambient.temperature", 0, 1, APCC_OID_IEM_TEMP, "", SU_FLAG_OK, NULL },
 	{ "ambient.humidity", 0, 1, APCC_OID_IEM_HUMID, "", SU_FLAG_OK, NULL },
 
Index: nut-2.7.4/drivers/apc-mib.h
===================================================================
--- nut-2.7.4.orig/drivers/apc-mib.h
+++ nut-2.7.4/drivers/apc-mib.h
@@ -3,15 +3,7 @@
 
 #include "main.h"
 #include "snmp-ups.h"
-
-/*
- * FIXME: The below is needed because the main driver body uses this to determine
- * whether a conversion from Fahrenheit to Celsius is needed (which really should
- * be solved in subdriver specific formatting functions, like we do in usbhid-ups
- */
-#define APCC_OID_IEM_TEMP	".1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1"
-#define APCC_OID_IEM_TEMP_UNIT	".1.3.6.1.4.1.318.1.1.10.2.3.2.1.5.1"
-#define APCC_IEM_FAHRENHEIT	2
+#include "apc-iem-mib.h"
 
 extern mib2nut_info_t	apc;
 
Index: nut-2.7.4/drivers/baytech-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/baytech-mib.c
+++ nut-2.7.4/drivers/baytech-mib.c
@@ -29,7 +29,7 @@
 #define BAYTECH_OID_MIB			".1.3.6.1.4.1.4779"
 #define BAYTECH_OID_MODEL_NAME	".1.3.6.1.4.1.4779.1.3.5.2.1.24.1"
 
-static info_lkp_t outlet_status_info[] = {
+static info_lkp_t baytech_outlet_status_info[] = {
 	{ -1, "error" },
 	{ 0, "off" },
 	{ 1, "on" },
@@ -75,7 +75,7 @@ static snmp_info_t baytech_mib[] = {
 	{ "outlet.voltage", 0, 0.1, ".1.3.6.1.4.1.4779.1.3.5.5.1.8.2.1", NULL, 0, NULL, NULL },
 
 	/* outlet template definition */
-	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.4779.1.3.5.3.1.3.1.%i", NULL, SU_OUTLET, &outlet_status_info[0], NULL },
+	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.4779.1.3.5.3.1.3.1.%i", NULL, SU_OUTLET, &baytech_outlet_status_info[0], NULL },
 	{ "outlet.%i.desc", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.4779.1.3.5.3.1.4.1.%i", NULL, SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.id", 0, 1, ".1.3.6.1.4.1.4779.1.3.5.6.1.3.2.1.%i", "%i", SU_FLAG_STATIC | SU_FLAG_ABSENT | SU_OUTLET | SU_FLAG_OK, NULL, NULL },
 	{ "outlet.%i.switchable", 0, 1, ".1.3.6.1.4.1.4779.1.3.5.3.1.1.1.%i", "yes", SU_FLAG_STATIC | SU_OUTLET, NULL, NULL },
Index: nut-2.7.4/drivers/eaton-ats-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/eaton-ats-mib.c
+++ nut-2.7.4/drivers/eaton-ats-mib.c
@@ -29,7 +29,7 @@
 #define EATON_ATS_SYSOID       ".1.3.6.1.4.1.534.10"
 #define EATON_ATS_MODEL        ".1.3.6.1.4.1.534.10.2.1.2.0"
 
-static info_lkp_t ats_source_info[] = {
+static info_lkp_t eaton_ats_source_info[] = {
 	{ 1, "init" },
 	{ 2, "diagnosis" },
 	{ 3, "off" },
@@ -40,20 +40,20 @@ static info_lkp_t ats_source_info[] = {
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_sensitivity_info[] = {
+static info_lkp_t eaton_ats_sensitivity_info[] = {
 	{ 1, "normal" },
 	{ 2, "high" },
 	{ 3, "low" },
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_input_frequency_status_info[] = {
+static info_lkp_t eaton_ats_input_frequency_status_info[] = {
 	{ 1, "good" },          /* No threshold triggered */
 	{ 2, "out-of-range" },  /* Frequency out of range triggered */
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_input_voltage_status_info[] = {
+static info_lkp_t eaton_ats_input_voltage_status_info[] = {
 	{ 1, "good" },          /* No threshold triggered */
 	{ 2, "derated-range" }, /* Voltage derated */
 	{ 3, "out-of-range" },  /* Voltage out of range triggered */
@@ -61,7 +61,7 @@ static info_lkp_t ats_input_voltage_stat
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_test_result_info[] = {
+static info_lkp_t eaton_ats_test_result_info[] = {
 	{ 1, "done and passed" },
 	{ 2, "done and warning" },
 	{ 3, "done and error" },
@@ -71,7 +71,7 @@ static info_lkp_t ats_test_result_info[]
 	{ 0, NULL }
 };
 
-static info_lkp_t ats_output_status_info[] = {
+static info_lkp_t eaton_ats_output_status_info[] = {
 	{ 1, "OFF" }, /* Output not powered */
 	{ 2, "OL" },  /* Output powered */
 	{ 0, NULL }
@@ -111,21 +111,21 @@ static snmp_info_t eaton_ats_mib[] = {
 	/* ats2InputVoltage.source2 = INTEGER: 2432 0.1 V */
 	{ "input.2.voltage", 0, 0.1, ".1.3.6.1.4.1.534.10.2.2.2.1.2.2", NULL, SU_FLAG_OK, NULL, NULL },
 	/* ats2InputStatusVoltage.source1 = INTEGER: normalRange(1) */
-	{ "input.1.voltage.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.5.1", NULL, SU_FLAG_OK, ats_input_voltage_status_info, NULL },
+	{ "input.1.voltage.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.5.1", NULL, SU_FLAG_OK, eaton_ats_input_voltage_status_info, NULL },
 	/* ats2InputStatusVoltage.source2 = INTEGER: normalRange(1) */
-	{ "input.2.voltage.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.5.2", NULL, SU_FLAG_OK, ats_input_voltage_status_info, NULL },
+	{ "input.2.voltage.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.5.2", NULL, SU_FLAG_OK, eaton_ats_input_voltage_status_info, NULL },
 	/* ats2InputFrequency.source1 = INTEGER: 500 0.1 Hz */
 	{ "input.1.frequency", 0, 0.1, ".1.3.6.1.4.1.534.10.2.2.2.1.3.1", NULL, SU_FLAG_OK, NULL, NULL },
 	/* ats2InputFrequency.source2 = INTEGER: 500 0.1 Hz */
 	{ "input.2.frequency", 0, 0.1, ".1.3.6.1.4.1.534.10.2.2.2.1.3.2", NULL, SU_FLAG_OK, NULL, NULL },
 	/* ats2InputStatusFrequency.source1 = INTEGER: good(1) */
-	{ "input.1.frequency.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.2.1", NULL, SU_FLAG_OK, ats_input_frequency_status_info, NULL },
+	{ "input.1.frequency.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.2.1", NULL, SU_FLAG_OK, eaton_ats_input_frequency_status_info, NULL },
 	/* ats2InputStatusFrequency.source2 = INTEGER: good(1) */
-	{ "input.2.frequency.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.2.2", NULL, SU_FLAG_OK, ats_input_frequency_status_info, NULL },
+	{ "input.2.frequency.status", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.3.2.1.2.2", NULL, SU_FLAG_OK, eaton_ats_input_frequency_status_info, NULL },
 	/* ats2ConfigSensitivity.0 = INTEGER: normal(1) */
-	{ "input.sensitivity", ST_FLAG_RW, SU_INFOSIZE, ".1.3.6.1.4.1.534.10.2.4.6.0", NULL, SU_FLAG_OK, &ats_sensitivity_info[0], NULL },
+	{ "input.sensitivity", ST_FLAG_RW, SU_INFOSIZE, ".1.3.6.1.4.1.534.10.2.4.6.0", NULL, SU_FLAG_OK, &eaton_ats_sensitivity_info[0], NULL },
 	/* ats2OperationMode.0 = INTEGER: source1(4) */
-	{ "input.source", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.2.4.0", NULL, SU_FLAG_OK, ats_source_info, NULL },
+	{ "input.source", ST_FLAG_STRING, 1, ".1.3.6.1.4.1.534.10.2.2.4.0", NULL, SU_FLAG_OK, eaton_ats_source_info, NULL },
 	/* ats2ConfigPreferred.0 = INTEGER: source1(1) */
 	{ "input.source.preferred", ST_FLAG_RW, 1, ".1.3.6.1.4.1.534.10.2.4.5.0", NULL, SU_FLAG_OK, NULL, NULL },
 
@@ -140,10 +140,10 @@ static snmp_info_t eaton_ats_mib[] = {
 	/* UPS collection */
 	/* FIXME: RFC for device.test.result! */
 	/* ats2ConfigTransferTest.0 = INTEGER: noTestInitiated(6) */
-	{ "ups.test.result", 0, 1, ".1.3.6.1.4.1.534.10.2.4.8.0", NULL, SU_FLAG_OK, ats_test_result_info, NULL },
+	{ "ups.test.result", 0, 1, ".1.3.6.1.4.1.534.10.2.4.8.0", NULL, SU_FLAG_OK, eaton_ats_test_result_info, NULL },
 	/* FIXME: RFC for device.status! */
 	/* ats2StatusOutput.0 = INTEGER: outputPowered(2) */
-	{ "ups.status", 0, 1, ".1.3.6.1.4.1.534.10.2.3.3.2.0", NULL, SU_FLAG_OK, ats_output_status_info, NULL },
+	{ "ups.status", 0, 1, ".1.3.6.1.4.1.534.10.2.3.3.2.0", NULL, SU_FLAG_OK, eaton_ats_output_status_info, NULL },
 
 	/* Ambient collection */
 	/* ats2EnvRemoteTemp.0 = INTEGER: 0 degrees Centigrade */
Index: nut-2.7.4/drivers/eaton-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/eaton-mib.c
+++ nut-2.7.4/drivers/eaton-mib.c
@@ -30,7 +30,7 @@
 
 #include "eaton-mib.h"
 
-#define EATON_APHEL_MIB_VERSION	"0.47"
+#define EATON_APHEL_MIB_VERSION	"0.48"
 
 /* APHEL-GENESIS-II-MIB (monitored ePDU)
  * *************************************
@@ -110,7 +110,7 @@ static snmp_info_t eaton_aphel_genesisII
 #define AR_OID_OUTLET_NAME				AR_BASE_OID ".1.2.2.1.2"
 #define AR_OID_OUTLET_STATUS			AR_BASE_OID ".1.2.2.1.3"
 
-static info_lkp_t outlet_status_info[] = {
+static info_lkp_t eaton_outlet_status_info[] = {
 	{ -1, "error" },
 	{ 0, "off" },
 	{ 1, "on" },
@@ -175,7 +175,7 @@ static snmp_info_t eaton_aphel_revelatio
 	{ "outlet.%i.switchable", 0, 1, AR_OID_OUTLET_INDEX ".%i", "yes", SU_FLAG_STATIC | SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.id", 0, 1, NULL, "%i", SU_FLAG_STATIC | SU_FLAG_ABSENT | SU_FLAG_OK | SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.desc", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, AR_OID_OUTLET_NAME ".%i", NULL, SU_OUTLET, NULL, NULL },
-	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, AR_OID_OUTLET_STATUS ".%i", NULL, SU_FLAG_OK | SU_OUTLET, &outlet_status_info[0], NULL },
+	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, AR_OID_OUTLET_STATUS ".%i", NULL, SU_FLAG_OK | SU_OUTLET, &eaton_outlet_status_info[0], NULL },
 	{ "outlet.%i.current", 0, 0.001, AR_OID_OUTLET_CURRENT ".%i", NULL, SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.current.maximum", 0, 0.001, AR_OID_OUTLET_MAXCURRENT ".%i", NULL, SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.realpower", 0, 1.0, AR_OID_OUTLET_ACTIVEPOWER ".%i", NULL, SU_OUTLET, NULL, NULL },
@@ -239,7 +239,7 @@ static info_lkp_t marlin_outletgroups_st
 
 /* Ugly hack: having the matching OID present means that the outlet is
  * switchable. So, it should not require this value lookup */
-static info_lkp_t outlet_switchability_info[] = {
+static info_lkp_t eaton_outlet_switchability_info[] = {
 	{ -1, "yes" },
 	{ 0, "yes" },
 	{ 0, NULL }
@@ -568,7 +568,7 @@ static snmp_info_t eaton_marlin_mib[] =
 	{ "outlet.%i.voltage.high.critical", ST_FLAG_RW, 0.001, ".1.3.6.1.4.1.534.6.6.7.6.3.1.7.%i.%i", NULL, SU_FLAG_NEGINVALID | SU_OUTLET | SU_TYPE_DAISY_1, NULL, NULL },
 	{ "outlet.%i.power", 0, 1.0, ".1.3.6.1.4.1.534.6.6.7.6.5.1.2.%i.%i", NULL, SU_OUTLET | SU_TYPE_DAISY_1, NULL, NULL },
 	/* FIXME: handle non switchable units (only measurements), which do not expose this OID */
-	{ "outlet.%i.switchable", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.534.6.6.7.6.6.1.3.%i.%i", "no", SU_FLAG_STATIC | SU_OUTLET | SU_FLAG_OK | SU_TYPE_DAISY_1, &outlet_switchability_info[0], NULL },
+	{ "outlet.%i.switchable", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.534.6.6.7.6.6.1.3.%i.%i", "no", SU_FLAG_STATIC | SU_OUTLET | SU_FLAG_OK | SU_TYPE_DAISY_1, &eaton_outlet_switchability_info[0], NULL },
 
 	/* TODO: handle statistics
 	 * outletWh.0.1
Index: nut-2.7.4/drivers/huawei-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/huawei-mib.c
+++ nut-2.7.4/drivers/huawei-mib.c
@@ -35,7 +35,7 @@
  * };
  */
 
-static info_lkp_t supplymethod_info[] = {
+static info_lkp_t huawei_supplymethod_info[] = {
 	{ 1, "" },		/* no supply */
 	{ 2, "OL BYPASS" },
 	{ 3, "OL" },
@@ -46,7 +46,7 @@ static info_lkp_t supplymethod_info[] =
 	{ 0, NULL }
 };
 
-static info_lkp_t battstate_info[] = {
+static info_lkp_t huawei_battstate_info[] = {
 	{ 1, "" },		/* not connected */
 	{ 2, "" },		/* not charging or discharging */
 	{ 3, "" },		/* hibernation */
@@ -56,13 +56,13 @@ static info_lkp_t battstate_info[] = {
 	{ 0, NULL }
 };
 
-static info_lkp_t phase_info[] = {
+static info_lkp_t huawei_phase_info[] = {
 	{ 1, "1" },
 	{ 2, "3" },
 	{ 0, NULL }
 };
 
-static info_lkp_t voltrating_info[] = {
+static info_lkp_t huawei_voltrating_info[] = {
 	{ 1, "200" },
 	{ 2, "208" },
 	{ 3, "220" },
@@ -75,13 +75,13 @@ static info_lkp_t voltrating_info[] = {
 	{ 0, NULL }
 };
 
-static info_lkp_t freqrating_info[] = {
+static info_lkp_t huawei_freqrating_info[] = {
 	{ 1, "50" },
 	{ 2, "60" },
 	{ 0, NULL }
 };
 
-static info_lkp_t pwrrating_info[] = {
+static info_lkp_t huawei_pwrrating_info[] = {
 	{ 1, "80000" },
 	{ 2, "100000" },
 	{ 3, "120000" },
@@ -97,7 +97,11 @@ static info_lkp_t pwrrating_info[] = {
 	{ 0, NULL }
 };
 
-static info_lkp_t ietf_test_result_info[] = {
+/* Note: This is currently identical to ietf_test_result_info from IETF MIB
+ * We rename it here to a) allow evolution that may become incompatible;
+ * b) avoid namespace conflicts, especially with DMF loader of named objects
+ */
+static info_lkp_t huawei_test_result_info[] = {
 	{ 1, "done and passed" },
 	{ 2, "done and warning" },
 	{ 3, "done and error" },
@@ -148,16 +152,16 @@ static snmp_info_t huawei_mib[] = {
 	{ "ups.firmware", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.2.100.1.3.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, NULL },
 	{ "ups.serial", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.2.100.1.5.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, NULL },
 
-	{ "ups.status", 0, 1, ".1.3.6.1.4.1.2011.6.174.1.2.101.1.1.1", NULL, SU_FLAG_OK, supplymethod_info },
-	{ "ups.status", 0, 1, ".1.3.6.1.4.1.2011.6.174.1.2.101.1.3.1", NULL, SU_STATUS_BATT | SU_FLAG_OK, battstate_info },
+	{ "ups.status", 0, 1, ".1.3.6.1.4.1.2011.6.174.1.2.101.1.1.1", NULL, SU_FLAG_OK, huawei_supplymethod_info },
+	{ "ups.status", 0, 1, ".1.3.6.1.4.1.2011.6.174.1.2.101.1.3.1", NULL, SU_STATUS_BATT | SU_FLAG_OK, huawei_battstate_info },
 
-	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.7.3.0", "", 0, ietf_test_result_info },
+	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.7.3.0", "", 0, huawei_test_result_info },
 
 
 	/* Input page */
 
 	/* hwUpsCtrlInputStandard listed in MIB but not present on tested UPS5000-E */
-	{ "input.phases", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.102.100.1.8", "3", SU_FLAG_ABSENT | SU_FLAG_OK, phase_info },
+	{ "input.phases", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.102.100.1.8", "3", SU_FLAG_ABSENT | SU_FLAG_OK, huawei_phase_info },
 
 	{ "input.L1-N.voltage", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.3.100.1.1.1", NULL, SU_FLAG_OK, NULL },
 	{ "input.L2-N.voltage", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.3.100.1.2.1", NULL, SU_FLAG_OK, NULL },
@@ -183,7 +187,7 @@ static snmp_info_t huawei_mib[] = {
 	/* Output page */
 
 	/* hwUpsCtrlOutputStandard listed in MIB but not present on tested UPS5000-E */
-	{ "output.phases", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.102.100.1.9", "3", SU_FLAG_ABSENT | SU_FLAG_OK, phase_info },
+	{ "output.phases", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.102.100.1.9", "3", SU_FLAG_ABSENT | SU_FLAG_OK, huawei_phase_info },
 
 	{ "output.L1-N.voltage", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.1.1", NULL, SU_FLAG_OK, NULL },
 	{ "output.L2-N.voltage", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.2.1", NULL, SU_FLAG_OK, NULL },
@@ -207,9 +211,9 @@ static snmp_info_t huawei_mib[] = {
 	{ "output.L2.power.percent", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.15.1", NULL, SU_FLAG_OK, NULL },
 	{ "output.L3.power.percent", 0, 0.1, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.16.1", NULL, SU_FLAG_OK, NULL },
 
-	{ "output.voltage.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.17.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, voltrating_info },
-	{ "output.frequency.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.18.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, freqrating_info },
-	{ "output.power.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.2.100.1.6.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, pwrrating_info },
+	{ "output.voltage.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.17.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, huawei_voltrating_info },
+	{ "output.frequency.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.18.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, huawei_freqrating_info },
+	{ "output.power.nominal", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.2011.6.174.1.2.100.1.6.1", NULL, SU_FLAG_STATIC | SU_FLAG_OK, huawei_pwrrating_info },
 
 	{ "output.L1.powerfactor", 0, 0.01, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.19.1", NULL, SU_FLAG_OK, NULL },
 	{ "output.L2.powerfactor", 0, 0.01, ".1.3.6.1.4.1.2011.6.174.1.4.100.1.20.1", NULL, SU_FLAG_OK, NULL },
Index: nut-2.7.4/drivers/mge-hid.c
===================================================================
--- nut-2.7.4.orig/drivers/mge-hid.c
+++ nut-2.7.4/drivers/mge-hid.c
@@ -37,7 +37,7 @@
 #include "usbhid-ups.h"
 #include "mge-hid.h"
 
-#define MGE_HID_VERSION		"MGE HID 1.39"
+#define MGE_HID_VERSION		"MGE HID 1.40"
 
 /* (prev. MGE Office Protection Systems, prev. MGE UPS SYSTEMS) */
 /* Eaton */
@@ -55,6 +55,9 @@
 /* AEG */
 #define AEG_VENDORID 0x2b2d
 
+/* Phoenixtec Power Co., Ltd */
+#define PHOENIXTEC 0x06da
+
 #ifndef SHUT_MODE
 #include "usb-common.h"
 
@@ -80,6 +83,7 @@ static usb_device_id_t mge_usb_device_ta
 
 	/* PROTECT B / NAS */
 	{ USB_DEVICE(AEG_VENDORID, 0xffff), NULL },
+	{ USB_DEVICE(PHOENIXTEC, 0xffff), NULL },
 
 	/* Terminating entry */
 	{ -1, -1, NULL }
Index: nut-2.7.4/drivers/mge-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/mge-mib.c
+++ nut-2.7.4/drivers/mge-mib.c
@@ -94,7 +94,11 @@ static info_lkp_t mge_transfer_reason_in
 	{ 0, NULL }
 };
 
-static info_lkp_t ietf_test_result_info[] = {
+/* Note: This is currently identical to ietf_test_result_info from IETF MIB
+ * We rename it here to a) allow evolution that may become incompatible;
+ * b) avoid namespace conflicts, especially with DMF loader of named objects
+ */
+static info_lkp_t mge_test_result_info[] = {
 	{ 1, "done and passed" },
 	{ 2, "done and warning" },
 	{ 3, "done and error" },
@@ -104,14 +108,14 @@ static info_lkp_t ietf_test_result_info[
 	{ 0, NULL }
 };
 
-static info_lkp_t ietf_beeper_status_info[] = {
+static info_lkp_t mge_beeper_status_info[] = {
 	{ 1, "disabled" },
 	{ 2, "enabled" },
 	{ 3, "muted" },
 	{ 0, NULL }
 };
 
-static info_lkp_t ietf_yes_no_info[] = {
+static info_lkp_t mge_yes_no_info[] = {
 	{ 1, "yes" },
 	{ 2, "no" },
 	{ 0, NULL }
@@ -119,7 +123,7 @@ static info_lkp_t ietf_yes_no_info[] = {
 
 /* FIXME: the below may introduce status redundancy, that needs to be
  * adressed by the driver, as for usbhid-ups! */
-static info_lkp_t ietf_power_source_info[] = {
+static info_lkp_t mge_power_source_info[] = {
 	{ 1, "" /* other */ },
 	{ 2, "OFF" /* none */ },
 #if 0
@@ -156,17 +160,17 @@ static snmp_info_t mge_mib[] = {
 	{ "ups.firmware", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.1.4.0", "", SU_FLAG_STATIC | SU_FLAG_OK, NULL },
 	{ "ups.firmware.aux", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.12.12.0", "", SU_FLAG_STATIC | SU_FLAG_OK, NULL },
 	{ "ups.load", 0, 1, ".1.3.6.1.4.1.705.1.7.2.1.4.1", "", SU_OUTPUT_1, NULL },
-	{ "ups.beeper.status", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.2.1.33.1.9.8.0", "", 0, ietf_beeper_status_info },
+	{ "ups.beeper.status", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.2.1.33.1.9.8.0", "", 0, mge_beeper_status_info },
 	{ "ups.L1.load", 0, 1, ".1.3.6.1.4.1.705.1.7.2.1.4.1", "", SU_OUTPUT_3, NULL },
 	{ "ups.L2.load", 0, 1, ".1.3.6.1.4.1.705.1.7.2.1.4.2", "", SU_OUTPUT_3, NULL },
 	{ "ups.L3.load", 0, 1, ".1.3.6.1.4.1.705.1.7.2.1.4.3", "", SU_OUTPUT_3, NULL },
-	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.7.3.0", "", 0, ietf_test_result_info },
+	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.7.3.0", "", 0, mge_test_result_info },
 	{ "ups.delay.shutdown", ST_FLAG_STRING | ST_FLAG_RW, 6, "1.3.6.1.2.1.33.1.8.2.0", STR_DEFAULT_OFFDELAY, SU_FLAG_ABSENT | SU_FLAG_OK, NULL },
 	{ "ups.delay.start", ST_FLAG_STRING | ST_FLAG_RW, 6, "1.3.6.1.2.1.33.1.8.3.0", STR_DEFAULT_ONDELAY, SU_FLAG_ABSENT | SU_FLAG_OK, NULL },
 	{ "ups.timer.shutdown", 0, 1, "1.3.6.1.2.1.33.1.8.2.0", "", SU_FLAG_OK, NULL },
 	{ "ups.timer.start", 0, 1, "1.3.6.1.2.1.33.1.8.3.0", "", SU_FLAG_OK, NULL },
 	{ "ups.timer.reboot", 0, 1, "1.3.6.1.2.1.33.1.8.4.0", "", SU_FLAG_OK, NULL },
-	{ "ups.start.auto", ST_FLAG_RW, 1, "1.3.6.1.2.1.33.1.8.5.0", "", SU_FLAG_OK, ietf_yes_no_info },
+	{ "ups.start.auto", ST_FLAG_RW, 1, "1.3.6.1.2.1.33.1.8.5.0", "", SU_FLAG_OK, mge_yes_no_info },
 	/* status data */
 	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.5.11.0", "", SU_FLAG_OK | SU_STATUS_BATT, mge_replacebatt_info },
 	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.5.14.0", "", SU_FLAG_OK | SU_STATUS_BATT, mge_lowbatt_info },
@@ -177,7 +181,7 @@ static snmp_info_t mge_mib[] = {
 	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.7.8.0", "", SU_FLAG_OK | SU_STATUS_BATT, mge_boost_info },
 	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.7.10.0", "", SU_FLAG_OK | SU_STATUS_BATT, mge_overload_info },
 	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.7.12.0", "", SU_FLAG_OK | SU_STATUS_BATT, mge_trim_info },
-	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.4.1.0", "", SU_STATUS_PWR | SU_FLAG_OK, ietf_power_source_info },
+	{ "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.2.1.33.1.4.1.0", "", SU_STATUS_PWR | SU_FLAG_OK, mge_power_source_info },
 
 	/* FIXME: Alarms
 	 * - upsmgBatteryChargerFault (.1.3.6.1.4.1.705.1.5.15.0), yes (1), no (2)
Index: nut-2.7.4/drivers/powerware-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/powerware-mib.c
+++ nut-2.7.4/drivers/powerware-mib.c
@@ -167,7 +167,7 @@ static info_lkp_t pw_battery_abm_status[
 	{ 0, NULL }
 } ;
 
-static info_lkp_t eaton_abm_status_info[] = {
+static info_lkp_t pw_abm_status_info[] = {
 	{ 1, "charging" },
 	{ 2, "discharging" },
 	{ 3, "floating" },
@@ -188,7 +188,7 @@ static info_lkp_t pw_batt_test_info[] =
 	{ 0, NULL }
 };
 
-static info_lkp_t ietf_yes_no_info[] = {
+static info_lkp_t pw_yes_no_info[] = {
 	{ 1, "yes" },
 	{ 2, "no" },
 	{ 0, NULL }
@@ -238,9 +238,9 @@ static snmp_info_t pw_mib[] = {
 	/* XUPS-MIB::xupsTestBatteryStatus */
 	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.4.1.534.1.8.2.0", "", 0, &pw_batt_test_info[0] },
 	/* UPS-MIB::upsAutoRestart */
-	{ "ups.start.auto", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.2.1.33.1.8.5.0", "", SU_FLAG_OK, &ietf_yes_no_info[0] },
+	{ "ups.start.auto", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.2.1.33.1.8.5.0", "", SU_FLAG_OK, &pw_yes_no_info[0] },
 	/* XUPS-MIB::xupsBatteryAbmStatus.0 */
-	{ "battery.charger.status", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.4.1.534.1.2.5.0", "", SU_STATUS_BATT, &eaton_abm_status_info[0] },
+	{ "battery.charger.status", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.4.1.534.1.2.5.0", "", SU_STATUS_BATT, &pw_abm_status_info[0] },
 
 	/* Battery page */
 	{ "battery.charge", 0, 1.0, PW_OID_BATT_CHARGE, "",
Index: nut-2.7.4/drivers/raritan-pdu-mib.c
===================================================================
--- nut-2.7.4.orig/drivers/raritan-pdu-mib.c
+++ nut-2.7.4/drivers/raritan-pdu-mib.c
@@ -38,7 +38,7 @@
 #define DO_ON		1
 #define DO_CYCLE	2
 
-static info_lkp_t outlet_status_info[] = {
+static info_lkp_t raritan_pdu_outlet_status_info[] = {
 	{ -1, "error" },
 	{ 0, "off" },
 	{ 1, "on" },
@@ -91,7 +91,7 @@ static snmp_info_t raritan_mib[] = {
 	{ "outlet.%i.switchable", 0, 1, ".1.3.6.1.4.1.13742.1.2.2.1.1.%i", "yes", SU_FLAG_STATIC | SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.id", 0, 1, NULL, "%i", SU_FLAG_STATIC | SU_FLAG_ABSENT | SU_FLAG_OK | SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.desc", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.13742.1.2.2.1.2.%i", NULL, SU_OUTLET, NULL, NULL },
-	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.13742.1.2.2.1.3.%i", NULL, SU_FLAG_OK | SU_OUTLET, &outlet_status_info[0], NULL },
+	{ "outlet.%i.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.13742.1.2.2.1.3.%i", NULL, SU_FLAG_OK | SU_OUTLET, &raritan_pdu_outlet_status_info[0], NULL },
 	{ "outlet.%i.current", 0, 0.001, ".1.3.6.1.4.1.13742.1.2.2.1.4.%i", NULL, SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.current.maximum", 0, 0.001, ".1.3.6.1.4.1.13742.1.2.2.1.5.%i", NULL, SU_OUTLET, NULL, NULL },
 	{ "outlet.%i.realpower", 0, 1.0, ".1.3.6.1.4.1.13742.1.2.2.1.7.%i", NULL, SU_OUTLET, NULL, NULL },
Index: nut-2.7.4/drivers/snmp-ups.c
===================================================================
--- nut-2.7.4.orig/drivers/snmp-ups.c
+++ nut-2.7.4/drivers/snmp-ups.c
@@ -9,6 +9,7 @@
  *			J.W. Hoogervorst <jeroen@hoogervorst.net>
  *			Niels Baggesen <niels@baggesen.net>
  *	2009 - 2010	Arjen de Korte <adkorte-guest@alioth.debian.org>
+ *      2016            Carlos Dominguez <CarlosDominguez@eaton.com>
  *
  *  Sponsored by Eaton <http://www.eaton.com>
  *   and originally by MGE UPS SYSTEMS <http://www.mgeups.com/>
@@ -38,6 +39,10 @@
 #include "snmp-ups.h"
 #include "parseconf.h"
 
+#ifdef WITH_DMFMIB
+# include "dmfsnmp.h"
+# include "apc-iem-mib.h"
+#else
 /* include all known mib2nut lookup tables */
 #include "apc-mib.h"
 #include "mge-mib.h"
@@ -57,12 +62,24 @@
 #include "eaton-ats-mib.h"
 #include "apc-ats-mib.h"
 #include "apc-pdu-mib.h"
+#endif
 
 /* Address API change */
 #ifndef usmAESPrivProtocol
 #define usmAESPrivProtocol usmAES128PrivProtocol
 #endif
 
+#ifdef WITH_DMFMIB
+// Array of pointers to singular instances of mib2nut_info_t
+mib2nut_info_t **mib2nut = NULL;
+mibdmf_parser_t *dmp = NULL;
+char *dmf_path = NULL;
+#else
+
+#ifdef WITH_DMF_LUA
+#undef WITH_DMF_LUA
+#endif
+
 static mib2nut_info_t *mib2nut[] = {
 	&apc,
 	&mge,
@@ -98,6 +115,7 @@ static mib2nut_info_t *mib2nut[] = {
 	/* end of structure. */
 	NULL
 };
+#endif
 
 struct snmp_session g_snmp_sess, *g_snmp_sess_p;
 const char *OID_pwr_status;
@@ -117,7 +135,11 @@ alarms_info_t *alarms_info;
 const char *mibname;
 const char *mibvers;
 
-#define DRIVER_NAME	"Generic SNMP UPS driver"
+#ifdef WITH_DMFMIB
+#define DRIVER_NAME	"Generic SNMP UPS driver (DMF)"
+#else
+ #define DRIVER_NAME	"Generic SNMP UPS driver"
+#endif
 #define DRIVER_VERSION		"0.99"
 
 /* driver description structure */
@@ -291,6 +313,10 @@ void upsdrv_makevartable(void)
 		"Set the authentication protocol (MD5 or SHA) used for authenticated SNMPv3 messages (default=MD5)");
 	addvar(VAR_VALUE, SU_VAR_PRIVPROT,
 		"Set the privacy protocol (DES or AES) used for encrypted SNMPv3 messages (default=DES)");
+#ifdef WITH_DMFMIB
+	addvar(VAR_VALUE, SU_VAR_DMFPATH,
+		"Set the Data Mapping File to use");
+#endif
 }
 
 void upsdrv_initups(void)
@@ -303,6 +329,52 @@ void upsdrv_initups(void)
 
 	upsdebugx(1, "SNMP UPS driver: entering %s()", __func__);
 
+#ifdef WITH_DMFMIB
+	dmp = mibdmf_parser_new();
+	if (!dmp)
+		fatalx(EXIT_FAILURE, "FATAL: Can not allocate the DMF parsing structures");
+
+	/* FIXME: Add configurability of where we look for *.dmf files */
+#ifdef DEFAULT_DMFSNMP_DIR
+	if(testvar(SU_VAR_DMFPATH)){
+		mibdmf_parse_file(getval(SU_VAR_DMFPATH), dmp);
+	}else if(!dmf_path) mibdmf_parse_dir(DEFAULT_DMFSNMP_DIR, dmp);
+	else mibdmf_parse_file(dmf_path, dmp);
+#else
+	if(testvar(SU_VAR_DMFPATH)){
+		mibdmf_parse_file(getval(SU_VAR_DMFPATH), dmp);
+	}else if(!dmf_path){
+		if (! mibdmf_parse_dir("/usr/share/nut/dmf/", dmp) )
+			mibdmf_parse_dir("./", dmp);
+	}else mibdmf_parse_file(dmf_path, dmp);
+#endif
+	upsdebugx(2,"Trying to access the mib2nut table parsed from DMF library");
+	if ( !(mibdmf_get_mib2nut_table(dmp)) )
+	{
+		upsdebugx(1,"FATAL: Can not access the mib2nut table parsed from DMF library");
+		return;
+	}
+	{ /* scope the table loop vars */
+		/* TODO: Change size detection to loop over array until NULLed sentinels? */
+		int tablength = mibdmf_get_device_table_counter(dmp);
+		upsdebugx(2,"Got access to the mib2nut table with %d entries parsed from DMF library",
+			tablength);
+		if (tablength<=1) {
+			fatalx(EXIT_FAILURE, "FATAL: Did not find any DMF library data");
+			return;
+		}
+		if ( mib2nut != NULL ) {
+			upsdebugx(1,"mib2nut not NULL when expected to be...");
+			free(mib2nut);
+		}
+		mib2nut = *(mibdmf_get_mib2nut_table_ptr)(dmp);
+		if ( mib2nut == NULL ) {
+			upsdebugx(1,"FATAL: Could not access the mib2nut index table");
+			return;
+		}
+	} // scope the table loop vars
+#endif
+
 	/* Retrieve user's parameters */
 	mibs = testvar(SU_VAR_MIBS) ? getval(SU_VAR_MIBS) : "auto";
 
@@ -406,6 +478,10 @@ void upsdrv_cleanup(void)
 
 	/* Net-SNMP specific cleanup */
 	nut_snmp_cleanup();
+#ifdef WITH_DMFMIB
+	mibdmf_parser_destroy(&dmp);
+	mib2nut = NULL;
+#endif
 }
 
 /* -----------------------------------------------------------
@@ -860,6 +936,8 @@ bool_t nut_snmp_get_int(const char *OID,
 	long value;
 	char *buf;
 
+	upsdebugx(3, "Entering %s()", __func__);
+
 	pdu = nut_snmp_get(OID);
 	if (pdu == NULL)
 		return FALSE;
@@ -1807,6 +1885,8 @@ int extract_template_number(int template
 		item_number_ptr = &varname[6];
 	else if (template_type & SU_DAISY)
 		item_number_ptr = &varname[6];
+	else if (template_type & SU_DAISY)
+		item_number_ptr = &varname[6];
 	else
 		return -1;
 
Index: nut-2.7.4/drivers/snmp-ups.h
===================================================================
--- nut-2.7.4.orig/drivers/snmp-ups.h
+++ nut-2.7.4/drivers/snmp-ups.h
@@ -49,6 +49,16 @@
 #ifndef SNMP_UPS_H
 #define SNMP_UPS_H
 
+#ifndef WITH_DMFMIB
+ #undef WITH_DMF_LUA
+#endif
+
+#ifdef WITH_DMF_LUA
+# include <lua.h>
+# include <lauxlib.h>
+# include <lualib.h>
+#endif
+
 /* FIXME: still needed?
  * workaround for buggy Net-SNMP config */
 #ifdef PACKAGE_BUGREPORT
@@ -124,13 +134,17 @@ typedef struct {
 	unsigned long flags;		/* my flags */
 	info_lkp_t   *oid2info;		/* lookup table between OID and NUT values */
 	int          *setvar;		/* variable to set for SU_FLAG_SETINT */
+#ifdef WITH_DMF_LUA
+	char *function;
+	lua_State *luaContext;
+#endif
 } snmp_info_t;
 
-#define SU_FLAG_OK			(1 << 0)	/* show element to upsd. */
+#define SU_FLAG_OK			(1 << 0)	/* show element to upsd - internal to snmp driver */
 #define SU_FLAG_STATIC		(1 << 1)	/* retrieve info only once. */
 #define SU_FLAG_ABSENT		(1 << 2)	/* data is absent in the device,
 										 * use default value. */
-#define SU_FLAG_STALE		(1 << 3)	/* data stale, don't try too often. */
+#define SU_FLAG_STALE		(1 << 3)	/* data stale, don't try too often - internal to snmp driver */
 #define SU_FLAG_NEGINVALID	(1 << 4)	/* Invalid if negative value */
 #define SU_FLAG_UNIQUE		(1 << 5)	/* There can be only be one
 						 				 * provider of this info,
@@ -138,6 +152,10 @@ typedef struct {
 #define SU_FLAG_SETINT		(1 << 6)	/* save value */
 #define SU_OUTLET			(1 << 7)	/* outlet template definition */
 #define SU_CMD_OFFSET		(1 << 8)	/* Add +1 to the OID index */
+
+#ifdef WITH_DMF_LUA
+#define SU_FLAG_FUNCTION        (1 << 9)        /* TODO Pending to check if this flag have any incompatibility*/
+#endif
 /* Notes on outlet templates usage:
  * - outlet.count MUST exist and MUST be declared before any outlet template
  * Otherwise, the driver will try to determine it by itself...
@@ -175,6 +193,7 @@ typedef struct {
 /* hints for su_ups_set, applicable only to rw vars */
 #define SU_TYPE_INT			(0 << 18)	/* cast to int when setting value */
 #define SU_TYPE_STRING		(1 << 18)	/* cast to string. FIXME: redundant with ST_FLAG_STRING */
+/* Free slot                (1 << 18) */
 #define SU_TYPE_TIME		(2 << 18)	/* cast to int */
 #define SU_TYPE_CMD			(3 << 18)	/* instant command */
 #define SU_TYPE(t)			((t)->flags & (7 << 18))
@@ -203,6 +222,8 @@ typedef struct {
 #define SU_VAR_AUTHPROT		"authProtocol"
 #define SU_VAR_PRIVPROT		"privProtocol"
 
+#define SU_VAR_DMFPATH          "dmfpath"
+
 #define SU_INFOSIZE		128
 #define SU_BUFSIZE		32
 #define SU_LARGEBUF		256
@@ -218,6 +239,10 @@ typedef struct {
 #define SU_MODE_INSTCMD     1
 #define SU_MODE_SETVAR      2
 
+/* modes for su_setOID */
+#define SU_MODE_INSTCMD     1
+#define SU_MODE_SETVAR      2
+
 /* log spew limiters */
 #define SU_ERR_LIMIT 10	/* start limiting after this many errors in a row  */
 #define SU_ERR_RATE 100	/* only print every nth error once limiting starts */
@@ -278,7 +303,8 @@ extern struct snmp_session g_snmp_sess,
 extern const char *OID_pwr_status;
 extern int g_pwr_battery;
 extern int pollfreq; /* polling frequency */
-extern int input_phases, output_phases, bypass_phases;
+/* extern int input_phases, output_phases, bypass_phases; */
+int input_phases, output_phases, bypass_phases;
 
 /* Common daisychain structure and functions */
 
@@ -293,6 +319,5 @@ typedef struct {
 	long bypass_phases;
 } daisychain_info_t;
 
-
 #endif /* SNMP_UPS_H */
 
Index: nut-2.7.4/include/Makefile.am
===================================================================
--- nut-2.7.4.orig/include/Makefile.am
+++ nut-2.7.4/include/Makefile.am
@@ -1,5 +1,5 @@
 dist_noinst_HEADERS = attribute.h common.h extstate.h parseconf.h proto.h	\
- state.h str.h timehead.h upsconf.h nut_stdint.h nut_platform.h
+ state.h str.h timehead.h upsconf.h nut_stdint.h nut_platform.h dmf.h dmfsnmp.h
 
 # http://www.gnu.org/software/automake/manual/automake.html#Clean
 BUILT_SOURCES = nut_version.h
Index: nut-2.7.4/include/common.h
===================================================================
--- nut-2.7.4.orig/include/common.h
+++ nut-2.7.4/include/common.h
@@ -122,6 +122,8 @@ char *xstrdup(const char *string);
 int select_read(const int fd, void *buf, const size_t buflen, const long d_sec, const long d_usec);
 int select_write(const int fd, const void *buf, const size_t buflen, const long d_sec, const long d_usec);
 
+char * get_libname(const char* base_libname);
+
 /* Buffer sizes used for various functions */
 #define SMALLBUF	512
 #define LARGEBUF	1024
Index: nut-2.7.4/include/dmf.h
===================================================================
--- /dev/null
+++ nut-2.7.4/include/dmf.h
@@ -0,0 +1,30 @@
+// Compatibility layer for renamed file and may later become home for common
+// DMF-related constructs reusable for other applications than current SNMP one
+
+/* dmf.h - Header for (TODO:dmf.c) - the Network UPS Tools XML-driver-loader
+ *
+ * This file declares procedures to manipulate and load structured information
+ * for NUT drivers and scanner tools dynamically, rather than statically linked
+ * into binaries of the past.
+ *
+ * Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+ * Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+ * Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#include "dmfsnmp.h"
+
Index: nut-2.7.4/include/dmfsnmp.h
===================================================================
--- /dev/null
+++ nut-2.7.4/include/dmfsnmp.h
@@ -0,0 +1,478 @@
+/* dmfsnmp.h - Header for dmfsnmp.c - the Network UPS Tools XML-driver-loader
+ *   for the snmp-ups and nut-scanner SNMP MIB support.
+ *
+ * This file declares procedures to manipulate and load MIB structures
+ * for NUT snmp-ups drivers dynamically, rather than as statically linked
+ * files of the past. See below for "The big theory" details.
+ *
+ * Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+ * Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+ * Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#ifndef DMF_SNMP_H
+/* Note: we #define DMF_SNMP_H only in the end of file */
+
+/* THE BIG THEORY COMMENT
+ *
+ * The dynamic DMF supports adds a way to load and populate at run-time the
+ * C structures with OIDs, flags and other information that was previously
+ * statically compiled into "snmp-ups" driver and "nut-scanner" application.
+ *
+ * For snmp-ups this architecture involved linking with multiple *-mib.c files
+ * which defined some structures per supported device type/vendor:
+ * - info_lkp_t = lookup tables with arbitrary dictionaries to map numeric
+ *   IDs to string keywords, usually for deciphering components in an OID
+ * - snmp_info_t = mapping of NUT attribute keywords to SNMP OIDs, maybe the
+ *   lookup tables or default values for this attribute, etc.
+ * - alarms_info_t = optional mapping between SNMP OIDs and alarms
+ * - mib2nut_info_t = each entry is a higher-level mapping between some
+ *   identification strings and pointers to an instance of snmp_info_t and
+ *   optionally an alarms_info_t - this mapping allows NUT to decide which
+ *   one of the known snmp_info_t's to use against a particular device.
+ *
+ * Each typical *-mib.c and accompanying *-mib.h defines one (rarely more)
+ * array of snmp_info_t items and one (rarely more) structure instance of
+ * mib2nut_info_t, usually several arrays of info_lkp_t's and maybe an array
+ * of recently introduced alarms_info_t (at this time only one driver has it).
+ *
+ * After including all the headers and linking with the *-mib.c files, the
+ * snmp-ups.c file defined "mib2nut" - an array of mib2nut_info_t entries
+ * with fixed references to all those known higher-level entries (exported
+ * via header files).
+ *
+ * The nut-scanner defines an snmp_device_table with a subset of that
+ * information as an array of snmp_device_id_t tuples. The table comes from
+ * nutscan-snmp.h which is generated from the *-mib.c files during NUT build.
+ *
+ * The DMF code allows to populate equivalent hierarchy of structures by
+ * parsing an XML file during driver startup, rather than pre-compiling
+ * it statically.
+ *
+ * For that, first you dynamically instantiate the auxiliary list:
+ * `alist_t * list = alist_new(NULL,(void (*)(void **))alist_destroy, NULL );`
+ * This list hides the complexity of a dynamically allocated array of arrays,
+ * ultimately storing the lookup tables, alarms, etc.
+ * Then you populate it with data from XML files, using `parse_file()` or
+ * `parse_dir()` calls. Whenever compatible markup is found in the XML input,
+ * the parser (or rather our callback function called at each tag closure)
+ * places the discovered information into a new entry under the "list" tree,
+ * or into dynamically grown arrays "mib2nut_info_t *mib2nut_table" (snmp-ups)
+ * and "snmp_device_id_t *device_table" (for nut-scanner), as appropriate.
+ * References to these tables can be received with `get_mib2nut_table()` and
+ * `get_device_table()` methods. You can also `get_device_table_counter()` to
+ * look up the two tables' lengths (they were last `realloc()`ed to this size)
+ * including the zeroed-out sentinel last entries, but historically the NUT
+ * way consisted of looking through the tables until hitting the sentinel
+ * entry and so determining its size or otherwise end of loop - and this
+ * remains the official and reliable manner of length determination (not
+ * a copy of the counter from implementation detail).
+ *
+ * In the end, these two tables can be used same as the static tables of the
+ * old days, referencing information maintained in the trees behind "list".
+ * In particular, note that you `dmf_parser_destroy(); alist_destroy(&list);`
+ * only together and typically only when you tear down the executing program.
+ * There is also a `dmf_parser_init()` that can be called to initialize empty
+ * tables (with just one zeroed-out entry in each), but technically it is not
+ * required (the parser can start to grow from unallocated table pointers);
+ * this routine is there mostly for experiments with dynamic re-initialization
+ * of the lists which is not a major goal or use-case.
+ *
+ * For the initial code-drop, all or most of the routines defined in the dmf.c
+ * are declared in this header. The actual consumer API consists of the init,
+ * destroy and parse functions, and getters for reference to the two tables.
+ * The rest of declarations are here to aid development of other types of
+ * consumers (e.g. DMF not for SNMP drivers, alists for something else enirely)
+ * and may later be hidden or rearranged.
+ *
+ * @devs: You can also search for entries in the hierarchy behind "list" with
+ * `alist_get_element_by_name()`, and dump contents with debug methods, e.g.:
+ *      print_mib2nut_memory_struct((mib2nut_info_t *)
+ *              alist_get_element_by_name(list, "powerware")->values[0]);
+ * See dmf-test.c for some example usage.
+ */
+
+#include <stdbool.h>
+#include "extstate.h"
+#include "snmp-ups.h"
+#include "nutscan-snmp.h"
+
+#ifdef WITH_DMF_LUA
+/* NOTE: This code uses deprecated lua_open() that is removed since lua5.2.
+ * As of this initial code-drop, the implementation is experimental and is
+ * incomplete and very likely buggy. Developers of LUA integration should
+ * explicitly reconfigure and rebuild NUT with `-DWITH_DMF_LUA=1` in their
+ * CFLAGS - it is not exposed otherwise.
+ */
+# include <lua.h>
+# include <lauxlib.h>
+# include <lualib.h>
+#endif
+
+/*
+ *      HEADER FILE
+ *
+ */
+#define YES "yes"
+#define DEFAULT_CAPACITY 16
+
+#ifdef PATH_MAX
+#define PATH_MAX_SIZE PATH_MAX
+#else
+#define PATH_MAX_SIZE 1024
+#endif
+
+/* Recognized DMF XML tags */
+#define DMFTAG_NUT "nut"
+#define DMFTAG_MIB2NUT "mib2nut"
+#define DMFTAG_LOOKUP "lookup"
+#define DMFTAG_SNMP "snmp"
+#define DMFTAG_ALARM "alarm"
+/* NOTE: Actual support for functions is optionally built so
+ * it can be missing in a binary (with warning in DMF import)
+ * Also it may be backed by various implementations (LUA for starters) */
+#define DMFTAG_FUNCTIONS "functions"
+#define DMFTAG_FUNCTION "function"
+
+#define MIB2NUT_VERSION "version"
+#define MIB2NUT_OID "oid"
+#define MIB2NUT_MIB_NAME "mib_name"
+#define MIB2NUT_AUTO_CHECK "auto_check"
+#define MIB2NUT_POWER_STATUS "power_status"
+#define MIB2NUT_SNMP "snmp_info"
+#define MIB2NUT_ALARMS "alarms_info"
+
+#define INFO_MIB2NUT_MAX_ATTRS 14
+#define INFO_LOOKUP_MAX_ATTRS 4
+#define INFO_SNMP_MAX_ATTRS 14
+#define INFO_ALARM_MAX_ATTRS 6
+
+#define DMFTAG_INFO_LOOKUP "lookup_info"
+#define LOOKUP_OID "oid"
+#define LOOKUP_VALUE "value"
+
+#define DMFTAG_INFO_SNMP "snmp_info"
+#define SNMP_NAME "name"
+#define SNMP_MULTIPLIER "multiplier"
+#define SNMP_OID "oid"
+#define SNMP_DEFAULT "default"
+#define SNMP_LOOKUP "lookup"
+#define SNMP_SETVAR "setvar"
+/* Info_flags */
+#define SNMP_INFOFLAG_WRITABLE "writable"
+#define SNMP_INFOFLAG_STRING "string"
+/* Flags */
+#define SNMP_FLAG_OK "flag_ok"
+#define SNMP_FLAG_STATIC "static"
+#define SNMP_FLAG_ABSENT "absent"
+#define SNMP_FLAG_NEGINVALID "positive"
+#define SNMP_FLAG_UNIQUE "unique"
+#define SNMP_STATUS_PWR "power_status"
+#define SNMP_STATUS_BATT "battery_status"
+#define SNMP_STATUS_CAL "calibration"
+#define SNMP_STATUS_RB "replace_battery"
+#define SNMP_TYPE_CMD "command"
+#define SNMP_OUTLET_GROUP "outlet_group"
+#define SNMP_OUTLET "outlet"
+#define SNMP_OUTPUT_1 "output_1_phase"
+#define SNMP_OUTPUT_3 "output_3_phase"
+#define SNMP_INPUT_1 "input_1_phase"
+#define SNMP_INPUT_3 "input_3_phase"
+#define SNMP_BYPASS_1 "bypass_1_phase"
+#define SNMP_BYPASS_3 "bypass_3_phase"
+/* Setvar */
+#define SETVAR_INPUT_PHASES "input_phases"
+#define SETVAR_OUTPUT_PHASES "output_phases"
+#define SETVAR_BYPASS_PHASES "bypass_phases"
+
+#define DMFTAG_INFO_ALARM "info_alarm"
+#define ALARM_OID "oid"
+#define ALARM_STATUS "status"
+#define ALARM_ALARM "alarm"
+
+#define TYPE_DAISY "type_daisy"
+
+#ifdef WITH_DMF_LUA
+#define TYPE_FUNCTION "function"
+#endif
+/* "Auxiliary list" structure to store hierarchies
+ * of lists with bits of data */
+typedef struct {
+	void **values;
+	int size;
+	int capacity;
+	char *name;
+	void (*destroy)(void **self_p);
+	void (*new_element)(void);
+} alist_t;
+
+typedef enum {
+	ERR = -1,
+	OK,
+	DMF_NEON_CALLBACK_OK = 1
+} state_t;
+
+/* Aggregate the data storage and variables needed to
+ * parse the DMF representation of MIB data for NUT */
+typedef struct {
+	alist_t **list;
+	int sublist_elements;
+	snmp_device_id_t *device_table;
+	mib2nut_info_t **mib2nut_table;
+
+/* This is an amount of known device_table and mib2nut-table entries (same)
+ * AND the trailing sentinel (zeroed-out entry), so it is always >= 1 when
+ * there is some data (and table pointers are not NULL).
+ */
+	int device_table_counter;
+} mibdmf_parser_t;
+
+#ifdef WITH_DMF_LUA
+typedef struct {
+	char *name;
+	char *code;
+} function_t;
+#endif
+/* Initialize the data for dmf.c */
+mibdmf_parser_t *
+	mibdmf_parser_new();
+
+/* Properly destroy the object hierarchy and NULLify the caller's pointer */
+void
+	mibdmf_parser_destroy(mibdmf_parser_t** self_p);
+
+/* OOP-style getters, to let us decouple consumers from implementation du-jour.
+ * They should be used for every access because tables are realloc'ed a lot and
+ * precise pointer values are not persistent (when you do XML parsing; the data
+ * should be stable when you just read them). See also *_ptr() getters below.
+ * Note they return a pointer to the live tables that cross-reference data bits
+ * stored in the auxiliary list - so do not free() one without the other.
+ * These getters return NULL if "dmp" itself or the field are NULL. */
+snmp_device_id_t *
+	mibdmf_get_device_table(mibdmf_parser_t *dmp);
+
+mib2nut_info_t **
+	mibdmf_get_mib2nut_table(mibdmf_parser_t *dmp);
+
+/* Seems some such accessors are what the original snmp-ups wants for example. */
+snmp_device_id_t **
+	mibdmf_get_device_table_ptr(mibdmf_parser_t *dmp);
+
+/* Yep, it is address of the table of references to instances of the struct :) */
+mib2nut_info_t ***
+	mibdmf_get_mib2nut_table_ptr(mibdmf_parser_t *dmp);
+
+/* Load DMF XML file into structure tree at dmp->list (can append many times) */
+int
+	mibdmf_parse_file (char *file_name, mibdmf_parser_t *dmp);
+
+/* Parse a buffer with complete DMF XML (from <nut> to </nut>) */
+int
+	mibdmf_parse_str (const char *dmf_string, mibdmf_parser_t *dmp);
+
+/* Load all `*.dmf` DMF XML files from specified directory */
+int
+	mibdmf_parse_dir (char *dir_name, mibdmf_parser_t *dmp);
+
+
+/* Debugging dumpers */
+void
+	print_snmp_memory_struct (snmp_info_t *self);
+
+void
+	print_alarm_memory_struct (alarms_info_t *self);
+
+void
+	print_mib2nut_memory_struct (mib2nut_info_t *self);
+
+
+/* Helpers for string comparison (includng NULL consideration); */
+bool
+	dmf_streq (const char* x, const char* y);
+
+bool
+	dmf_strneq (const char* x, const char* y);
+
+
+/* ======================================================================= 
+ * Stuff below is for developers to tinker with DMF and alist technologies 
+ * ======================================================================= */
+
+/* Returns -1 if `dmp == NULL` */
+int
+	mibdmf_get_device_table_counter(mibdmf_parser_t *dmp);
+
+alist_t *
+	mibdmf_get_aux_list(mibdmf_parser_t *dmp);
+
+/* These return pointer to the actual pointer in the structure, so it can
+ * be validly reallocated, freed, etc. */
+alist_t **
+	mibdmf_get_aux_list_ptr(mibdmf_parser_t *dmp);
+        
+alist_t **
+	mibdmf_get_initial_list_ptr(mibdmf_parser_t *dmp);
+
+int
+	mibdmf_get_list_size(mibdmf_parser_t *dmp);
+
+int *
+	mibdmf_get_device_table_counter_ptr(mibdmf_parser_t *dmp);
+
+void
+	mibdmf_parser_new_list(mibdmf_parser_t *dmp);
+
+
+/* Create and initialize info_lkp_t, a lookup element */
+info_lkp_t *
+	info_lkp_new (int oid, const char *value);
+
+/* Destroy and NULLify the reference to alist_t, list of collections */
+void
+	info_lkp_destroy (void **self_p);
+
+
+
+/* Create alarm element */
+alarms_info_t *
+	info_alarm_new (const char *oid,
+		const char *status, const char *alarm);
+
+/* Destroy full array of alarm elements */
+void
+	info_alarm_destroy (void **self_p);
+
+void
+	alarm_info_node_handler (alist_t *list, const char **attrs);
+
+
+#ifdef WITH_DMF_LUA
+/* Create and initialize a function element */
+function_t *
+	function_new (const char *name);
+
+/* Destroy and NULLify the reference to alist_t, list of collections */
+void
+	function_destroy (void **self_p);
+        
+void
+	function_node_handler(alist_t *list, const char **attrs);
+#endif
+
+/* Same for snmp structure instances */
+snmp_info_t *
+	info_snmp_new (const char *name, int info_flags, double multiplier,
+		const char *oid, const char *dfl, unsigned long flags,
+		info_lkp_t *lookup, int *setvar
+#ifdef WITH_DMF_LUA
+,char **function
+#endif
+);
+
+void
+	info_snmp_destroy (void **self_p);
+
+void
+	snmp_info_node_handler (alist_t *list, const char **attrs);
+
+
+
+/* Same for MIB2NUT mappers */
+mib2nut_info_t *
+	info_mib2nut_new (const char *name, const char *version,
+		const char *oid_power_status, const char *oid_auto_check,
+		snmp_info_t *snmp, const char *sysOID, alarms_info_t *alarms);
+
+void
+	info_mib2nut_destroy (void **self_p);
+
+void
+	mib2nut_info_node_handler (alist_t *list, const char **attrs);
+
+
+
+
+/* Create new instance of alist_t with LOOKUP type,
+ * for storage a list of collections
+ *alist_t *
+ *	alist_new ();
+
+ * New generic list element (can be the root element) */
+alist_t *
+	alist_new (
+		const char *name,
+		void (*destroy)(void **self_p),
+		void (*new_element)(void)
+	);
+
+/* Destroy full array of generic list elements */
+void
+	alist_destroy (alist_t **self_p);
+
+/* Add a generic element at the end of the list */
+void
+	alist_append (alist_t *self, void *element);
+
+/* Return the last element of the list */
+alist_t *
+	alist_get_last_element (alist_t *self);
+
+/* Return the element which has `char* name` equal to the requested one */
+alist_t *
+	alist_get_element_by_name (alist_t *self, char *name);
+
+void
+	lookup_info_node_handler (alist_t *list, const char **attrs);
+
+char *
+	get_param_by_name (const char *name, const char **items);
+
+
+/* The guts of XML parsing: callbacks that act on an instance of mibdmf_parser_t */
+int
+	xml_dict_start_cb (
+		void *userdata, int parent,
+		const char *nspace, const char *name,
+		const char **attrs
+	);
+
+int
+	xml_end_cb (
+		void *userdata, int state, const char *nspace,
+		const char *name
+	);
+
+int
+	xml_cdata_cb(
+		void *userdata, int state, const char *cdata, size_t len
+	);
+
+
+
+unsigned long
+	compile_flags (const char **attrs);
+
+int
+	compile_info_flags (const char **attrs);
+
+#ifdef WITH_DMF_LUA
+char *
+	snmp_info_type_to_main_function_name(const char * info_type);
+#endif
+
+#define DMF_SNMP_H
+#endif /* DMF_SNMP_H */
Index: nut-2.7.4/include/str.h
===================================================================
--- nut-2.7.4.orig/include/str.h
+++ nut-2.7.4/include/str.h
@@ -120,6 +120,10 @@ int	str_to_ulong_strict(const char *stri
 int	str_to_double(const char *string, double *number, const int base);
 int	str_to_double_strict(const char *string, double *number, const int base);
 
+/* Concatenates "count" strings into a dynamically allocated object which
+ * the caller can use and must free() later on */
+char *	str_concat(size_t count, ...);
+
 #ifdef __cplusplus
 /* *INDENT-OFF* */
 }
Index: nut-2.7.4/m4/ax_lua.m4
===================================================================
--- /dev/null
+++ nut-2.7.4/m4/ax_lua.m4
@@ -0,0 +1,664 @@
+# ===========================================================================
+#          http://www.gnu.org/software/autoconf-archive/ax_lua.html
+# ===========================================================================
+#
+# SYNOPSIS
+#
+#   AX_PROG_LUA[([MINIMUM-VERSION], [TOO-BIG-VERSION], [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])]
+#   AX_LUA_HEADERS[([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])]
+#   AX_LUA_LIBS[([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])]
+#   AX_LUA_READLINE[([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])]
+#
+# DESCRIPTION
+#
+#   Detect a Lua interpreter, optionally specifying a minimum and maximum
+#   version number. Set up important Lua paths, such as the directories in
+#   which to install scripts and modules (shared libraries).
+#
+#   Also detect Lua headers and libraries. The Lua version contained in the
+#   header is checked to match the Lua interpreter version exactly. When
+#   searching for Lua libraries, the version number is used as a suffix.
+#   This is done with the goal of supporting multiple Lua installs (5.1,
+#   5.2, and 5.3 side-by-side).
+#
+#   A note on compatibility with previous versions: This file has been
+#   mostly rewritten for serial 18. Most developers should be able to use
+#   these macros without needing to modify configure.ac. Care has been taken
+#   to preserve each macro's behavior, but there are some differences:
+#
+#   1) AX_WITH_LUA is deprecated; it now expands to the exact same thing as
+#   AX_PROG_LUA with no arguments.
+#
+#   2) AX_LUA_HEADERS now checks that the version number defined in lua.h
+#   matches the interpreter version. AX_LUA_HEADERS_VERSION is therefore
+#   unnecessary, so it is deprecated and does not expand to anything.
+#
+#   3) The configure flag --with-lua-suffix no longer exists; the user
+#   should instead specify the LUA precious variable on the command line.
+#   See the AX_PROG_LUA description for details.
+#
+#   Please read the macro descriptions below for more information.
+#
+#   This file was inspired by Andrew Dalke's and James Henstridge's
+#   python.m4 and Tom Payne's, Matthieu Moy's, and Reuben Thomas's ax_lua.m4
+#   (serial 17). Basically, this file is a mash-up of those two files. I
+#   like to think it combines the best of the two!
+#
+#   AX_PROG_LUA: Search for the Lua interpreter, and set up important Lua
+#   paths. Adds precious variable LUA, which may contain the path of the Lua
+#   interpreter. If LUA is blank, the user's path is searched for an
+#   suitable interpreter.
+#
+#   If MINIMUM-VERSION is supplied, then only Lua interpreters with a
+#   version number greater or equal to MINIMUM-VERSION will be accepted. If
+#   TOO-BIG-VERSION is also supplied, then only Lua interpreters with a
+#   version number greater or equal to MINIMUM-VERSION and less than
+#   TOO-BIG-VERSION will be accepted.
+#
+#   The Lua version number, LUA_VERSION, is found from the interpreter, and
+#   substituted. LUA_PLATFORM is also found, but not currently supported (no
+#   standard representation).
+#
+#   Finally, the macro finds four paths:
+#
+#     luadir             Directory to install Lua scripts.
+#     pkgluadir          $luadir/$PACKAGE
+#     luaexecdir         Directory to install Lua modules.
+#     pkgluaexecdir      $luaexecdir/$PACKAGE
+#
+#   These paths are found based on $prefix, $exec_prefix, Lua's
+#   package.path, and package.cpath. The first path of package.path
+#   beginning with $prefix is selected as luadir. The first path of
+#   package.cpath beginning with $exec_prefix is used as luaexecdir. This
+#   should work on all reasonable Lua installations. If a path cannot be
+#   determined, a default path is used. Of course, the user can override
+#   these later when invoking make.
+#
+#     luadir             Default: $prefix/share/lua/$LUA_VERSION
+#     luaexecdir         Default: $exec_prefix/lib/lua/$LUA_VERSION
+#
+#   These directories can be used by Automake as install destinations. The
+#   variable name minus 'dir' needs to be used as a prefix to the
+#   appropriate Automake primary, e.g. lua_SCRIPS or luaexec_LIBRARIES.
+#
+#   If an acceptable Lua interpreter is found, then ACTION-IF-FOUND is
+#   performed, otherwise ACTION-IF-NOT-FOUND is preformed. If ACTION-IF-NOT-
+#   FOUND is blank, then it will default to printing an error. To prevent
+#   the default behavior, give ':' as an action.
+#
+#   AX_LUA_HEADERS: Search for Lua headers. Requires that AX_PROG_LUA be
+#   expanded before this macro. Adds precious variable LUA_INCLUDE, which
+#   may contain Lua specific include flags, e.g. -I/usr/include/lua5.1. If
+#   LUA_INCLUDE is blank, then this macro will attempt to find suitable
+#   flags.
+#
+#   LUA_INCLUDE can be used by Automake to compile Lua modules or
+#   executables with embedded interpreters. The *_CPPFLAGS variables should
+#   be used for this purpose, e.g. myprog_CPPFLAGS = $(LUA_INCLUDE).
+#
+#   This macro searches for the header lua.h (and others). The search is
+#   performed with a combination of CPPFLAGS, CPATH, etc, and LUA_INCLUDE.
+#   If the search is unsuccessful, then some common directories are tried.
+#   If the headers are then found, then LUA_INCLUDE is set accordingly.
+#
+#   The paths automatically searched are:
+#
+#     * /usr/include/luaX.Y
+#     * /usr/include/lua/X.Y
+#     * /usr/include/luaXY
+#     * /usr/local/include/luaX.Y
+#     * /usr/local/include/lua-X.Y
+#     * /usr/local/include/lua/X.Y
+#     * /usr/local/include/luaXY
+#
+#   (Where X.Y is the Lua version number, e.g. 5.1.)
+#
+#   The Lua version number found in the headers is always checked to match
+#   the Lua interpreter's version number. Lua headers with mismatched
+#   version numbers are not accepted.
+#
+#   If headers are found, then ACTION-IF-FOUND is performed, otherwise
+#   ACTION-IF-NOT-FOUND is performed. If ACTION-IF-NOT-FOUND is blank, then
+#   it will default to printing an error. To prevent the default behavior,
+#   set the action to ':'.
+#
+#   AX_LUA_LIBS: Search for Lua libraries. Requires that AX_PROG_LUA be
+#   expanded before this macro. Adds precious variable LUA_LIB, which may
+#   contain Lua specific linker flags, e.g. -llua5.1. If LUA_LIB is blank,
+#   then this macro will attempt to find suitable flags.
+#
+#   LUA_LIB can be used by Automake to link Lua modules or executables with
+#   embedded interpreters. The *_LIBADD and *_LDADD variables should be used
+#   for this purpose, e.g. mymod_LIBADD = $(LUA_LIB).
+#
+#   This macro searches for the Lua library. More technically, it searches
+#   for a library containing the function lua_load. The search is performed
+#   with a combination of LIBS, LIBRARY_PATH, and LUA_LIB.
+#
+#   If the search determines that some linker flags are missing, then those
+#   flags will be added to LUA_LIB.
+#
+#   If libraries are found, then ACTION-IF-FOUND is performed, otherwise
+#   ACTION-IF-NOT-FOUND is performed. If ACTION-IF-NOT-FOUND is blank, then
+#   it will default to printing an error. To prevent the default behavior,
+#   set the action to ':'.
+#
+#   AX_LUA_READLINE: Search for readline headers and libraries. Requires the
+#   AX_LIB_READLINE macro, which is provided by ax_lib_readline.m4 from the
+#   Autoconf Archive.
+#
+#   If a readline compatible library is found, then ACTION-IF-FOUND is
+#   performed, otherwise ACTION-IF-NOT-FOUND is performed.
+#
+# LICENSE
+#
+#   Copyright (c) 2015 Reuben Thomas <rrt@sc3d.org>
+#   Copyright (c) 2014 Tim Perkins <tprk77@gmail.com>
+#
+#   This program is free software: you can redistribute it and/or modify it
+#   under the terms of the GNU General Public License as published by the
+#   Free Software Foundation, either version 3 of the License, or (at your
+#   option) any later version.
+#
+#   This program is distributed in the hope that it will be useful, but
+#   WITHOUT ANY WARRANTY; without even the implied warranty of
+#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
+#   Public License for more details.
+#
+#   You should have received a copy of the GNU General Public License along
+#   with this program. If not, see <http://www.gnu.org/licenses/>.
+#
+#   As a special exception, the respective Autoconf Macro's copyright owner
+#   gives unlimited permission to copy, distribute and modify the configure
+#   scripts that are the output of Autoconf when processing the Macro. You
+#   need not follow the terms of the GNU General Public License when using
+#   or distributing such scripts, even though portions of the text of the
+#   Macro appear in them. The GNU General Public License (GPL) does govern
+#   all other use of the material that constitutes the Autoconf Macro.
+#
+#   This special exception to the GPL applies to versions of the Autoconf
+#   Macro released by the Autoconf Archive. When you make and distribute a
+#   modified version of the Autoconf Macro, you may extend this special
+#   exception to the GPL to apply to your modified version as well.
+
+#serial 39
+
+dnl =========================================================================
+dnl AX_PROG_LUA([MINIMUM-VERSION], [TOO-BIG-VERSION],
+dnl             [ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl =========================================================================
+AC_DEFUN([AX_PROG_LUA],
+[
+  dnl Check for required tools.
+  AC_REQUIRE([AC_PROG_GREP])
+  AC_REQUIRE([AC_PROG_SED])
+
+  dnl Make LUA a precious variable.
+  AC_ARG_VAR([LUA], [The Lua interpreter, e.g. /usr/bin/lua5.1])
+
+  dnl Find a Lua interpreter.
+  m4_define_default([_AX_LUA_INTERPRETER_LIST],
+    [lua lua5.3 lua53 lua5.2 lua52 lua5.1 lua51 lua50])
+
+  m4_if([$1], [],
+  [ dnl No version check is needed. Find any Lua interpreter.
+    AS_IF([test "x$LUA" = 'x'],
+      [AC_PATH_PROGS([LUA], [_AX_LUA_INTERPRETER_LIST], [:])])
+    ax_display_LUA='lua'
+
+    AS_IF([test "x$LUA" != 'x:'],
+      [ dnl At least check if this is a Lua interpreter.
+        AC_MSG_CHECKING([if $LUA is a Lua interpreter])
+        _AX_LUA_CHK_IS_INTRP([$LUA],
+          [AC_MSG_RESULT([yes])],
+          [ AC_MSG_RESULT([no])
+            AC_MSG_ERROR([not a Lua interpreter])
+          ])
+      ])
+  ],
+  [ dnl A version check is needed.
+    AS_IF([test "x$LUA" != 'x'],
+    [ dnl Check if this is a Lua interpreter.
+      AC_MSG_CHECKING([if $LUA is a Lua interpreter])
+      _AX_LUA_CHK_IS_INTRP([$LUA],
+        [AC_MSG_RESULT([yes])],
+        [ AC_MSG_RESULT([no])
+          AC_MSG_ERROR([not a Lua interpreter])
+        ])
+      dnl Check the version.
+      m4_if([$2], [],
+        [_ax_check_text="whether $LUA version >= $1"],
+        [_ax_check_text="whether $LUA version >= $1, < $2"])
+      AC_MSG_CHECKING([$_ax_check_text])
+      _AX_LUA_CHK_VER([$LUA], [$1], [$2],
+        [AC_MSG_RESULT([yes])],
+        [ AC_MSG_RESULT([no])
+          AC_MSG_ERROR([version is out of range for specified LUA])])
+      ax_display_LUA=$LUA
+    ],
+    [ dnl Try each interpreter until we find one that satisfies VERSION.
+      m4_if([$2], [],
+        [_ax_check_text="for a Lua interpreter with version >= $1"],
+        [_ax_check_text="for a Lua interpreter with version >= $1, < $2"])
+      AC_CACHE_CHECK([$_ax_check_text],
+        [ax_cv_pathless_LUA],
+        [ for ax_cv_pathless_LUA in _AX_LUA_INTERPRETER_LIST none; do
+            test "x$ax_cv_pathless_LUA" = 'xnone' && break
+            _AX_LUA_CHK_IS_INTRP([$ax_cv_pathless_LUA], [], [continue])
+            _AX_LUA_CHK_VER([$ax_cv_pathless_LUA], [$1], [$2], [break])
+          done
+        ])
+      dnl Set $LUA to the absolute path of $ax_cv_pathless_LUA.
+      AS_IF([test "x$ax_cv_pathless_LUA" = 'xnone'],
+        [LUA=':'],
+        [AC_PATH_PROG([LUA], [$ax_cv_pathless_LUA])])
+      ax_display_LUA=$ax_cv_pathless_LUA
+    ])
+  ])
+
+  AS_IF([test "x$LUA" = 'x:'],
+  [ dnl Run any user-specified action, or abort.
+    m4_default([$4], [AC_MSG_ERROR([cannot find suitable Lua interpreter])])
+  ],
+  [ dnl Query Lua for its version number.
+    AC_CACHE_CHECK([for $ax_display_LUA version],
+      [ax_cv_lua_version],
+      [ dnl Get the interpreter version in X.Y format. This should work for
+        dnl interpreters version 5.0 and beyond.
+        ax_cv_lua_version=[`$LUA -e '
+          -- return a version number in X.Y format
+          local _, _, ver = string.find(_VERSION, "^Lua (%d+%.%d+)")
+          print(ver)'`]
+      ])
+    AS_IF([test "x$ax_cv_lua_version" = 'x'],
+      [AC_MSG_ERROR([invalid Lua version number])])
+    AC_SUBST([LUA_VERSION], [$ax_cv_lua_version])
+    AC_SUBST([LUA_SHORT_VERSION], [`echo "$LUA_VERSION" | $SED 's|\.||'`])
+
+    dnl The following check is not supported:
+    dnl At times (like when building shared libraries) you may want to know
+    dnl which OS platform Lua thinks this is.
+    AC_CACHE_CHECK([for $ax_display_LUA platform],
+      [ax_cv_lua_platform],
+      [ax_cv_lua_platform=[`$LUA -e 'print("unknown")'`]])
+    AC_SUBST([LUA_PLATFORM], [$ax_cv_lua_platform])
+
+    dnl Use the values of $prefix and $exec_prefix for the corresponding
+    dnl values of LUA_PREFIX and LUA_EXEC_PREFIX. These are made distinct
+    dnl variables so they can be overridden if need be. However, the general
+    dnl consensus is that you shouldn't need this ability.
+    AC_SUBST([LUA_PREFIX], ['${prefix}'])
+    AC_SUBST([LUA_EXEC_PREFIX], ['${exec_prefix}'])
+
+    dnl Lua provides no way to query the script directory, and instead
+    dnl provides LUA_PATH. However, we should be able to make a safe educated
+    dnl guess. If the built-in search path contains a directory which is
+    dnl prefixed by $prefix, then we can store scripts there. The first
+    dnl matching path will be used.
+    AC_CACHE_CHECK([for $ax_display_LUA script directory],
+      [ax_cv_lua_luadir],
+      [ AS_IF([test "x$prefix" = 'xNONE'],
+          [ax_lua_prefix=$ac_default_prefix],
+          [ax_lua_prefix=$prefix])
+
+        dnl Initialize to the default path.
+        ax_cv_lua_luadir="$LUA_PREFIX/share/lua/$LUA_VERSION"
+
+        dnl Try to find a path with the prefix.
+        _AX_LUA_FND_PRFX_PTH([$LUA], [$ax_lua_prefix], [script])
+        AS_IF([test "x$ax_lua_prefixed_path" != 'x'],
+        [ dnl Fix the prefix.
+          _ax_strip_prefix=`echo "$ax_lua_prefix" | $SED 's|.|.|g'`
+          ax_cv_lua_luadir=`echo "$ax_lua_prefixed_path" | \
+            $SED "s|^$_ax_strip_prefix|$LUA_PREFIX|"`
+        ])
+      ])
+    AC_SUBST([luadir], [$ax_cv_lua_luadir])
+    AC_SUBST([pkgluadir], [\${luadir}/$PACKAGE])
+
+    dnl Lua provides no way to query the module directory, and instead
+    dnl provides LUA_PATH. However, we should be able to make a safe educated
+    dnl guess. If the built-in search path contains a directory which is
+    dnl prefixed by $exec_prefix, then we can store modules there. The first
+    dnl matching path will be used.
+    AC_CACHE_CHECK([for $ax_display_LUA module directory],
+      [ax_cv_lua_luaexecdir],
+      [ AS_IF([test "x$exec_prefix" = 'xNONE'],
+          [ax_lua_exec_prefix=$ax_lua_prefix],
+          [ax_lua_exec_prefix=$exec_prefix])
+
+        dnl Initialize to the default path.
+        ax_cv_lua_luaexecdir="$LUA_EXEC_PREFIX/lib/lua/$LUA_VERSION"
+
+        dnl Try to find a path with the prefix.
+        _AX_LUA_FND_PRFX_PTH([$LUA],
+          [$ax_lua_exec_prefix], [module])
+        AS_IF([test "x$ax_lua_prefixed_path" != 'x'],
+        [ dnl Fix the prefix.
+          _ax_strip_prefix=`echo "$ax_lua_exec_prefix" | $SED 's|.|.|g'`
+          ax_cv_lua_luaexecdir=`echo "$ax_lua_prefixed_path" | \
+            $SED "s|^$_ax_strip_prefix|$LUA_EXEC_PREFIX|"`
+        ])
+      ])
+    AC_SUBST([luaexecdir], [$ax_cv_lua_luaexecdir])
+    AC_SUBST([pkgluaexecdir], [\${luaexecdir}/$PACKAGE])
+
+    dnl Run any user specified action.
+    $3
+  ])
+])
+
+dnl AX_WITH_LUA is now the same thing as AX_PROG_LUA.
+AC_DEFUN([AX_WITH_LUA],
+[
+  AC_MSG_WARN([[$0 is deprecated, please use AX_PROG_LUA instead]])
+  AX_PROG_LUA
+])
+
+
+dnl =========================================================================
+dnl _AX_LUA_CHK_IS_INTRP(PROG, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
+dnl =========================================================================
+AC_DEFUN([_AX_LUA_CHK_IS_INTRP],
+[
+  dnl A minimal Lua factorial to prove this is an interpreter. This should work
+  dnl for Lua interpreters version 5.0 and beyond.
+  _ax_lua_factorial=[`$1 2>/dev/null -e '
+    -- a simple factorial
+    function fact (n)
+      if n == 0 then
+        return 1
+      else
+        return n * fact(n-1)
+      end
+    end
+    print("fact(5) is " .. fact(5))'`]
+  AS_IF([test "$_ax_lua_factorial" = 'fact(5) is 120'],
+    [$2], [$3])
+])
+
+
+dnl =========================================================================
+dnl _AX_LUA_CHK_VER(PROG, MINIMUM-VERSION, [TOO-BIG-VERSION],
+dnl                 [ACTION-IF-TRUE], [ACTION-IF-FALSE])
+dnl =========================================================================
+AC_DEFUN([_AX_LUA_CHK_VER],
+[
+  dnl Check that the Lua version is within the bounds. Only the major and minor
+  dnl version numbers are considered. This should work for Lua interpreters
+  dnl version 5.0 and beyond.
+  _ax_lua_good_version=[`$1 -e '
+    -- a script to compare versions
+    function verstr2num(verstr)
+      local _, _, majorver, minorver = string.find(verstr, "^(%d+)%.(%d+)")
+      if majorver and minorver then
+        return tonumber(majorver) * 100 + tonumber(minorver)
+      end
+    end
+    local minver = verstr2num("$2")
+    local _, _, trimver = string.find(_VERSION, "^Lua (.*)")
+    local ver = verstr2num(trimver)
+    local maxver = verstr2num("$3") or 1e9
+    if minver <= ver and ver < maxver then
+      print("yes")
+    else
+      print("no")
+    end'`]
+    AS_IF([test "x$_ax_lua_good_version" = "xyes"],
+      [$4], [$5])
+])
+
+
+dnl =========================================================================
+dnl _AX_LUA_FND_PRFX_PTH(PROG, PREFIX, SCRIPT-OR-MODULE-DIR)
+dnl =========================================================================
+AC_DEFUN([_AX_LUA_FND_PRFX_PTH],
+[
+  dnl Get the script or module directory by querying the Lua interpreter,
+  dnl filtering on the given prefix, and selecting the shallowest path. If no
+  dnl path is found matching the prefix, the result will be an empty string.
+  dnl The third argument determines the type of search, it can be 'script' or
+  dnl 'module'. Supplying 'script' will perform the search with package.path
+  dnl and LUA_PATH, and supplying 'module' will search with package.cpath and
+  dnl LUA_CPATH. This is done for compatibility with Lua 5.0.
+
+  ax_lua_prefixed_path=[`$1 -e '
+    -- get the path based on search type
+    local searchtype = "$3"
+    local paths = ""
+    if searchtype == "script" then
+      paths = (package and package.path) or LUA_PATH
+    elseif searchtype == "module" then
+      paths = (package and package.cpath) or LUA_CPATH
+    end
+    -- search for the prefix
+    local prefix = "'$2'"
+    local minpath = ""
+    local mindepth = 1e9
+    string.gsub(paths, "(@<:@^;@:>@+)",
+      function (path)
+        path = string.gsub(path, "%?.*$", "")
+        path = string.gsub(path, "/@<:@^/@:>@*$", "")
+        if string.find(path, prefix) then
+          local depth = string.len(string.gsub(path, "@<:@^/@:>@", ""))
+          if depth < mindepth then
+            minpath = path
+            mindepth = depth
+          end
+        end
+      end)
+    print(minpath)'`]
+])
+
+
+dnl =========================================================================
+dnl AX_LUA_HEADERS([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl =========================================================================
+AC_DEFUN([AX_LUA_HEADERS],
+[
+  dnl Check for LUA_VERSION.
+  AC_MSG_CHECKING([if LUA_VERSION is defined])
+  AS_IF([test "x$LUA_VERSION" != 'x'],
+    [AC_MSG_RESULT([yes])],
+    [ AC_MSG_RESULT([no])
+      AC_MSG_ERROR([cannot check Lua headers without knowing LUA_VERSION])
+    ])
+
+  dnl Make LUA_INCLUDE a precious variable.
+  AC_ARG_VAR([LUA_INCLUDE], [The Lua includes, e.g. -I/usr/include/lua5.1])
+
+  dnl Some default directories to search.
+  LUA_SHORT_VERSION=`echo "$LUA_VERSION" | $SED 's|\.||'`
+  m4_define_default([_AX_LUA_INCLUDE_LIST],
+    [ /usr/include/lua$LUA_VERSION \
+      /usr/include/lua-$LUA_VERSION \
+      /usr/include/lua/$LUA_VERSION \
+      /usr/include/lua$LUA_SHORT_VERSION \
+      /usr/local/include/lua$LUA_VERSION \
+      /usr/local/include/lua-$LUA_VERSION \
+      /usr/local/include/lua/$LUA_VERSION \
+      /usr/local/include/lua$LUA_SHORT_VERSION \
+    ])
+
+  dnl Try to find the headers.
+  _ax_lua_saved_cppflags=$CPPFLAGS
+  CPPFLAGS="$CPPFLAGS $LUA_INCLUDE"
+  AC_CHECK_HEADERS([lua.h lualib.h lauxlib.h luaconf.h])
+  CPPFLAGS=$_ax_lua_saved_cppflags
+
+  dnl Try some other directories if LUA_INCLUDE was not set.
+  AS_IF([test "x$LUA_INCLUDE" = 'x' &&
+         test "x$ac_cv_header_lua_h" != 'xyes'],
+    [ dnl Try some common include paths.
+      for _ax_include_path in _AX_LUA_INCLUDE_LIST; do
+        test ! -d "$_ax_include_path" && continue
+
+        AC_MSG_CHECKING([for Lua headers in])
+        AC_MSG_RESULT([$_ax_include_path])
+
+        AS_UNSET([ac_cv_header_lua_h])
+        AS_UNSET([ac_cv_header_lualib_h])
+        AS_UNSET([ac_cv_header_lauxlib_h])
+        AS_UNSET([ac_cv_header_luaconf_h])
+
+        _ax_lua_saved_cppflags=$CPPFLAGS
+        CPPFLAGS="$CPPFLAGS -I$_ax_include_path"
+        AC_CHECK_HEADERS([lua.h lualib.h lauxlib.h luaconf.h])
+        CPPFLAGS=$_ax_lua_saved_cppflags
+
+        AS_IF([test "x$ac_cv_header_lua_h" = 'xyes'],
+          [ LUA_INCLUDE="-I$_ax_include_path"
+            break
+          ])
+      done
+    ])
+
+  AS_IF([test "x$ac_cv_header_lua_h" = 'xyes'],
+    [ dnl Make a program to print LUA_VERSION defined in the header.
+      dnl TODO It would be really nice if we could do this without compiling a
+      dnl program, then it would work when cross compiling. But I'm not sure how
+      dnl to do this reliably. For now, assume versions match when cross compiling.
+
+      AS_IF([test "x$cross_compiling" != 'xyes'],
+        [ AC_CACHE_CHECK([for Lua header version],
+            [ax_cv_lua_header_version],
+            [ _ax_lua_saved_cppflags=$CPPFLAGS
+              CPPFLAGS="$CPPFLAGS $LUA_INCLUDE"
+              AC_RUN_IFELSE(
+                [ AC_LANG_SOURCE([[
+#include <lua.h>
+#include <stdlib.h>
+#include <stdio.h>
+int main(int argc, char ** argv)
+{
+  if(argc > 1) printf("%s", LUA_VERSION);
+  exit(EXIT_SUCCESS);
+}
+]])
+                ],
+                [ ax_cv_lua_header_version=`./conftest$EXEEXT p | \
+                    $SED -n "s|^Lua \(@<:@0-9@:>@\{1,\}\.@<:@0-9@:>@\{1,\}\).\{0,\}|\1|p"`
+                ],
+                [ax_cv_lua_header_version='unknown'])
+              CPPFLAGS=$_ax_lua_saved_cppflags
+            ])
+
+          dnl Compare this to the previously found LUA_VERSION.
+          AC_MSG_CHECKING([if Lua header version matches $LUA_VERSION])
+          AS_IF([test "x$ax_cv_lua_header_version" = "x$LUA_VERSION"],
+            [ AC_MSG_RESULT([yes])
+              ax_header_version_match='yes'
+            ],
+            [ AC_MSG_RESULT([no])
+              ax_header_version_match='no'
+            ])
+        ],
+        [ AC_MSG_WARN([cross compiling so assuming header version number matches])
+          ax_header_version_match='yes'
+        ])
+    ])
+
+  dnl Was LUA_INCLUDE specified?
+  AS_IF([test "x$ax_header_version_match" != 'xyes' &&
+         test "x$LUA_INCLUDE" != 'x'],
+    [AC_MSG_ERROR([cannot find headers for specified LUA_INCLUDE])])
+
+  dnl Test the final result and run user code.
+  AS_IF([test "x$ax_header_version_match" = 'xyes'], [$1],
+    [m4_default([$2], [AC_MSG_ERROR([cannot find Lua includes])])])
+])
+
+dnl AX_LUA_HEADERS_VERSION no longer exists, use AX_LUA_HEADERS.
+AC_DEFUN([AX_LUA_HEADERS_VERSION],
+[
+  AC_MSG_WARN([[$0 is deprecated, please use AX_LUA_HEADERS instead]])
+])
+
+
+dnl =========================================================================
+dnl AX_LUA_LIBS([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl =========================================================================
+AC_DEFUN([AX_LUA_LIBS],
+[
+  dnl TODO Should this macro also check various -L flags?
+
+  dnl Check for LUA_VERSION.
+  AC_MSG_CHECKING([if LUA_VERSION is defined])
+  AS_IF([test "x$LUA_VERSION" != 'x'],
+    [AC_MSG_RESULT([yes])],
+    [ AC_MSG_RESULT([no])
+      AC_MSG_ERROR([cannot check Lua libs without knowing LUA_VERSION])
+    ])
+
+  dnl Make LUA_LIB a precious variable.
+  AC_ARG_VAR([LUA_LIB], [The Lua library, e.g. -llua5.1])
+
+  AS_IF([test "x$LUA_LIB" != 'x'],
+  [ dnl Check that LUA_LIBS works.
+    _ax_lua_saved_libs=$LIBS
+    LIBS="$LIBS $LUA_LIB"
+    AC_SEARCH_LIBS([lua_load], [],
+      [_ax_found_lua_libs='yes'],
+      [_ax_found_lua_libs='no'])
+    LIBS=$_ax_lua_saved_libs
+
+    dnl Check the result.
+    AS_IF([test "x$_ax_found_lua_libs" != 'xyes'],
+      [AC_MSG_ERROR([cannot find libs for specified LUA_LIB])])
+  ],
+  [ dnl First search for extra libs.
+    _ax_lua_extra_libs=''
+
+    _ax_lua_saved_libs=$LIBS
+    LIBS="$LIBS $LUA_LIB"
+    AC_SEARCH_LIBS([exp], [m])
+    AC_SEARCH_LIBS([dlopen], [dl])
+    LIBS=$_ax_lua_saved_libs
+
+    AS_IF([test "x$ac_cv_search_exp" != 'xno' &&
+           test "x$ac_cv_search_exp" != 'xnone required'],
+      [_ax_lua_extra_libs="$_ax_lua_extra_libs $ac_cv_search_exp"])
+
+    AS_IF([test "x$ac_cv_search_dlopen" != 'xno' &&
+           test "x$ac_cv_search_dlopen" != 'xnone required'],
+      [_ax_lua_extra_libs="$_ax_lua_extra_libs $ac_cv_search_dlopen"])
+
+    dnl Try to find the Lua libs.
+    _ax_lua_saved_libs=$LIBS
+    LIBS="$LIBS $LUA_LIB"
+    AC_SEARCH_LIBS([lua_load],
+      [ lua$LUA_VERSION \
+        lua$LUA_SHORT_VERSION \
+        lua-$LUA_VERSION \
+        lua-$LUA_SHORT_VERSION \
+        lua \
+      ],
+      [_ax_found_lua_libs='yes'],
+      [_ax_found_lua_libs='no'],
+      [$_ax_lua_extra_libs])
+    LIBS=$_ax_lua_saved_libs
+
+    AS_IF([test "x$ac_cv_search_lua_load" != 'xno' &&
+           test "x$ac_cv_search_lua_load" != 'xnone required'],
+      [LUA_LIB="$ac_cv_search_lua_load $_ax_lua_extra_libs"])
+  ])
+
+  dnl Test the result and run user code.
+  AS_IF([test "x$_ax_found_lua_libs" = 'xyes'], [$1],
+    [m4_default([$2], [AC_MSG_ERROR([cannot find Lua libs])])])
+])
+
+
+dnl =========================================================================
+dnl AX_LUA_READLINE([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND])
+dnl =========================================================================
+AC_DEFUN([AX_LUA_READLINE],
+[
+  AX_LIB_READLINE
+  AS_IF([test "x$ac_cv_header_readline_readline_h" != 'x' &&
+         test "x$ac_cv_header_readline_history_h" != 'x'],
+    [ LUA_LIBS_CFLAGS="-DLUA_USE_READLINE $LUA_LIBS_CFLAGS"
+      $1
+    ],
+    [$2])
+])
Index: nut-2.7.4/m4/nut_check_libgd.m4
===================================================================
--- nut-2.7.4.orig/m4/nut_check_libgd.m4
+++ nut-2.7.4/m4/nut_check_libgd.m4
@@ -19,8 +19,25 @@ if test -z "${nut_have_libgd_seen}"; the
 	LDFLAGS="-L/usr/X11R6/lib"
 	LIBS="-lgd -lpng -lz -ljpeg -lfreetype -lm -lXpm -lX11"
 
-	AC_MSG_CHECKING(for gd version via gdlib-config)
-	GD_VERSION=`gdlib-config --version 2>/dev/null`
+	dnl By default seek in PATH
+	GDLIB_CONFIG=gdlib-config
+	AC_ARG_WITH(gdlib-config,
+		AS_HELP_STRING([@<:@--with-gdlib-config=/path/to/gdlib-config@:>@],
+			[path to program that reports GDLIB configuration]),
+	[
+		case "${withval}" in
+		"") ;;
+		yes|no)
+			AC_MSG_ERROR(invalid option --with(out)-gdlib-config - see docs/configure.txt)
+			;;
+		*)
+			GDLIB_CONFIG="${withval}"
+			;;
+		esac
+	])
+
+	AC_MSG_CHECKING(for gd version via ${GDLIB_CONFIG})
+	GD_VERSION=`${GDLIB_CONFIG} --version 2>/dev/null`
 	if test "$?" != "0" -o -z "${GD_VERSION}"; then
 		GD_VERSION="none"
 	fi
@@ -30,13 +47,13 @@ if test -z "${nut_have_libgd_seen}"; the
 	none)
 		;;
 	2.0.5 | 2.0.6 | 2.0.7)
-		AC_MSG_WARN([[gd ${GD_VERSION} detected, unable to use gdlib-config script]])
+		AC_MSG_WARN([[gd ${GD_VERSION} detected, unable to use ${GDLIB_CONFIG} script]])
 		AC_MSG_WARN([[If gd detection fails, upgrade gd or use --with-gd-includes and --with-gd-libs]])
 		;;
 	*)
-		CFLAGS="`gdlib-config --includes 2>/dev/null`"
-		LDFLAGS="`gdlib-config --ldflags 2>/dev/null`"
-		LIBS="`gdlib-config --libs 2>/dev/null`"
+		CFLAGS="`${GDLIB_CONFIG} --includes 2>/dev/null`"
+		LDFLAGS="`${GDLIB_CONFIG} --ldflags 2>/dev/null`"
+		LIBS="`${GDLIB_CONFIG} --libs 2>/dev/null`"
 		;;
 	esac
 
Index: nut-2.7.4/m4/nut_check_libnetsnmp.m4
===================================================================
--- nut-2.7.4.orig/m4/nut_check_libnetsnmp.m4
+++ nut-2.7.4/m4/nut_check_libnetsnmp.m4
@@ -13,9 +13,26 @@ if test -z "${nut_have_libnetsnmp_seen}"
 	CFLAGS_ORIG="${CFLAGS}"
 	LIBS_ORIG="${LIBS}"
 
+	dnl By default seek in PATH
+	NET_SNMP_CONFIG=net-snmp-config
+	AC_ARG_WITH(net-snmp-config,
+		AS_HELP_STRING([@<:@--with-net-snmp-config=/path/to/net-snmp-config@:>@],
+			[path to program that reports Net-SNMP configuration]),
+	[
+		case "${withval}" in
+		"") ;;
+		yes|no)
+			AC_MSG_ERROR(invalid option --with(out)-net-snmp-config - see docs/configure.txt)
+			;;
+		*)
+			NET_SNMP_CONFIG="${withval}"
+			;;
+		esac
+	])
+
 	dnl See which version of the Net-SNMP library (if any) is installed
-	AC_MSG_CHECKING(for Net-SNMP version via net-snmp-config)
-	SNMP_VERSION=`net-snmp-config --version 2>/dev/null`
+	AC_MSG_CHECKING(for Net-SNMP version via ${NET_SNMP_CONFIG})
+	SNMP_VERSION=`${NET_SNMP_CONFIG} --version 2>/dev/null`
 	if test "$?" != "0" -o -z "${SNMP_VERSION}"; then
 		SNMP_VERSION="none"
 	fi
@@ -33,7 +50,7 @@ if test -z "${nut_have_libnetsnmp_seen}"
 			CFLAGS="${withval}"
 			;;
 		esac
-	], [CFLAGS="`net-snmp-config --base-cflags 2>/dev/null`"])
+	], [CFLAGS="`${NET_SNMP_CONFIG} --base-cflags 2>/dev/null`"])
 	AC_MSG_RESULT([${CFLAGS}])
 
 	AC_MSG_CHECKING(for Net-SNMP libs)
@@ -48,7 +65,7 @@ if test -z "${nut_have_libnetsnmp_seen}"
 			LIBS="${withval}"
 			;;
 		esac
-	], [LIBS="`net-snmp-config --libs 2>/dev/null`"])
+	], [LIBS="`${NET_SNMP_CONFIG} --libs 2>/dev/null`"])
 	AC_MSG_RESULT([${LIBS}])
 
 	dnl Check if the Net-SNMP library is usable
Index: nut-2.7.4/scripts/DMF/.gitignore
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/.gitignore
@@ -0,0 +1,12 @@
+dmf-test
+dmf-reindex
+dmf-lua-test
+*.o
+*/*.json.tmp
+*/*.dmf.tmp
+*/.uptodate
+*/.validated
+*_TEST.c
+*_TEST.exe
+*-mib.c
+
Index: nut-2.7.4/scripts/DMF/Makefile.am
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/Makefile.am
@@ -0,0 +1,207 @@
+# GNU Make syntax assumed below
+
+# Be able to run without automade project e.g. `gmake -f Makefile.am dmf`
+# Note: then `bld=src=dir of makefile` is assumed below
+RM ?= /usr/bin/rm -f
+# Take compiler from PATH, may be wrapped with ccache etc.
+CC = gcc
+CPP = gcc
+CXX = g++
+
+mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
+current_dir := $(patsubst %/,%,$(dir $(mkfile_path)))
+
+srcdir ?= .
+builddir ?= .
+top_srcdir ?= ../..
+top_builddir ?= ../..
+abs_srcdir ?= $(current_dir)
+abs_builddir ?= $(current_dir)
+abs_top_srcdir ?= $(current_dir)/../..
+abs_top_builddir ?= $(current_dir)/../..
+
+AM_CFLAGS = -I$(top_builddir)/include -I$(top_srcdir)/include \
+    -I$(top_srcdir)/drivers -I$(top_srcdir)/tools/nut-scanner
+
+# Note: this causes a private build of dmf-reindex with debugging etc. which
+# may be slightly different from the distributed `nut-scanner-reindex-dmfsnmp`
+PROGS = dmf-test dmf-reindex
+PROGS_EXPERIMENTAL = dmf-lua-test
+
+DMFSNMP_SUBDIR = dmfsnmp
+DMFNUTSCAN_SUBDIR = dmfnutscan
+
+# Automake installation
+# NOTE: If you provide your own DMF files that are not generated from "*-mib.c"
+# existing sources, use some filename pattern that does not end in "-mib.dmf"!
+dmfsnmpdir = @dmfsnmpdir@
+dmfsnmp_DATA = $(wildcard $(DMFSNMP_SUBDIR)/*.dmf) dmfsnmp.xsd
+
+dmfnutscandir = @dmfnutscandir@
+dmfnutscan_DATA = $(wildcard $(DMFNUTSCAN_SUBDIR)/*.dmf) dmfnutscan.xsd
+
+EXTRA_DIST = $(dmfsnmp_DATA) $(dmfnutscan_DATA)
+
+# This does not rely on automake semantics, so this Makefile.am can be directly
+# used and changed during development without reconfiguring all of NUT sources
+DMFTEST_SRC = dmf-test.c
+EXTRA_DIST += $(DMFTEST_SRC)
+
+# First target is default
+all: progs dmf
+
+clean: clean-local
+
+CLEAN_FILES = $(PROGS) $(DMFSNMP_SUBDIR)/*.o \
+		$(DMFSNMP_SUBDIR)/*.dmf.tmp $(DMFSNMP_SUBDIR)/*.json.tmp \
+		$(DMFSNMP_SUBDIR)/*_TEST.c $(DMFSNMP_SUBDIR)/*_TEST.exe
+
+clean-local:
+	$(RM) $(CLEAN_FILES)
+
+check: check-local
+
+# Note: this is automake "if"
+if HAVE_XMLLINT
+  check-local: progs run-dmf-test dmf-validate
+else
+  check-local: progs run-dmf-test
+endif
+
+check-experimental: progs-all check-local run-dmf-lua-test
+
+# Recipes to build DMF files with the sources and tools we have.
+# NOTE: At a later stage, when the legacy ways are deprecated and %=*-mib.c are
+# removed, these DMF files would become redistributable contents by themselves.
+# TODO: add tests whether we can build this (pycparser available)
+$(DMFSNMP_SUBDIR)/%-mib.dmf: $(abs_top_srcdir)/drivers/%-mib.c dmfify-mib.sh jsonify-mib.py xmlify-mib.py
+	mkdir -p $(@D)
+	if $(abs_srcdir)/dmfify-mib.sh --sanity-check; then \
+	    cd $(@D) && $(abs_srcdir)/dmfify-mib.sh $< || exit; \
+	else echo "NOT REBUILDING DMF files due to absence of prerequisites like Python or pycparser" >&2; \
+	fi
+
+# We can not touch read-only source dirs (e.g. during distcheck) so make sure
+# that we use builddir for this final touch. The DMF files themselves may be
+# prebuilt and distributed as source, the gmake VPATH should figure that out.
+# This may cause harmless "circular dependency" notices during in-tree builds.
+# However, the dmf-reindexer is currently hardcoded to use only one directory,
+# so we copy stuff below just in case (if needed).
+$(DMFSNMP_SUBDIR)/.uptodate: $(builddir)/$(DMFSNMP_SUBDIR)/.uptodate
+$(builddir)/$(DMFSNMP_SUBDIR)/.uptodate: $(addprefix $(DMFSNMP_SUBDIR)/,$(patsubst %.c,%.dmf,$(notdir $(wildcard $(abs_top_srcdir)/drivers/*-mib.c))))
+	@echo "DMFSNMP_SUBDIR is now up to date, made of: $^" >&2
+	mkdir -p $(@D)
+	@if [ "$(abs_builddir)" != "$(abs_srcdir)" ]; then \
+		for F in "$(abs_srcdir)/$(DMFSNMP_SUBDIR)/"*.dmf ; do \
+			B="`basename "$$F"`"; \
+			[ "$$B" = '*.dmf' ] && exit 0 ; \
+			N="$(abs_builddir)/$(DMFSNMP_SUBDIR)/$$B"; \
+			[ -s "$$F" ] && [ ! -s "$$N" ] && \
+				echo "  CP    $$F => $$N" >&2 && \
+				cp -f "$$F" "$$N" || exit ; \
+		done; \
+	fi
+	touch $@
+
+# The recipe assumes we have separate opening and closing lines in the DMF file
+# just generated by reindexer (the "<?xml...>\n<nut>" and "</nut>" lines) and a
+# randomly ordered set of mib2nut lines that we want consistent (to get no
+# `git diff` complaints).
+# TODO: The proper solution (sort, uniq) should be in the C code!
+$(DMFNUTSCAN_SUBDIR)/dmfnutscan-snmp.dmf: $(DMFSNMP_SUBDIR)/.uptodate dmf-reindex
+	mkdir -p $(@D)
+	$(abs_builddir)/dmf-reindex > $@.tmp
+	( egrep -v '^$$|\<mib2nut ' "$@.tmp" | head -2 ; \
+	  grep '<mib2nut ' "$@.tmp" | sort | uniq ; \
+	  egrep -v '^$$|\<mib2nut ' "$@.tmp" | tail -1 ; \
+	) > $@
+	@sort "$@.tmp" | egrep -v '^$$' | uniq > "$@.tmp1" ; \
+	    sort "$@" | egrep -v '^$$' | uniq > "$@.tmp2" ; \
+	  diff "$@.tmp1" "$@.tmp2" >/dev/null \
+	|| { echo "FAILED to sort generated $@ without losses!" >&2; \
+	     rm -f "$@.tmp"* ; exit 1; } ; exit 0
+	rm -f "$@.tmp"*
+
+$(DMFNUTSCAN_SUBDIR)/.uptodate: $(builddir)/$(DMFNUTSCAN_SUBDIR)/.uptodate
+$(builddir)/$(DMFNUTSCAN_SUBDIR)/.uptodate: $(DMFNUTSCAN_SUBDIR)/dmfnutscan-snmp.dmf
+	@echo "DMFNUTSCAN_SUBDIR is now up to date" >&2
+	mkdir -p $(@D)
+	touch $@
+
+# The *_DATA rules above refer to these strings, satisfy them
+$(DMFSNMP_SUBDIR)/*.dmf: $(DMFSNMP_SUBDIR)/.uptodate
+$(DMFNUTSCAN_SUBDIR)/*.dmf: $(DMFNUTSCAN_SUBDIR)/.uptodate
+
+# Validation requires xmllint, which we have if we succeed with asciidoc usage
+$(DMFSNMP_SUBDIR)/.validated: $(builddir)/$(DMFSNMP_SUBDIR)/.validated
+$(builddir)/$(DMFSNMP_SUBDIR)/.validated: $(builddir)/$(DMFSNMP_SUBDIR)/.uptodate
+	@cd $(@D) && for F in *.dmf ; do \
+	    echo " XMLLINT  $$F"; \
+	    $(XMLLINT) --noout --schema $(abs_srcdir)/dmfsnmp.xsd "$$F" || exit; \
+	done
+
+# TODO: Maybe per-DMF *.dmf.validated files would be better?
+$(DMFNUTSCAN_SUBDIR)/.validated: $(builddir)/$(DMFNUTSCAN_SUBDIR)/.validated
+$(builddir)/$(DMFNUTSCAN_SUBDIR)/.validated: $(builddir)/$(DMFNUTSCAN_SUBDIR)/.uptodate
+	@ERRCODE=0; cd $(@D) && for F in *.dmf ; do \
+	    echo " XMLLINT  $$F"; \
+	    $(XMLLINT) --noout --schema $(abs_srcdir)/dmfnutscan.xsd "$$F" || ERRCODE=1; \
+	done; exit $$ERRCODE
+
+# Make sure all generated DMFs are up to date vs. C sources and recipes
+dmf-uptodate: $(DMFSNMP_SUBDIR)/.uptodate $(DMFNUTSCAN_SUBDIR)/.uptodate
+
+# Make sure all present DMFs are valid vs. XSD schema
+dmf-validate: dmf-uptodate $(DMFSNMP_SUBDIR)/.validated $(DMFNUTSCAN_SUBDIR)/.validated
+
+# Note: this is automake "if"
+if HAVE_XMLLINT
+  dmf: dmf-validate
+else
+  dmf: dmf-uptodate
+endif
+
+if HAVE_DMF_LUA
+ AM_CFLAGS += -DWITH_DMF_LUA $(LUA_INCLUDE)
+endif
+
+progs: $(PROGS)
+
+progs-all: $(PROGS) $(PROGS_EXPERIMENTAL)
+
+# Note: These recipes are explicit so they can be built without configuring NUT
+dmf-test: $(DMFTEST_SRC) $(top_srcdir)/common/dmfsnmp.c $(top_srcdir)/common/str.c $(top_srcdir)/common/common.c
+	$(CC) -ggdb -std=c11 -std=gnu99 -Werror -Wall -pedantic -Wc++-compat \
+	-D_FORTIFY_SOURCE=2 -O -fstack-protector \
+	-lltdl $(AM_CFLAGS) \
+	$(LUA_LIB) $(LUA_INCLUDE) \
+	-DWITH_DMFMIB -DWITH_DMF_LUA -DDEBUG=1 -DDEFAULT_DMFSNMP_DIR_OVERRIDE="\"$(abs_top_builddir)/scripts/DMF/$(DMFSNMP_SUBDIR)\"" \
+	-o $@ $^
+
+dmf-reindex: $(top_srcdir)/tools/nut-scanner/nut-scanner-reindex-dmfsnmp.c $(top_srcdir)/common/dmfsnmp.c $(top_srcdir)/common/common.c $(top_srcdir)/common/str.c 
+	$(CC) -ggdb -std=c11 -std=gnu99 -Werror -Wall -pedantic -Wc++-compat \
+	-D_FORTIFY_SOURCE=2 -O -fstack-protector \
+	-lltdl $(AM_CFLAGS) \
+	$(LUA_LIB) $(LUA_INCLUDE) \
+	-DWITH_DMFMIB -DWITH_DMF_LUA -DDMFREINDEXER_MAKECHECK=1 -DDEBUG=1 \
+	-DDEFAULT_DMFSNMP_DIR_OVERRIDE="\"$(abs_top_builddir)/scripts/DMF/$(DMFSNMP_SUBDIR)\"" \
+	-o $@ $^
+
+dmf-lua-test: $(DMFTEST_SRC) $(top_srcdir)/common/dmfsnmp.c $(top_srcdir)/common/str.c $(top_srcdir)/common/common.c
+	$(CC) -ggdb -std=c11 -std=gnu99 -Werror -Wall -pedantic -Wc++-compat \
+	-D_FORTIFY_SOURCE=2 -O -fstack-protector \
+	-lltdl $(AM_CFLAGS) \
+	$(LUA_LIB) $(LUA_INCLUDE) \
+	-DWITH_DMFMIB -DWITH_DMF_LUA -DDEBUG=1 -DDEFAULT_DMFSNMP_DIR_OVERRIDE="\"$(abs_top_builddir)/scripts/DMF/$(DMFSNMP_SUBDIR)\"" \
+	-o $@ $^
+
+# Note: DMF dirs are currently hardcoded (above) so no big need to "cd" anywhere
+# But some data should be prepopulated there before we run leak tests etc.
+run-dmf-test: dmf-test $(DMFSNMP_SUBDIR)/.uptodate
+	cd $(DMFSNMP_SUBDIR) && valgrind --leak-check=full $(abs_builddir)/$<
+
+run-dmf-reindex: dmf-reindex $(DMFSNMP_SUBDIR)/.uptodate
+	cd $(DMFSNMP_SUBDIR) && valgrind --leak-check=full $(abs_builddir)/$<
+
+run-dmf-lua-test: dmf-lua-test $(DMFSNMP_SUBDIR)/.uptodate
+	cd $(DMFSNMP_SUBDIR) && valgrind --leak-check=full --track-origins=yes $(abs_builddir)/$<
Index: nut-2.7.4/scripts/DMF/README-NUT-DMF.txt
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/README-NUT-DMF.txt
@@ -0,0 +1,4 @@
+= DMF Docs referral
+
+See `$NUTSRC/docs/nut-dmf.txt` for details about DMF format, helper tools and
+implementation.
\ No newline at end of file
Index: nut-2.7.4/scripts/DMF/b
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/b
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+make run-dmf-test
Index: nut-2.7.4/scripts/DMF/compile
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/compile
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+make run-dmf-lua-test
Index: nut-2.7.4/scripts/DMF/dmf-test.c
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmf-test.c
@@ -0,0 +1,95 @@
+/* dmf-test.c - Network UPS Tools XML-driver-loader self-test program
+ *
+ * This file implements procedures to manipulate and load MIB structures
+ * for NUT snmp-ups drivers dynamically, rather than as statically linked
+ * files of the past.
+ *
+ * Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+ * Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+ * Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+//#include <neon/ne_xml.h>
+#include <errno.h>
+#include <dirent.h>
+#include <assert.h>
+
+#include "dmf.h"
+
+/* The test involves generation of DMF and comparison to existing data.
+   As a random pick, we use powerware-mib.c "as is" (with structures).
+   This causes macro-redefinition conflict (and -Werror dies on it).
+*/
+#undef PACKAGE_VERSION
+#undef PACKAGE_NAME
+#undef PACKAGE_STRING
+#undef PACKAGE_TARNAME
+#undef PACKAGE_BUGREPORT
+#include "eaton-mib.c"
+
+int
+main ()
+{
+	mibdmf_parser_t * dmp = mibdmf_parser_new();
+	if (!dmp) {
+		fprintf(stderr,"FATAL: Can not allocate the DMF parsing structures\n");
+		return ENOMEM;
+	}
+
+#ifdef DEFAULT_DMFSNMP_DIR_OVERRIDE
+#ifdef DEFAULT_DMFSNMP_DIR
+#undef DEFAULT_DMFSNMP_DIR
+#endif
+#define DEFAULT_DMFSNMP_DIR DEFAULT_DMFSNMP_DIR_OVERRIDE
+#endif
+
+#ifdef DEFAULT_DMFSNMP_DIR
+	mibdmf_parse_dir(DEFAULT_DMFSNMP_DIR, dmp);
+#else
+	mibdmf_parse_dir("./", dmp);
+#endif
+
+	/*Debugging
+	 *mib2nut_info_t *m2n = get_mib2nut_table();
+	 *print_mib2nut_memory_struct(m2n + 6);
+	 *print_mib2nut_memory_struct(&pxgx_ups); */
+	alist_t **aux = mibdmf_get_initial_list_ptr(dmp);
+	alist_t *element;
+	int iterator = 0;
+
+	/* printf("=== DMF-Test: Loaded C structures (sample for 'eaton_epdu'):\n\n"); */
+	if(aux){
+		while(!(element = alist_get_element_by_name(aux[iterator], "eaton_marlin"))&&(iterator < mibdmf_get_list_size(dmp)))
+			iterator++;
+        
+		if(element)
+			print_mib2nut_memory_struct((mib2nut_info_t *) element->values[0]);
+	/*printf("\n\n");
+	 *printf("=== DMF-Test: Original C structures (sample for 'eaton_epdu'):\n\n");
+	 *print_mib2nut_memory_struct(&eaton_marlin);
+	 *End debugging */
+
+		printf("=== DMF-Test: Freeing data...\n\n");
+		mibdmf_parser_destroy(&dmp);
+
+		printf("=== DMF-Test: All done\n\n");
+		return 0;
+	}
+	printf("**** Error, no DMF data loaded\n");
+	mibdmf_parser_destroy(&dmp);
+	return -1;
+}
Index: nut-2.7.4/scripts/DMF/dmfify-mib.sh
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfify-mib.sh
@@ -0,0 +1,98 @@
+#!/bin/bash
+
+# This wrapper around Python scripts uses them to generate XML DMF files
+# from existing NUT *-mib.c sources with legacy mapping structures.
+# It expects to be located in (executed from) $NUT_SOURCEDIR/scripts/DMF
+#
+#   Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+#   Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+#
+
+# A bashism, important for us here
+set -o pipefail
+
+# Strings must verbatim match the XSD (no trailing slash etc.)
+XSD_DMFSNMP_VERSION='1.0.0'
+XSD_DMFSNMP_XMLNS='http://www.networkupstools.org/dmf/snmp/snmp-ups'
+
+# Where to look for python scripts - same dir as this shell script
+_SCRIPT_DIR="`cd $(dirname "$0") && pwd`" || \
+    _SCRIPT_DIR="./" # Fallback can fail
+
+# TODO: The PYTHON and CC variables currently assume pathnames (no args)
+[ -n "${PYTHON-}" ] || PYTHON="`which python2.7`"
+[ -n "${PYTHON}" ] && [ -x "$PYTHON" ] || { echo "ERROR: Can not find Python 2.7: '$PYTHON'" >&2; exit 2; }
+
+# The pycparser uses GCC-compatible flags
+[ -n "${CC-}" ] || CC="`which gcc`"
+[ -n "${CC}" ] && [ -x "$CC" ] || { echo "ERROR: Can not find (G)CC: '$CC'" >&2; exit 2; }
+export CC
+
+# Here we only check basic prerequisites (a module provided with Python 2.7
+# and an extra module that end-user is expected to pre-install per README).
+# Other included modules will be checked when scripts are executed.
+echo "INFO: Validating some basics about your Python installation"
+for PYMOD in argparse pycparser json; do
+    "${PYTHON}" -c "import $PYMOD; print $PYMOD" || \
+        { echo "ERROR: Can not use Python module '$PYMOD'" >&2; exit 2; }
+done
+
+if [ "$1" = "--sanity-check" ]; then
+    # We are alive by now, so checks above have succeeded
+    exit 0
+fi
+
+dmfify_c_file() {
+    # One argument: path to a `*-mib.c` filename
+    local cmib="$1"
+    local mib="$(basename "${cmib}" .c)"
+
+    [ -n "${cmib}" ] && [ -s "${cmib}" ] || \
+        { echo "ERROR: dmfify_c_file() can not process argument '${cmib}'!" >&2
+          return 2; }
+
+    echo "INFO: Parsing '${cmib}'; do not worry if 'missing setvar' warnings pop up..."
+
+    ( "${PYTHON}" "${_SCRIPT_DIR}"/jsonify-mib.py --test "${cmib}" > "${mib}.json.tmp" && \
+      "${PYTHON}" "${_SCRIPT_DIR}"/xmlify-mib.py < "${mib}.json.tmp" > "${mib}.dmf.tmp" ) \
+    && [ -s "${mib}.dmf.tmp" ] \
+    || { ERRCODE=$?
+        echo "ERROR: Could not parse '${cmib}' into '${mib}.dmf'" >&2
+        echo "       You can inspect a copy of the intermediate result in '${mib}.json.tmp', '${mib}.dmf.tmp' and '${mib}_TEST.c'" >&2
+        return $ERRCODE; }
+
+    sed 's,^<nut>,\<nut version="'"${XSD_DMFSNMP_VERSION}"'" xmlns="'"${XSD_DMFSNMP_XMLNS}"'"\>,' < "${mib}.dmf.tmp" > "${mib}.dmf" \
+    || { ERRCODE=$?
+        echo "ERROR: Could not fix headers of '${mib}.dmf'" >&2
+        echo "       You can inspect a copy of the intermediate result in '${mib}.json.tmp', '${mib}.dmf.tmp' and '${mib}_TEST.c'" >&2
+        return $ERRCODE; }
+
+#    mv -f "${mib}.dmf.tmp" "${mib}.dmf" \
+#    && rm -f "${mib}_TEST"{.c,.exe} "${mib}.json.tmp"
+}
+
+dmfify_NUT_drivers() {
+    local i=0
+    for cmib in ../../../drivers/*-mib.c ../../drivers/*-mib.c; do
+        [ -s "${cmib}" ] || \
+            { echo "ERROR: File not found or is empty: '${cmib}'" >&2; continue; }
+        dmfify_c_file "${cmib}" || return
+        i=$(($i+1))
+    done
+    [ "$i" = 0 ] && echo "ERROR: No files processed" >&2 && return 2
+    echo "INFO: Processed $i files OK" >&2
+    return 0
+}
+
+if [[ "$#" -gt 0 ]]; then
+    echo "INFO: Got some arguments, assuming they are NUT filenames for parsing"
+    while [[ "$#" -gt 0 ]]; do
+        dmfify_c_file "$1" || exit
+        shift
+    done
+else
+    echo "INFO: No arguments provided, will try to parse all NUT drivers"
+    dmfify_NUT_drivers || exit
+fi
+
+echo "OK - All done"
Index: nut-2.7.4/scripts/DMF/dmfnutscan.xsd
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfnutscan.xsd
@@ -0,0 +1,38 @@
+<?xml version="1.0"?>
+<xs:schema
+ version="1.0.0"
+ attributeFormDefault="unqualified" elementFormDefault="qualified"
+ xmlns:xs="http://www.w3.org/2001/XMLSchema"
+ targetNamespace="http://www.networkupstools.org/dmf/snmp/nutscan"
+>
+<!--
+  // This is an XSD schema for NUT DMF files intended for nut-scanner usage
+  // with SNMP MIB references. Technically it is a very small subset of DMF
+  // schema for snmp-ups.
+  // Copyright (C) 2016 by Eaton
+  // Authors:
+  //    Jim Klimov <EvgenyKlimov@eaton.com>
+  //    Carlos Dominguez <CarlosDominguez@eaton.com>
+  //    Michal Vyskocil <MichalVyskocil@eaton.com>
+  // Adapted from markup generated from de-facto DMF files with online tool:
+  //    http://www.freeformatter.com/xsd-generator.html
+  -->
+  <xs:element name="nut">
+    <xs:complexType>
+      <xs:sequence>
+        <xs:element name="mib2nut" maxOccurs="unbounded" minOccurs="0">
+          <xs:complexType>
+            <xs:simpleContent>
+              <xs:extension base="xs:string">
+                <xs:attribute type="xs:string" name="auto_check" use="optional"/>
+                <xs:attribute type="xs:string" name="mib_name" use="required"/>
+                <xs:attribute type="xs:string" name="oid" use="optional"/>
+              </xs:extension>
+            </xs:simpleContent>
+          </xs:complexType>
+        </xs:element>
+      </xs:sequence>
+      <xs:attribute name="version" type="xs:string" />
+    </xs:complexType>
+  </xs:element>
+</xs:schema>
Index: nut-2.7.4/scripts/DMF/dmfnutscan/dmfnutscan-snmp.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfnutscan/dmfnutscan-snmp.dmf
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/nutscan">
+	<mib2nut auto_check="1.3.6.1.2.1.33.1.1.1.0" mib_name="ietf" oid=".1.3.6.1.2.1.33" />
+	<mib2nut auto_check=".1.3.6.1.4.1.13742.1.1.12.0" mib_name="raritan" oid=".1.3.6.1.4.1.13742" />
+	<mib2nut auto_check=".1.3.6.1.4.1.13742.6.3.2.1.1.3.1" mib_name="raritan-px2" oid=".1.3.6.1.4.1.13742.6" />
+	<mib2nut auto_check=".1.3.6.1.4.1.17373.3.1.1.0" mib_name="aphel_genesisII" oid=".1.3.6.1.4.1.17373" />
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched1" oid=".1.3.6.1.4.1.20677.1" />
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched2" oid=".1.3.6.1.4.1.20677.2" />
+	<mib2nut auto_check=".1.3.6.1.4.1.232.165.3.1.1.0" mib_name="cpqpower" oid=".1.3.6.1.4.1.232.165.3" />
+	<mib2nut auto_check=".1.3.6.1.4.1.2947.1.1.2.0" mib_name="bestpower" />
+	<mib2nut auto_check=".1.3.6.1.4.1.318.1.1.1.1.1.1.0" mib_name="apcc" />
+	<mib2nut auto_check=".1.3.6.1.4.1.3808.1.1.1.1.1.1.0" mib_name="cyberpower" oid=".1.3.6.1.4.1.3808" />
+	<mib2nut auto_check=".1.3.6.1.4.1.4555.1.1.1.1.1.1.0" mib_name="netvision" oid=".1.3.6.1.4.1.4555.1.1.1" />
+	<mib2nut auto_check=".1.3.6.1.4.1.4779.1.3.5.2.1.24.1" mib_name="baytech" />
+	<mib2nut auto_check=".1.3.6.1.4.1.534.10.2.1.2.0" mib_name="eaton_ats" oid=".1.3.6.1.4.1.705.1" />
+	<mib2nut auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pw" oid=".1.3.6.1.4.1.534.1" />
+	<mib2nut auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pxgx_ups" oid=".1.3.6.1.4.1.534.2.12" />
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" mib_name="aphel_revelation" oid=".1.3.6.1.4.1.534.6.6.6" />
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.0" mib_name="eaton_epdu" oid=".1.3.6.1.4.1.534.6.6.7" />
+	<mib2nut auto_check=".1.3.6.1.4.1.705.1.1.1.0" mib_name="mge" oid=".1.3.6.1.4.1.705.1" />
+	<mib2nut auto_check="" mib_name="apc_ats" oid=".1.3.6.1.4.1.318.1.3.11" />
+	<mib2nut auto_check="" mib_name="delta_ups" oid=".1.3.6.1.4.1.2254.2.4" />
+	<mib2nut auto_check="" mib_name="huawei" oid=".1.3.6.1.4.1.8072.3.2.10" />
+	<mib2nut auto_check="" mib_name="ietf" oid=".1.3.6.1.4.1.850.1" />
+	<mib2nut auto_check="" mib_name="xppc" oid=".1.3.6.1.4.1.935" />
+</nut>
Index: nut-2.7.4/scripts/DMF/dmfsnmp.xsd
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp.xsd
@@ -0,0 +1,138 @@
+<?xml version="1.0"?>
+<xs:schema
+ version="1.0.0"
+ attributeFormDefault="unqualified" elementFormDefault="qualified"
+ xmlns:xs="http://www.w3.org/2001/XMLSchema"
+ targetNamespace="http://www.networkupstools.org/dmf/snmp/snmp-ups"
+>
+<!--
+  // This is an XSD schema for NUT DMF files intended for snmp-ups usage
+  // with SNMP MIB references.
+  // Copyright (C) 2016 by Eaton
+  // Authors:
+  //    Jim Klimov <EvgenyKlimov@eaton.com>
+  //    Carlos Dominguez <CarlosDominguez@eaton.com>
+  //    Michal Vyskocil <MichalVyskocil@eaton.com>
+  // Adapted from markup generated from de-facto DMF files with online tool:
+  //    http://www.freeformatter.com/xsd-generator.html
+  // as a superset of all DMFs we have initially generated from *-mib.c files.
+  -->
+  <xs:element name="nut">
+    <xs:complexType>
+      <xs:sequence> 
+        <xs:element name="lookup" maxOccurs="unbounded" minOccurs="0">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="lookup_info" maxOccurs="unbounded" minOccurs="0">
+                <xs:complexType>
+                  <xs:simpleContent>
+                    <xs:extension base="xs:string">
+                      <xs:attribute type="xs:string" name="oid" use="optional"/>
+                      <xs:attribute type="xs:string" name="value" use="optional"/>
+                    </xs:extension>
+                  </xs:simpleContent>
+                </xs:complexType>
+              </xs:element>
+            </xs:sequence>
+            <xs:attribute type="xs:string" name="name" use="optional"/>
+          </xs:complexType>
+        </xs:element>
+        <xs:element name="alarm" maxOccurs="unbounded" minOccurs="0">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="info_alarm" maxOccurs="unbounded" minOccurs="0">
+                <xs:complexType>
+                  <xs:simpleContent>
+                    <xs:extension base="xs:string">
+                      <xs:attribute type="xs:string" name="alarm" use="optional"/>
+                      <xs:attribute type="xs:string" name="oid" use="optional"/>
+                      <xs:attribute type="xs:string" name="status" use="optional"/>
+                    </xs:extension>
+                  </xs:simpleContent>
+                </xs:complexType>
+              </xs:element>
+            </xs:sequence>
+            <xs:attribute type="xs:string" name="name"/>
+          </xs:complexType>
+        </xs:element>
+        <xs:element name="functions" maxOccurs="1" minOccurs="0">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="function" maxOccurs="unbounded" minOccurs="0">
+                <xs:complexType>
+                  <xs:simpleContent>
+                    <xs:extension base="xs:string">
+                      <xs:attribute type="xs:string" name="name" use="optional"/>
+                    </xs:extension>
+                  </xs:simpleContent>
+                </xs:complexType>
+              </xs:element>
+            </xs:sequence>
+            <xs:attribute type="xs:string" name="name"/>
+          </xs:complexType>
+        </xs:element>
+        <xs:element name="snmp" maxOccurs="unbounded" minOccurs="0">
+          <xs:complexType>
+            <xs:sequence>
+              <xs:element name="snmp_info" maxOccurs="unbounded" minOccurs="0">
+                <xs:complexType>
+                  <xs:simpleContent>
+                    <xs:extension base="xs:string">
+                      <xs:attribute type="xs:string" name="absent" use="optional"/>
+                      <xs:attribute type="xs:string" name="default" use="optional"/>
+                      <xs:attribute type="xs:string" name="flag_ok" use="optional"/>
+                      <xs:attribute type="xs:string" name="name" use="optional"/>
+                      <xs:attribute type="xs:string" name="oid" use="optional"/>
+                      <xs:attribute type="xs:string" name="static" use="optional"/>
+                      <xs:attribute type="xs:string" name="string" use="optional"/>
+                      <xs:attribute type="xs:string" name="positive" use="optional"/>
+                      <xs:attribute type="xs:string" name="unique" use="optional"/>
+                      <xs:attribute type="xs:float" name="multiplier" use="optional"/>
+                      <xs:attribute type="xs:string" name="power_status" use="optional"/>
+                      <xs:attribute type="xs:string" name="battery_status" use="optional"/>
+                      <xs:attribute type="xs:string" name="calibration" use="optional"/>
+                      <xs:attribute type="xs:string" name="replace_battery" use="optional"/>
+                      <xs:attribute type="xs:string" name="output_1_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="output_3_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="input_1_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="input_3_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="bypass_1_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="bypass_3_phase" use="optional"/>
+                      <xs:attribute type="xs:string" name="outlet" use="optional"/>
+                      <xs:attribute type="xs:string" name="outlet_group" use="optional"/>
+                      <xs:attribute type="xs:string" name="writable" use="optional"/>
+                      <xs:attribute type="xs:string" name="lookup" use="optional"/>
+                      <xs:attribute type="xs:string" name="setvar" use="optional"/>
+                      <xs:attribute type="xs:string" name="command" use="optional"/>
+                      <xs:attribute type="xs:string" name="type_daisy" use="optional"/>
+                      <xs:attribute type="xs:string" name="function" use="optional"/>
+                    </xs:extension>
+                  </xs:simpleContent>
+                </xs:complexType>
+              </xs:element>
+            </xs:sequence>
+            <xs:attribute type="xs:string" name="name"/>
+          </xs:complexType>
+        </xs:element>
+        <xs:element name="mib2nut" maxOccurs="unbounded" minOccurs="1">
+          <xs:complexType>
+            <xs:simpleContent>
+              <xs:extension base="xs:string">
+                <xs:attribute type="xs:string" name="alarms_info" use="optional"/>
+                <xs:attribute type="xs:string" name="auto_check" use="optional"/>
+                <xs:attribute type="xs:string" name="mib_name" use="optional"/>
+                <xs:attribute type="xs:string" name="name" use="required"/>
+                <xs:attribute type="xs:string" name="oid" use="optional"/>
+                <xs:attribute type="xs:string" name="power_status" use="optional"/>
+                <xs:attribute type="xs:string" name="snmp_info" use="optional"/>
+                <xs:attribute type="xs:string" name="version" use="optional"/>
+              </xs:extension>
+            </xs:simpleContent>
+          </xs:complexType>
+        </xs:element>
+      </xs:sequence>
+      <xs:attribute name="version" type="xs:string" />
+    </xs:complexType>
+  </xs:element>
+</xs:schema>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/K20compaq-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/K20compaq-mib.dmf
@@ -0,0 +1,130 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="cpqpower_outlet_switchability_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="yes"/>
+		<lookup_info oid="3" value="yes"/>
+		<lookup_info oid="4" value="yes"/>
+	</lookup>
+	<lookup name="cpqpower_outlet_status_info">
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="off"/>
+		<lookup_info oid="3" value="pendingOff"/>
+		<lookup_info oid="4" value="pendingOn"/>
+		<lookup_info oid="5" value="unknown"/>
+	</lookup>
+	<lookup name="cpqpower_mode_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="normal"/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value=""/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="parallel capacity"/>
+		<lookup_info oid="9" value="parallel redundancy"/>
+		<lookup_info oid="10" value="high efficiency"/>
+	</lookup>
+	<lookup name="cpqpower_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="OL BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value="OL"/>
+		<lookup_info oid="10" value="OL"/>
+	</lookup>
+	<lookup name="cpqpower_test_res_info">
+		<lookup_info oid="1" value="Unknown"/>
+		<lookup_info oid="2" value="Done and passed"/>
+		<lookup_info oid="3" value="Done and error"/>
+		<lookup_info oid="4" value="In progress"/>
+		<lookup_info oid="5" value="Not supported"/>
+		<lookup_info oid="6" value="Inhibited"/>
+		<lookup_info oid="7" value="Scheduled"/>
+	</lookup>
+	<lookup name="cpqpower_battery_abm_status">
+		<lookup_info oid="1" value="CHRG"/>
+		<lookup_info oid="2" value="DISCHRG"/>
+	</lookup>
+	<snmp name="cpqpower_mib">
+		<snmp_info default="HP/Compaq" multiplier="128.0" name="ups.mfr" oid=".1.3.6.1.4.1.232.165.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="SNMP UPS" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.232.165.3.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.232.165.1.2.7.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.232.165.3.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.232.165.3.4.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower" oid=".1.3.6.1.4.1.232.165.3.9.3.0" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L1.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L2.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L3.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="OFF" lookup="cpqpower_pwr_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.232.165.3.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_battery_abm_status" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.232.165.3.2.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_mode_info" multiplier="128.0" name="ups.type" oid=".1.3.6.1.4.1.232.165.3.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_test_res_info" multiplier="128.0" name="ups.test.result" oid=".1.3.6.1.4.1.232.165.3.7.2.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="20" flag_ok="yes" multiplier="6.0" name="ups.delay.shutdown" oid=".1.3.6.1.4.1.232.165.3.8.1.0" string="yes" writable="yes"/>
+		<snmp_info absent="yes" default="30" flag_ok="yes" multiplier="6.0" name="ups.delay.start" oid=".1.3.6.1.4.1.232.165.3.8.2.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.shutdown" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.start" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.232.165.3.6.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.low" oid=".1.3.6.1.4.1.232.165.3.6.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.high" oid=".1.3.6.1.4.1.232.165.3.6.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.232.165.3.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime" oid=".1.3.6.1.4.1.232.165.3.2.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.232.165.3.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.232.165.3.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.232.165.3.3.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.232.165.3.3.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="3.0" name="input.voltage.nominal" oid=".1.3.6.1.4.1.232.165.3.9.2.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.3"/>
+		<snmp_info default="" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.3"/>
+		<snmp_info default="" multiplier="0.1" name="input.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4" output_1_phase="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.3"/>
+		<snmp_info default="" multiplier="1.0" name="input.quality" oid=".1.3.6.1.4.1.232.165.3.3.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid=".1.3.6.1.4.1.232.165.3.4.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.232.165.3.4.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="3.0" name="output.frequency.nominal" oid=".1.3.6.1.4.1.232.165.3.9.4.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="3.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.232.165.3.9.1.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.232.165.3.10.1.0" power_status="yes"/>
+		<snmp_info default="yes" lookup="cpqpower_outlet_switchability_info" multiplier="3.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.232.165.3.10.2.1.1.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" oid=".1.3.6.1.4.1.232.165.3.10.2.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info flag_ok="yes" lookup="cpqpower_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.232.165.3.10.2.1.2.%i" outlet="yes" string="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.232.165.3.10.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.232.165.3.10.2.1.4.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.232.165.3.10.2.1.7.%i" outlet="yes"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="load.off" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="load.on" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.stop" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="20.0" name="load.off.delay" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="30.0" name="load.on.delay" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.reboot" oid=".1.3.6.1.4.1.232.165.3.8.6.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="test.battery.start" oid=".1.3.6.1.4.1.232.165.3.7.1.0"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.232.165.3.1.1.0" mib_name="cpqpower" name="compaq" oid=".1.3.6.1.4.1.232.165.3" snmp_info="cpqpower_mib" version="1.61"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/S10apc-ats-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/S10apc-ats-mib.dmf
@@ -0,0 +1,54 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="apc_ats_sensitivity_info">
+		<lookup_info oid="1" value="high"/>
+		<lookup_info oid="2" value="low"/>
+	</lookup>
+	<lookup name="apc_ats_outletgroups_name_info">
+		<lookup_info oid="1" value="total"/>
+		<lookup_info oid="2" value="bank1"/>
+		<lookup_info oid="3" value="bank2"/>
+	</lookup>
+	<lookup name="apc_ats_outletgroups_status_info">
+		<lookup_info oid="1" value="OL"/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value=""/>
+		<lookup_info oid="4" value="OVER"/>
+	</lookup>
+	<lookup name="apc_ats_output_status_info">
+		<lookup_info oid="1" value="OFF"/>
+		<lookup_info oid="2" value="OL"/>
+	</lookup>
+	<snmp name="apc_ats_mib">
+		<snmp_info absent="yes" default="ats" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="APC" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.318.1.1.8.1.5.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.318.1.1.8.1.1.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.318.1.1.8.1.2.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.318.1.1.8.1.6.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.mfr.date" oid=".1.3.6.1.4.1.318.1.1.8.1.4.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.318.1.1.8.4.1.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.voltage.nominal" oid=".1.3.6.1.4.1.318.1.1.8.1.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.frequency.nominal" oid=".1.3.6.1.4.1.318.1.1.8.1.8.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.source" oid=".1.3.6.1.4.1.318.1.1.8.5.1.2.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.source.preferred" oid=".1.3.6.1.4.1.318.1.1.8.4.2.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.1.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.3.3.1.3.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.2.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.3.3.1.3.2.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.1.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.3.2.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.2.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.3.2.1.4.2"/>
+		<snmp_info flag_ok="yes" lookup="apc_ats_sensitivity_info" multiplier="1.0" name="input.sensitivity" oid=".1.3.6.1.4.1.318.1.1.8.4.4.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.count" oid=".1.3.6.1.4.1.318.1.1.8.5.3.1.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.4.2.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.6.1"/>
+		<snmp_info flag_ok="yes" lookup="apc_ats_output_status_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.8.5.1.15.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="outlet.group.count" oid=".1.3.6.1.4.1.318.1.1.8.5.4.4.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="outlet.group.%i.id" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.1.%i" outlet_group="yes"/>
+		<snmp_info lookup="apc_ats_outletgroups_name_info" multiplier="128.0" name="outlet.group.%i.name" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.3.%i" outlet_group="yes" static="yes" string="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.group.%i.current" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.4.%i" outlet_group="yes"/>
+		<snmp_info lookup="apc_ats_outletgroups_status_info" multiplier="128.0" name="outlet.group.%i.status" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.5.%i" outlet_group="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.6.%i" outlet_group="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.realpower" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.15.%i" outlet_group="yes" positive="yes"/>
+	</snmp>
+	<mib2nut mib_name="apc_ats" name="apc_ats" oid=".1.3.6.1.4.1.318.1.3.11" snmp_info="apc_ats_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/S30eaton-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/S30eaton-mib.dmf
@@ -0,0 +1,428 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="marlin_threshold_voltage_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low voltage warning!"/>
+		<lookup_info oid="2" value="low voltage critical!"/>
+		<lookup_info oid="3" value="high voltage warning!"/>
+		<lookup_info oid="4" value="high voltage critical!"/>
+	</lookup>
+	<lookup name="marlin_ambient_presence_info">
+		<lookup_info oid="-1" value="unknown"/>
+		<lookup_info oid="0" value="no"/>
+		<lookup_info oid="1" value="yes"/>
+	</lookup>
+	<lookup name="eaton_outlet_switchability_info">
+		<lookup_info oid="-1" value="yes"/>
+		<lookup_info oid="0" value="yes"/>
+	</lookup>
+	<lookup name="marlin_outlet_status_info">
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="pendingOff"/>
+		<lookup_info oid="3" value="pendingOn"/>
+	</lookup>
+	<lookup name="marlin_ambient_drycontacts_info">
+		<lookup_info oid="-1" value="unknown"/>
+		<lookup_info oid="0" value="open"/>
+		<lookup_info oid="1" value="closed"/>
+	</lookup>
+	<lookup name="pulizzi_sw_outlet_switchability_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="yes"/>
+	</lookup>
+	<lookup name="marlin_threshold_current_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low current warning!"/>
+		<lookup_info oid="2" value="low current critical!"/>
+		<lookup_info oid="3" value="high current warning!"/>
+		<lookup_info oid="4" value="high current critical!"/>
+	</lookup>
+	<lookup name="marlin_threshold_frequency_status_info">
+		<lookup_info oid="0" value="good"/>
+		<lookup_info oid="1" value="out-of-range"/>
+	</lookup>
+	<lookup name="marlin_threshold_temperature_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low temperature warning!"/>
+		<lookup_info oid="2" value="low temperature critical!"/>
+		<lookup_info oid="3" value="high temperature warning!"/>
+		<lookup_info oid="4" value="high temperature critical!"/>
+	</lookup>
+	<lookup name="marlin_threshold_status_info">
+		<lookup_info oid="0" value="good"/>
+		<lookup_info oid="1" value="warning-low"/>
+		<lookup_info oid="2" value="critical-low"/>
+		<lookup_info oid="3" value="warning-high"/>
+		<lookup_info oid="4" value="critical-high"/>
+	</lookup>
+	<lookup name="eaton_outlet_status_info">
+		<lookup_info oid="-1" value="error"/>
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="cycling"/>
+	</lookup>
+	<lookup name="eaton_outlet_type_info">
+		<lookup_info oid="0" value="unknown"/>
+		<lookup_info oid="1" value="iecC13"/>
+		<lookup_info oid="2" value="iecC19"/>
+		<lookup_info oid="10" value="uk"/>
+		<lookup_info oid="11" value="french"/>
+		<lookup_info oid="12" value="schuko"/>
+		<lookup_info oid="20" value="nema515"/>
+		<lookup_info oid="21" value="nema51520"/>
+		<lookup_info oid="22" value="nema520"/>
+		<lookup_info oid="23" value="nemaL520"/>
+		<lookup_info oid="24" value="nemaL530"/>
+		<lookup_info oid="25" value="nema615"/>
+		<lookup_info oid="26" value="nema620"/>
+		<lookup_info oid="27" value="nemaL620"/>
+		<lookup_info oid="28" value="nemaL630"/>
+		<lookup_info oid="29" value="nemaL715"/>
+		<lookup_info oid="30" value="rf203p277"/>
+	</lookup>
+	<lookup name="marlin_outletgroups_status_info">
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="rebooting"/>
+		<lookup_info oid="3" value="mixed"/>
+	</lookup>
+	<lookup name="marlin_outlet_group_type_info">
+		<lookup_info oid="0" value="unknown"/>
+		<lookup_info oid="1" value="breaker1pole"/>
+		<lookup_info oid="2" value="breaker2pole"/>
+		<lookup_info oid="3" value="breaker3pole"/>
+		<lookup_info oid="4" value="outlet-section"/>
+		<lookup_info oid="5" value="user-defined"/>
+	</lookup>
+	<lookup name="marlin_threshold_humidity_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low humidity warning!"/>
+		<lookup_info oid="2" value="low humidity critical!"/>
+		<lookup_info oid="3" value="high humidity warning!"/>
+		<lookup_info oid="4" value="high humidity critical!"/>
+	</lookup>
+	<lookup name="pulizzi_sw_outlet_status_info">
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="off"/>
+	</lookup>
+	<lookup name="marlin_input_type_info">
+		<lookup_info oid="1" value="1"/>
+		<lookup_info oid="2" value="2"/>
+		<lookup_info oid="3" value="3"/>
+		<lookup_info oid="4" value="3"/>
+	</lookup>
+	<lookup name="marlin_threshold_frequency_alarm_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="frequency out of range!"/>
+	</lookup>
+        <functions name="eaton_functions">
+          <function name="device.amperes">
+            function deviceamperes(device)
+                power = tonumber(lua_C_gateway("input.power", device))
+                voltage = tonumber(lua_C_gateway("input.voltage", device))
+                if voltage ~= 0 and power ~= 0 then
+                    return power / voltage
+                else
+                    return nil
+                end
+            end
+          </function>
+          <function name="device.luaOutlet">
+            function deviceluaOutlet(device)
+                outlet = tonumber(lua_C_gateway("outlet.count", device))
+                if outlet ~= 0 then
+                  for i=0,outlet,1
+                    do
+                      publish_Lua_dstate("device."..device..".outlet."..i..".wastePower", wastePower(device, i))
+                    end
+                end
+                
+                return nil
+            end
+            
+            
+            function wastePower(device, outlet)
+                power = tonumber(lua_C_gateway("outlet."..outlet..".power", device))
+                realpower = tonumber(lua_C_gateway("outlet."..outlet..".realpower", device))
+                
+                return power - realpower
+            end
+          </function>
+        </functions>
+	<snmp name="eaton_marlin_mib">
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.amperes" string="yes" function="eaton_functions"/>
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.luaOutlet" string="yes" function="eaton_functions"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.4.%i" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.part" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.3.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.2.1.2.2.1.6.2" static="yes" string="yes"/>
+		<snmp_info default="1" multiplier="1.0" name="device.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid="1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.4.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.5.%i" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info lookup="marlin_input_type_info" multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.2.%i.1" static="yes"/>
+		<snmp_info multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.3.%i.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_frequency_status_info" multiplier="128.0" name="input.frequency.status" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.4.%i.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_frequency_alarm_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.4.%i.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.3" positive="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L1.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L1.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.2" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L2.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.2" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L2.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.2" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.3" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L3.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.3" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L3.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.3" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L1.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L1.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.2" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.2" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L2.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.2" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L2.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.2" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.3" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.3" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L3.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.3" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L3.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.3" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.5.1.4.0.1" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.4" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.3" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.5.1.3.0.1" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.4" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.3" positive="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_presence_info" multiplier="128.0" name="ambient.present" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.3.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="ambient.temperature.status" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_temperature_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.4.0.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.6.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.8.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="ambient.humidity.status" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_humidity_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.4.0.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.6.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.8.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_drycontacts_info" multiplier="128.0" name="ambient.contacts.1.status" oid=".1.3.6.1.4.1.534.6.6.7.7.3.1.4.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_drycontacts_info" multiplier="128.0" name="ambient.contacts.2.status" oid=".1.3.6.1.4.1.534.6.6.7.7.3.1.4.0.2" string="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" flag_ok="yes" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.22.0" static="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.frequency" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.3.0.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.01" name="outlet.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.4" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.4" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.534.6.6.7.6.1.1.3.0.%i" outlet="yes" static="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.2.0.%i" outlet="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.1" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.2" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.3" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.4" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.5" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.6" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.3.0.%i" outlet="yes"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.%i.current.status" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.4.0.%i" outlet="yes" string="yes"/>
+		<snmp_info lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="outlet.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.4.0.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.5.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.6.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.7.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.8.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.7.6.5.1.3.0.%i" outlet="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.2.0.%i" outlet="yes"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.%i.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.3.0.%i" outlet="yes" string="yes"/>
+		<snmp_info lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="outlet.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.3.0.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.4.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.5.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.6.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.7.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.534.6.6.7.6.5.1.2.0.%i" outlet="yes"/>
+		<snmp_info default="no" flag_ok="yes" lookup="eaton_outlet_switchability_info" multiplier="128.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.3.0.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info default="unknown" lookup="eaton_outlet_type_info" multiplier="128.0" name="outlet.%i.type" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.5.0.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.group.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.21.%i" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.group.%i.id" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.2.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="128.0" name="outlet.group.%i.name" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.3.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1" writable="yes"/>
+		<snmp_info lookup="marlin_outlet_group_type_info" multiplier="128.0" name="outlet.group.%i.type" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.4.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1"/>
+		<snmp_info flag_ok="yes" lookup="marlin_outletgroups_status_info" multiplier="128.0" name="outlet.group.%i.status" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.2.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.count" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.6.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.group.%i.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="outlet.group.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.5.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.6.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.7.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.8.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.2.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.group.%i.current.status" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="outlet.group.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.load" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.10.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.5.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.6.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.7.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.8.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.7.5.5.1.3.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.power" oid=".1.3.6.1.4.1.534.6.6.7.5.5.1.2.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.3.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.4.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.5.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.4.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.5.%i.%i" outlet_group="yes" type_daisy="1"/>
+	</snmp>
+	<snmp name="eaton_aphel_revelation_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU Managed" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.534.6.6.6.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.534.6.6.6.1.1.6.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.534.6.6.6.1.1.13.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.534.6.6.6.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.534.6.6.6.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="ups.temperature" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.5.0" power_status="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.534.6.6.6.1.2.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.current" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.voltage" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.2.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.realpower" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.3.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.4.0" power_status="yes"/>
+		<snmp_info default="yes" multiplier="1.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.2.%i" outlet="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.4.%i" outlet="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.maximum" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.5.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.7.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.6.%i" outlet="yes"/>
+		<snmp_info multiplier="0.01" name="outlet.%i.powerfactor" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.9.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.8.%i" outlet="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.534.6.6.6.2.2.1.3.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.low" oid="1.3.6.1.4.1.534.6.6.6.2.2.1.6.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.high" oid="1.3.6.1.4.1.534.6.6.6.2.2.1.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.3.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.low" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.6.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.high" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.7.0"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="2.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+	</snmp>
+	<snmp name="eaton_aphel_genesisII_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU Monitored" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.17373.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="unknown" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.17373.3.1.4.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.17373.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.17373.3.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.17373.3.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.1.current" oid=".1.3.6.1.4.1.17373.3.2.1.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.2.current" oid=".1.3.6.1.4.1.17373.3.2.2.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.3.current" oid=".1.3.6.1.4.1.17373.3.2.3.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.4.current" oid=".1.3.6.1.4.1.17373.3.2.4.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.5.current" oid=".1.3.6.1.4.1.17373.3.2.5.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.6.current" oid=".1.3.6.1.4.1.17373.3.2.6.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.7.current" oid=".1.3.6.1.4.1.17373.3.2.7.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.8.current" oid=".1.3.6.1.4.1.17373.3.2.8.0" positive="yes"/>
+	</snmp>
+	<snmp name="eaton_pulizzi_switched_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Switched ePDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.20677.2.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="unknown" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.20677.2.2.6.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Switched ePDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.20677.2.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.date" oid=".1.3.6.1.4.1.20677.2.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.time" oid=".1.3.6.1.4.1.20677.2.1.3.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.current" oid=".1.3.6.1.4.1.20677.2.8.6.4.2.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.voltage" oid=".1.3.6.1.4.1.20677.2.8.6.4.1.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.20677.2.8.6.4.3.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.20677.2.6.1.%i.1.0" outlet="yes" static="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="pulizzi_sw_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.20677.2.6.3.%i.0" outlet="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info default="yes" flag_ok="yes" lookup="pulizzi_sw_outlet_switchability_info" multiplier="128.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.20677.2.6.3.%i.0" outlet="yes" static="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.delay.reboot" oid=".1.3.6.1.4.1.20677.2.6.1.%i.5.0" outlet="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.delay.start" oid=".1.3.6.1.4.1.20677.2.6.1.%i.4.0" outlet="yes" writable="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="load.on" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="2.0" name="load.off" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="3.0" name="load.on.delay" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="4.0" name="load.off.delay" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="2.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="3.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.0" mib_name="eaton_epdu" name="eaton_marlin" oid=".1.3.6.1.4.1.534.6.6.7" snmp_info="eaton_marlin_mib" version="0.39"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" mib_name="aphel_revelation" name="aphel_revelation" oid=".1.3.6.1.4.1.534.6.6.6" snmp_info="eaton_aphel_revelation_mib" version="0.48"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.17373.3.1.1.0" mib_name="aphel_genesisII" name="aphel_genesisII" oid=".1.3.6.1.4.1.17373" snmp_info="eaton_aphel_genesisII_mib" version="0.48"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched1" name="pulizzi_switched1" oid=".1.3.6.1.4.1.20677.1" snmp_info="eaton_pulizzi_switched_mib" version="0.2"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched2" name="pulizzi_switched2" oid=".1.3.6.1.4.1.20677.2" snmp_info="eaton_pulizzi_switched_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/apc-ats-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/apc-ats-mib.dmf
@@ -0,0 +1,54 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="apc_ats_sensitivity_info">
+		<lookup_info oid="1" value="high"/>
+		<lookup_info oid="2" value="low"/>
+	</lookup>
+	<lookup name="apc_ats_outletgroups_name_info">
+		<lookup_info oid="1" value="total"/>
+		<lookup_info oid="2" value="bank1"/>
+		<lookup_info oid="3" value="bank2"/>
+	</lookup>
+	<lookup name="apc_ats_outletgroups_status_info">
+		<lookup_info oid="1" value="OL"/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value=""/>
+		<lookup_info oid="4" value="OVER"/>
+	</lookup>
+	<lookup name="apc_ats_output_status_info">
+		<lookup_info oid="1" value="OFF"/>
+		<lookup_info oid="2" value="OL"/>
+	</lookup>
+	<snmp name="apc_ats_mib">
+		<snmp_info absent="yes" default="ats" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="APC" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.318.1.1.8.1.5.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.318.1.1.8.1.1.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.318.1.1.8.1.2.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.318.1.1.8.1.6.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.mfr.date" oid=".1.3.6.1.4.1.318.1.1.8.1.4.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.318.1.1.8.4.1.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.voltage.nominal" oid=".1.3.6.1.4.1.318.1.1.8.1.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.frequency.nominal" oid=".1.3.6.1.4.1.318.1.1.8.1.8.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.source" oid=".1.3.6.1.4.1.318.1.1.8.5.1.2.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.source.preferred" oid=".1.3.6.1.4.1.318.1.1.8.4.2.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.1.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.3.3.1.3.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.2.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.3.3.1.3.2.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.1.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.3.2.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.2.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.3.2.1.4.2"/>
+		<snmp_info flag_ok="yes" lookup="apc_ats_sensitivity_info" multiplier="1.0" name="input.sensitivity" oid=".1.3.6.1.4.1.318.1.1.8.4.4.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.count" oid=".1.3.6.1.4.1.318.1.1.8.5.3.1.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.frequency" oid=".1.3.6.1.4.1.318.1.1.8.5.4.2.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.6.1"/>
+		<snmp_info flag_ok="yes" lookup="apc_ats_output_status_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.8.5.1.15.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="outlet.group.count" oid=".1.3.6.1.4.1.318.1.1.8.5.4.4.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="outlet.group.%i.id" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.1.%i" outlet_group="yes"/>
+		<snmp_info lookup="apc_ats_outletgroups_name_info" multiplier="128.0" name="outlet.group.%i.name" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.3.%i" outlet_group="yes" static="yes" string="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.group.%i.current" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.4.%i" outlet_group="yes"/>
+		<snmp_info lookup="apc_ats_outletgroups_status_info" multiplier="128.0" name="outlet.group.%i.status" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.5.%i" outlet_group="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.voltage" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.6.%i" outlet_group="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.realpower" oid=".1.3.6.1.4.1.318.1.1.8.5.4.5.1.15.%i" outlet_group="yes" positive="yes"/>
+	</snmp>
+	<mib2nut mib_name="apc_ats" name="apc_ats" oid=".1.3.6.1.4.1.318.1.3.11" snmp_info="apc_ats_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/apc-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/apc-mib.dmf
@@ -0,0 +1,182 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="apcc_transfer_reasons">
+		<lookup_info oid="1" value="noTransfer"/>
+		<lookup_info oid="2" value="highLineVoltage"/>
+		<lookup_info oid="3" value="brownout"/>
+		<lookup_info oid="4" value="blackout"/>
+		<lookup_info oid="5" value="smallMomentarySag"/>
+		<lookup_info oid="6" value="deepMomentarySag"/>
+		<lookup_info oid="7" value="smallMomentarySpike"/>
+		<lookup_info oid="8" value="largeMomentarySpike"/>
+		<lookup_info oid="9" value="selfTest"/>
+		<lookup_info oid="10" value="rateOfVoltageChange"/>
+	</lookup>
+	<lookup name="apcc_battrepl_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="RB"/>
+	</lookup>
+	<lookup name="apcc_testdiag_results">
+		<lookup_info oid="1" value="Ok"/>
+		<lookup_info oid="2" value="Failed"/>
+		<lookup_info oid="3" value="InvalidTest"/>
+		<lookup_info oid="4" value="TestInProgress"/>
+	</lookup>
+	<lookup name="apcc_sensitivity_modes">
+		<lookup_info oid="1" value="auto"/>
+		<lookup_info oid="2" value="low"/>
+		<lookup_info oid="3" value="medium"/>
+		<lookup_info oid="4" value="high"/>
+	</lookup>
+	<lookup name="apcc_batt_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="LB"/>
+	</lookup>
+	<lookup name="apcc_cal_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="CAL"/>
+	</lookup>
+	<lookup name="apcc_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OL"/>
+		<lookup_info oid="3" value="OB"/>
+		<lookup_info oid="4" value="OL BOOST"/>
+		<lookup_info oid="5" value="OFF"/>
+		<lookup_info oid="6" value="OFF"/>
+		<lookup_info oid="7" value="OFF"/>
+		<lookup_info oid="8" value=""/>
+		<lookup_info oid="9" value="BYPASS"/>
+		<lookup_info oid="10" value="BYPASS"/>
+		<lookup_info oid="11" value="OFF"/>
+		<lookup_info oid="12" value="OL TRIM"/>
+	</lookup>
+	<snmp name="apcc_mib">
+		<snmp_info absent="yes" default="APC" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic Powernet SNMP device" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.318.1.1.1.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.318.1.1.1.1.2.3.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.mfr.date" oid=".1.3.6.1.4.1.318.1.1.1.1.2.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.voltage" oid=".1.3.6.1.4.1.318.1.1.1.3.3.1.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.voltage.maximum" oid=".1.3.6.1.4.1.318.1.1.1.3.3.2.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.voltage.minimum" oid=".1.3.6.1.4.1.318.1.1.1.3.3.3.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.318.1.1.1.3.2.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.voltage.maximum" oid=".1.3.6.1.4.1.318.1.1.1.3.2.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.voltage.minimum" oid=".1.3.6.1.4.1.318.1.1.1.3.2.3.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="2.0" name="input.phases" oid=".1.3.6.1.4.1.318.1.1.1.9.2.2.1.2.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L1-L2.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.3.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L2-L3.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.3.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L3-L1.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.3.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L1-L2.voltage.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.4.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L2-L3.voltage.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.4.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L3-L1.voltage.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.4.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L1-L2.voltage.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.5.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L2-L3.voltage.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.5.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.L3-L1.voltage.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.5.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.6.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.6.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.6.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L1.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.7.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L2.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.7.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L3.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.7.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L1.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.8.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L2.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.8.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.L3.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.2.3.1.8.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.318.1.1.1.9.2.2.1.4.1" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.318.1.1.1.3.3.4.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="input.frequency" oid=".1.3.6.1.4.1.318.1.1.1.3.2.4.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="input.transfer.low" oid=".1.3.6.1.4.1.318.1.1.1.5.2.3.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="input.transfer.high" oid=".1.3.6.1.4.1.318.1.1.1.5.2.2.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="apcc_transfer_reasons" multiplier="1.0" name="input.transfer.reason" oid="1.3.6.1.4.1.318.1.1.1.3.2.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="apcc_sensitivity_modes" multiplier="1.0" name="input.sensitivity" oid=".1.3.6.1.4.1.318.1.1.1.5.2.7.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="OFF" flag_ok="yes" lookup="apcc_pwr_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.1.4.1.1.0" power_status="yes" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="apcc_batt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.1.2.1.1.0" string="yes"/>
+		<snmp_info calibration="yes" default="" flag_ok="yes" lookup="apcc_cal_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.1.7.2.6.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="apcc_battrepl_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.318.1.1.1.2.2.4.0" replace_battery="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="ups.temperature" oid=".1.3.6.1.4.1.318.1.1.1.2.3.2.0" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.temperature" oid=".1.3.6.1.4.1.318.1.1.1.2.2.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="ups.load" oid=".1.3.6.1.4.1.318.1.1.1.4.3.3.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.318.1.1.1.4.2.3.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="16.0" name="ups.firmware" oid=".1.3.6.1.4.1.318.1.1.1.1.2.1.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="ups.delay.shutdown" oid=".1.3.6.1.4.1.318.1.1.1.5.2.10.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="ups.delay.start" oid=".1.3.6.1.4.1.318.1.1.1.5.2.9.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.charge" oid=".1.3.6.1.4.1.318.1.1.1.2.3.1.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.318.1.1.1.2.2.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="battery.charge.restart" oid=".1.3.6.1.4.1.318.1.1.1.5.2.6.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.runtime" oid=".1.3.6.1.4.1.318.1.1.1.2.2.3.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="battery.runtime.low" oid=".1.3.6.1.4.1.318.1.1.1.5.2.8.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.318.1.1.1.2.3.4.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.voltage" oid=".1.3.6.1.4.1.318.1.1.1.2.2.8.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.voltage.nominal" oid=".1.3.6.1.4.1.318.1.1.1.2.2.7.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.318.1.1.1.2.3.5.0" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.current" oid=".1.3.6.1.4.1.318.1.1.1.2.2.9.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.current.total" oid=".1.3.6.1.4.1.318.1.1.1.2.3.6.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.packs" oid=".1.3.6.1.4.1.318.1.1.1.2.2.5.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.packs.bad" oid=".1.3.6.1.4.1.318.1.1.1.2.2.6.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="8.0" name="battery.date" oid=".1.3.6.1.4.1.318.1.1.1.2.1.3.0" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="8.0" name="ups.id" oid=".1.3.6.1.4.1.318.1.1.1.1.1.2.0" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="apcc_testdiag_results" multiplier="128.0" name="ups.test.result" oid=".1.3.6.1.4.1.318.1.1.1.7.2.3.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="8.0" name="ups.test.date" oid=".1.3.6.1.4.1.318.1.1.1.7.2.4.0" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.318.1.1.1.4.3.1.0" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.318.1.1.1.4.2.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="2.0" name="output.phases" oid=".1.3.6.1.4.1.318.1.1.1.9.3.2.1.2.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.318.1.1.1.9.3.2.1.4.1" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.318.1.1.1.4.3.2.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.frequency" oid=".1.3.6.1.4.1.318.1.1.1.4.2.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.318.1.1.1.4.3.4.0" positive="yes" unique="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.current" oid=".1.3.6.1.4.1.318.1.1.1.4.2.4.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1-L2.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.3.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2-L3.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.3.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3-L1.voltage" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.3.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.4.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.4.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.4.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L1.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.5.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L2.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.5.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L3.current.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.5.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L1.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.6.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L2.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.6.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="output.L3.current.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.6.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.7.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.7.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.7.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.8.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.8.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power.maximum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.8.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.9.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.9.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power.minimum" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.9.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.10.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.10.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.10.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power.maximum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.11.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power.maximum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.11.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power.maximum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.11.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L1.power.minimum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.12.1.1.1" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L2.power.minimum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.12.1.1.2" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="output.L3.power.minimum.percent" oid=".1.3.6.1.4.1.318.1.1.1.9.3.3.1.12.1.1.3" positive="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="3.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.318.1.1.1.5.2.1.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.318.1.1.2.1.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.1.temperature.alarm.high" oid=".1.3.6.1.4.1.318.1.1.10.1.2.2.1.3.1"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.1.temperature.alarm.low" oid=".1.3.6.1.4.1.318.1.1.10.1.2.2.1.4.1"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.humidity" oid=".1.3.6.1.4.1.318.1.1.2.1.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.1.humidity.alarm.high" oid=".1.3.6.1.4.1.318.1.1.10.1.2.2.1.6.1"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.1.humidity.alarm.low" oid=".1.3.6.1.4.1.318.1.1.10.1.2.2.1.7.1"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.318.1.1.10.2.3.2.1.4.1"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ambient.humidity" oid=".1.3.6.1.4.1.318.1.1.10.2.3.2.1.6.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="load.off" oid=".1.3.6.1.4.1.318.1.1.1.6.2.1.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="load.on" oid=".1.3.6.1.4.1.318.1.1.1.6.2.6.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="3.0" name="shutdown.stayoff" oid=".1.3.6.1.4.1.318.1.1.1.6.2.1.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="shutdown.return" oid=".1.3.6.1.4.1.318.1.1.1.6.1.1.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="test.failure.start" oid=".1.3.6.1.4.1.318.1.1.1.6.2.4.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="test.panel.start" oid=".1.3.6.1.4.1.318.1.1.1.6.2.5.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="bypass.start" oid=".1.3.6.1.4.1.318.1.1.1.6.2.7.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="3.0" name="bypass.stop" oid=".1.3.6.1.4.1.318.1.1.1.6.2.7.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="test.battery.start" oid=".1.3.6.1.4.1.318.1.1.1.7.2.2.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="calibrate.start" oid=".1.3.6.1.4.1.318.1.1.1.7.2.5.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="3.0" name="calibrate.stop" oid=".1.3.6.1.4.1.318.1.1.1.7.2.5.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="reset.input.minmax" oid=".1.3.6.1.4.1.318.1.1.1.9.1.1.0"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.318.1.1.1.1.1.1.0" mib_name="apcc" name="apc" power_status=".1.3.6.1.4.1.318.1.1.1.4.1.1.0" snmp_info="apcc_mib" version="1.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/baytech-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/baytech-mib.dmf
@@ -0,0 +1,36 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="baytech_outlet_status_info">
+		<lookup_info oid="-1" value="error"/>
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="cycling"/>
+	</lookup>
+	<snmp name="baytech_mib">
+		<snmp_info absent="yes" default="BayTech" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.4779.1.3.5.2.1.24.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.4779.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.2.1.2.2.1.6.2" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="Baytech" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.4779.1.3.5.2.1.24.1" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.4779.1.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.4779.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.4779.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="0.1" name="ups.temperature" oid=".1.3.6.1.4.1.4779.1.3.5.5.1.10.2.1" power_status="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.4779.1.3.5.2.1.15.1" power_status="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.current" oid=".1.3.6.1.4.1.4779.1.3.5.5.1.6.2.1" power_status="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.voltage" oid=".1.3.6.1.4.1.4779.1.3.5.5.1.8.2.1" power_status="yes"/>
+		<snmp_info lookup="baytech_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.4779.1.3.5.3.1.3.1.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.4779.1.3.5.3.1.4.1.%i" outlet="yes" string="yes" writable="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" oid=".1.3.6.1.4.1.4779.1.3.5.6.1.3.2.1.%i" outlet="yes" static="yes"/>
+		<snmp_info default="yes" multiplier="1.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.4779.1.3.5.3.1.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.4779.1.3.5.3.1.3.1.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.4779.1.3.5.3.1.3.1.%i" outlet="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.4779.1.3.5.2.1.24.1" mib_name="baytech" name="baytech" snmp_info="baytech_mib" version="4032"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/bestpower-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/bestpower-mib.dmf
@@ -0,0 +1,23 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="bestpower_power_status">
+		<lookup_info oid="1" value="OL"/>
+		<lookup_info oid="2" value="OB"/>
+	</lookup>
+	<snmp name="bestpower_mib">
+		<snmp_info absent="yes" default="ups" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Best Ferrups" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.2947.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.2947.1.1.5.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.2947.1.1.7.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.power" oid=".1.3.6.1.4.1.2947.1.1.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.mfr.date" oid=".1.3.6.1.4.1.2947.1.1.8.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="bestpower_power_status" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.2947.1.2.1.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime" oid=".1.3.6.1.4.1.2947.1.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime.elapsed" oid=".1.3.6.1.4.1.2947.1.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.2947.1.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.2947.1.2.5.0" power_status="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.2947.1.1.2.0" mib_name="bestpower" name="bestpower" snmp_info="bestpower_mib" version="0.1"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/compaq-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/compaq-mib.dmf
@@ -0,0 +1,130 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="cpqpower_outlet_switchability_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="yes"/>
+		<lookup_info oid="3" value="yes"/>
+		<lookup_info oid="4" value="yes"/>
+	</lookup>
+	<lookup name="cpqpower_outlet_status_info">
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="off"/>
+		<lookup_info oid="3" value="pendingOff"/>
+		<lookup_info oid="4" value="pendingOn"/>
+		<lookup_info oid="5" value="unknown"/>
+	</lookup>
+	<lookup name="cpqpower_mode_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="normal"/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value=""/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="parallel capacity"/>
+		<lookup_info oid="9" value="parallel redundancy"/>
+		<lookup_info oid="10" value="high efficiency"/>
+	</lookup>
+	<lookup name="cpqpower_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="OL BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value="OL"/>
+		<lookup_info oid="10" value="OL"/>
+	</lookup>
+	<lookup name="cpqpower_test_res_info">
+		<lookup_info oid="1" value="Unknown"/>
+		<lookup_info oid="2" value="Done and passed"/>
+		<lookup_info oid="3" value="Done and error"/>
+		<lookup_info oid="4" value="In progress"/>
+		<lookup_info oid="5" value="Not supported"/>
+		<lookup_info oid="6" value="Inhibited"/>
+		<lookup_info oid="7" value="Scheduled"/>
+	</lookup>
+	<lookup name="cpqpower_battery_abm_status">
+		<lookup_info oid="1" value="CHRG"/>
+		<lookup_info oid="2" value="DISCHRG"/>
+	</lookup>
+	<snmp name="cpqpower_mib">
+		<snmp_info default="HP/Compaq" multiplier="128.0" name="ups.mfr" oid=".1.3.6.1.4.1.232.165.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="SNMP UPS" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.232.165.3.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.232.165.1.2.7.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.232.165.3.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.232.165.3.4.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower" oid=".1.3.6.1.4.1.232.165.3.9.3.0" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L1.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L2.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="ups.L3.realpower" oid=".1.3.6.1.4.1.232.165.3.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="OFF" lookup="cpqpower_pwr_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.232.165.3.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_battery_abm_status" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.232.165.3.2.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_mode_info" multiplier="128.0" name="ups.type" oid=".1.3.6.1.4.1.232.165.3.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cpqpower_test_res_info" multiplier="128.0" name="ups.test.result" oid=".1.3.6.1.4.1.232.165.3.7.2.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="20" flag_ok="yes" multiplier="6.0" name="ups.delay.shutdown" oid=".1.3.6.1.4.1.232.165.3.8.1.0" string="yes" writable="yes"/>
+		<snmp_info absent="yes" default="30" flag_ok="yes" multiplier="6.0" name="ups.delay.start" oid=".1.3.6.1.4.1.232.165.3.8.2.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.shutdown" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.start" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.232.165.3.6.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.low" oid=".1.3.6.1.4.1.232.165.3.6.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.high" oid=".1.3.6.1.4.1.232.165.3.6.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.232.165.3.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime" oid=".1.3.6.1.4.1.232.165.3.2.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.232.165.3.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.232.165.3.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.232.165.3.3.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.232.165.3.3.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="3.0" name="input.voltage.nominal" oid=".1.3.6.1.4.1.232.165.3.9.2.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3-N.voltage" oid=".1.3.6.1.4.1.232.165.3.3.4.1.2.3"/>
+		<snmp_info default="" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.232.165.3.3.4.1.3.3"/>
+		<snmp_info default="" multiplier="0.1" name="input.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4" output_1_phase="yes"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.realpower" oid=".1.3.6.1.4.1.232.165.3.3.4.1.4.3"/>
+		<snmp_info default="" multiplier="1.0" name="input.quality" oid=".1.3.6.1.4.1.232.165.3.3.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid=".1.3.6.1.4.1.232.165.3.4.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.232.165.3.4.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="3.0" name="output.frequency.nominal" oid=".1.3.6.1.4.1.232.165.3.9.4.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="3.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.232.165.3.9.1.0" output_1_phase="yes" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3-N.voltage" oid=".1.3.6.1.4.1.232.165.3.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.232.165.3.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.232.165.3.10.1.0" power_status="yes"/>
+		<snmp_info default="yes" lookup="cpqpower_outlet_switchability_info" multiplier="3.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.232.165.3.10.2.1.1.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" oid=".1.3.6.1.4.1.232.165.3.10.2.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info flag_ok="yes" lookup="cpqpower_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.232.165.3.10.2.1.2.%i" outlet="yes" string="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.232.165.3.10.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.232.165.3.10.2.1.4.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.232.165.3.10.2.1.7.%i" outlet="yes"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="load.off" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="load.on" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.stop" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="20.0" name="load.off.delay" oid=".1.3.6.1.4.1.232.165.3.8.1.0"/>
+		<snmp_info command="yes" default="" multiplier="30.0" name="load.on.delay" oid=".1.3.6.1.4.1.232.165.3.8.2.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.reboot" oid=".1.3.6.1.4.1.232.165.3.8.6.0"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="test.battery.start" oid=".1.3.6.1.4.1.232.165.3.7.1.0"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.232.165.3.1.1.0" mib_name="cpqpower" name="compaq" oid=".1.3.6.1.4.1.232.165.3" snmp_info="cpqpower_mib" version="1.61"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/cyberpower-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/cyberpower-mib.dmf
@@ -0,0 +1,27 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="cyberpower_power_status">
+		<lookup_info oid="2" value="OL"/>
+		<lookup_info oid="3" value="OB"/>
+		<lookup_info oid="4" value="OL"/>
+		<lookup_info oid="5" value="OL"/>
+		<lookup_info oid="7" value="OL"/>
+		<lookup_info oid="1" value="NULL"/>
+		<lookup_info oid="6" value="NULL"/>
+	</lookup>
+	<snmp name="cyberpower_mib">
+		<snmp_info absent="yes" default="ups" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="CYBERPOWER" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="CyberPower" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.3808.1.1.1.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.3808.1.1.1.1.2.3.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.3808.1.1.1.1.2.1.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.mfr.date" oid=".1.3.6.1.4.1.3808.1.1.1.1.2.2.0" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="cyberpower_power_status" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.3808.1.1.1.4.1.1.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime" oid=".1.3.6.1.4.1.3808.1.1.1.2.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime.elapsed" oid=".1.3.6.1.4.1.3808.1.1.1.2.1.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.3808.1.1.1.2.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.3808.1.1.1.2.2.7.0" power_status="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.3808.1.1.1.1.1.1.0" mib_name="cyberpower" name="cyberpower" oid=".1.3.6.1.4.1.3808" snmp_info="cyberpower_mib" version="0.1"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/delta_ups-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/delta_ups-mib.dmf
@@ -0,0 +1,39 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="delta_ups_pwr_info">
+		<lookup_info oid="0" value="OL"/>
+		<lookup_info oid="1" value="OB"/>
+		<lookup_info oid="2" value="BYPASS"/>
+		<lookup_info oid="3" value="TRIM"/>
+		<lookup_info oid="4" value="BOOST"/>
+		<lookup_info oid="5" value="BYPASS"/>
+		<lookup_info oid="7" value="OFF"/>
+	</lookup>
+	<lookup name="delta_ups_upstype_info">
+		<lookup_info oid="1" value="on-line"/>
+		<lookup_info oid="2" value="off-line"/>
+		<lookup_info oid="3" value="line-interactive"/>
+		<lookup_info oid="4" value="3phase"/>
+		<lookup_info oid="5" value="splite-phase"/>
+	</lookup>
+	<snmp name="delta_ups_mib">
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.mfr" oid=".1.3.6.1.4.1.2254.2.4.1.1.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.2254.2.4.1.2.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.2254.2.4.1.4.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.2254.2.4.1.3.0" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="delta_ups_upstype_info" multiplier="1.0" name="ups.type" oid=".1.3.6.1.4.1.2254.2.4.1.19.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.2254.2.4.5.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ups.power" oid=".1.3.6.1.4.1.2254.2.4.1.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.2254.2.4.1.8.0"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.2254.2.4.5.4.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.frequency.nominal" oid=".1.3.6.1.4.1.2254.2.4.1.9.0"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.2254.2.4.5.5.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.voltage.nominal" oid=".1.3.6.1.4.1.2254.2.4.1.10.0"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.voltage" oid=".1.3.6.1.4.1.2254.2.4.4.3.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.frequency.nominal" oid=".1.3.6.1.4.1.2254.2.4.1.11.0"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.2254.2.4.4.2.0"/>
+		<snmp_info flag_ok="yes" lookup="delta_ups_pwr_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.2254.2.4.5.1.0"/>
+	</snmp>
+	<mib2nut mib_name="delta_ups" name="delta_ups" oid=".1.3.6.1.4.1.2254.2.4" snmp_info="delta_ups_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/eaton-ats-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/eaton-ats-mib.dmf
@@ -0,0 +1,74 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="eaton_ats_source_info">
+		<lookup_info oid="1" value="init"/>
+		<lookup_info oid="2" value="diagnosis"/>
+		<lookup_info oid="3" value="off"/>
+		<lookup_info oid="4" value="1"/>
+		<lookup_info oid="5" value="2"/>
+		<lookup_info oid="6" value="safe"/>
+		<lookup_info oid="7" value="fault"/>
+	</lookup>
+	<lookup name="eaton_ats_output_status_info">
+		<lookup_info oid="1" value="OFF"/>
+		<lookup_info oid="2" value="OL"/>
+	</lookup>
+	<lookup name="eaton_ats_test_result_info">
+		<lookup_info oid="1" value="done and passed"/>
+		<lookup_info oid="2" value="done and warning"/>
+		<lookup_info oid="3" value="done and error"/>
+		<lookup_info oid="4" value="aborted"/>
+		<lookup_info oid="5" value="in progress"/>
+		<lookup_info oid="6" value="no test initiated"/>
+	</lookup>
+	<lookup name="eaton_ats_sensitivity_info">
+		<lookup_info oid="1" value="normal"/>
+		<lookup_info oid="2" value="high"/>
+		<lookup_info oid="3" value="low"/>
+	</lookup>
+	<lookup name="eaton_ats_input_frequency_status_info">
+		<lookup_info oid="1" value="good"/>
+		<lookup_info oid="2" value="out-of-range"/>
+	</lookup>
+	<lookup name="eaton_ats_input_voltage_status_info">
+		<lookup_info oid="1" value="good"/>
+		<lookup_info oid="2" value="derated-range"/>
+		<lookup_info oid="3" value="out-of-range"/>
+		<lookup_info oid="4" value="unknown"/>
+	</lookup>
+	<snmp name="eaton_ats_mib">
+		<snmp_info absent="yes" default="ats" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="Eaton" flag_ok="yes" multiplier="128.0" name="device.mfr" oid=".1.3.6.1.4.1.534.10.2.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="ATS" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.534.10.2.1.2.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.534.10.2.1.3.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.534.10.2.1.4.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.534.10.2.1.5.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.part" oid=".1.3.6.1.4.1.534.10.2.1.6.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.1.id" oid=".1.3.6.1.4.1.534.10.2.2.2.1.1.1" static="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.2.id" oid=".1.3.6.1.4.1.534.10.2.2.2.1.1.2" static="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.1.voltage" oid=".1.3.6.1.4.1.534.10.2.2.2.1.2.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.2.voltage" oid=".1.3.6.1.4.1.534.10.2.2.2.1.2.2"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_input_voltage_status_info" multiplier="1.0" name="input.1.voltage.status" oid=".1.3.6.1.4.1.534.10.2.3.2.1.5.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_input_voltage_status_info" multiplier="1.0" name="input.2.voltage.status" oid=".1.3.6.1.4.1.534.10.2.3.2.1.5.2" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.1.frequency" oid=".1.3.6.1.4.1.534.10.2.2.2.1.3.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.2.frequency" oid=".1.3.6.1.4.1.534.10.2.2.2.1.3.2"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_input_frequency_status_info" multiplier="1.0" name="input.1.frequency.status" oid=".1.3.6.1.4.1.534.10.2.3.2.1.2.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_input_frequency_status_info" multiplier="1.0" name="input.2.frequency.status" oid=".1.3.6.1.4.1.534.10.2.3.2.1.2.2" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_sensitivity_info" multiplier="128.0" name="input.sensitivity" oid=".1.3.6.1.4.1.534.10.2.4.6.0" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_source_info" multiplier="1.0" name="input.source" oid=".1.3.6.1.4.1.534.10.2.2.4.0" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.source.preferred" oid=".1.3.6.1.4.1.534.10.2.4.5.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.534.10.2.2.3.1.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.534.10.2.4.4.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.534.10.2.2.3.2.0"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_test_result_info" multiplier="1.0" name="ups.test.result" oid=".1.3.6.1.4.1.534.10.2.4.8.0"/>
+		<snmp_info flag_ok="yes" lookup="eaton_ats_output_status_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.534.10.2.3.3.2.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.534.10.2.5.1.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.low" oid=".1.3.6.1.4.1.534.10.2.5.5.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.high" oid=".1.3.6.1.4.1.534.10.2.5.6.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity" oid=".1.3.6.1.4.1.534.10.2.5.2.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.low" oid=".1.3.6.1.4.1.534.10.2.5.7.0" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.high" oid=".1.3.6.1.4.1.534.10.2.5.8.0" writable="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.534.10.2.1.2.0" mib_name="eaton_ats" name="eaton_ats" oid=".1.3.6.1.4.1.705.1" snmp_info="eaton_ats_mib" version="0.11"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/eaton-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/eaton-mib.dmf
@@ -0,0 +1,428 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="marlin_threshold_voltage_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low voltage warning!"/>
+		<lookup_info oid="2" value="low voltage critical!"/>
+		<lookup_info oid="3" value="high voltage warning!"/>
+		<lookup_info oid="4" value="high voltage critical!"/>
+	</lookup>
+	<lookup name="marlin_ambient_presence_info">
+		<lookup_info oid="-1" value="unknown"/>
+		<lookup_info oid="0" value="no"/>
+		<lookup_info oid="1" value="yes"/>
+	</lookup>
+	<lookup name="eaton_outlet_switchability_info">
+		<lookup_info oid="-1" value="yes"/>
+		<lookup_info oid="0" value="yes"/>
+	</lookup>
+	<lookup name="marlin_outlet_status_info">
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="pendingOff"/>
+		<lookup_info oid="3" value="pendingOn"/>
+	</lookup>
+	<lookup name="marlin_ambient_drycontacts_info">
+		<lookup_info oid="-1" value="unknown"/>
+		<lookup_info oid="0" value="open"/>
+		<lookup_info oid="1" value="closed"/>
+	</lookup>
+	<lookup name="pulizzi_sw_outlet_switchability_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="yes"/>
+	</lookup>
+	<lookup name="marlin_threshold_current_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low current warning!"/>
+		<lookup_info oid="2" value="low current critical!"/>
+		<lookup_info oid="3" value="high current warning!"/>
+		<lookup_info oid="4" value="high current critical!"/>
+	</lookup>
+	<lookup name="marlin_threshold_frequency_status_info">
+		<lookup_info oid="0" value="good"/>
+		<lookup_info oid="1" value="out-of-range"/>
+	</lookup>
+	<lookup name="marlin_threshold_temperature_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low temperature warning!"/>
+		<lookup_info oid="2" value="low temperature critical!"/>
+		<lookup_info oid="3" value="high temperature warning!"/>
+		<lookup_info oid="4" value="high temperature critical!"/>
+	</lookup>
+	<lookup name="marlin_threshold_status_info">
+		<lookup_info oid="0" value="good"/>
+		<lookup_info oid="1" value="warning-low"/>
+		<lookup_info oid="2" value="critical-low"/>
+		<lookup_info oid="3" value="warning-high"/>
+		<lookup_info oid="4" value="critical-high"/>
+	</lookup>
+	<lookup name="eaton_outlet_status_info">
+		<lookup_info oid="-1" value="error"/>
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="cycling"/>
+	</lookup>
+	<lookup name="eaton_outlet_type_info">
+		<lookup_info oid="0" value="unknown"/>
+		<lookup_info oid="1" value="iecC13"/>
+		<lookup_info oid="2" value="iecC19"/>
+		<lookup_info oid="10" value="uk"/>
+		<lookup_info oid="11" value="french"/>
+		<lookup_info oid="12" value="schuko"/>
+		<lookup_info oid="20" value="nema515"/>
+		<lookup_info oid="21" value="nema51520"/>
+		<lookup_info oid="22" value="nema520"/>
+		<lookup_info oid="23" value="nemaL520"/>
+		<lookup_info oid="24" value="nemaL530"/>
+		<lookup_info oid="25" value="nema615"/>
+		<lookup_info oid="26" value="nema620"/>
+		<lookup_info oid="27" value="nemaL620"/>
+		<lookup_info oid="28" value="nemaL630"/>
+		<lookup_info oid="29" value="nemaL715"/>
+		<lookup_info oid="30" value="rf203p277"/>
+	</lookup>
+	<lookup name="marlin_outletgroups_status_info">
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="rebooting"/>
+		<lookup_info oid="3" value="mixed"/>
+	</lookup>
+	<lookup name="marlin_outlet_group_type_info">
+		<lookup_info oid="0" value="unknown"/>
+		<lookup_info oid="1" value="breaker1pole"/>
+		<lookup_info oid="2" value="breaker2pole"/>
+		<lookup_info oid="3" value="breaker3pole"/>
+		<lookup_info oid="4" value="outlet-section"/>
+		<lookup_info oid="5" value="user-defined"/>
+	</lookup>
+	<lookup name="marlin_threshold_humidity_alarms_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="low humidity warning!"/>
+		<lookup_info oid="2" value="low humidity critical!"/>
+		<lookup_info oid="3" value="high humidity warning!"/>
+		<lookup_info oid="4" value="high humidity critical!"/>
+	</lookup>
+	<lookup name="pulizzi_sw_outlet_status_info">
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="off"/>
+	</lookup>
+	<lookup name="marlin_input_type_info">
+		<lookup_info oid="1" value="1"/>
+		<lookup_info oid="2" value="2"/>
+		<lookup_info oid="3" value="3"/>
+		<lookup_info oid="4" value="3"/>
+	</lookup>
+	<lookup name="marlin_threshold_frequency_alarm_info">
+		<lookup_info oid="0" value=""/>
+		<lookup_info oid="1" value="frequency out of range!"/>
+	</lookup>
+        <functions name="eaton_functions">
+          <function name="device.amperes">
+            function deviceamperes(device)
+                power = tonumber(lua_C_gateway("input.power", device))
+                voltage = tonumber(lua_C_gateway("input.voltage", device))
+                if voltage ~= 0 and power ~= 0 then
+                    return power / voltage
+                else
+                    return nil
+                end
+            end
+          </function>
+          <function name="device.luaOutlet">
+            function deviceluaOutlet(device)
+                outlet = tonumber(lua_C_gateway("outlet.count", device))
+                if outlet ~= 0 then
+                  for i=0,outlet,1
+                    do
+                      publish_Lua_dstate("device."..device..".outlet."..i..".wastePower", wastePower(device, i))
+                    end
+                end
+                
+                return nil
+            end
+            
+            
+            function wastePower(device, outlet)
+                power = tonumber(lua_C_gateway("outlet."..outlet..".power", device))
+                realpower = tonumber(lua_C_gateway("outlet."..outlet..".realpower", device))
+                
+                return power - realpower
+            end
+          </function>
+        </functions>
+	<snmp name="eaton_marlin_mib">
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.amperes" string="yes" function="eaton_functions"/>
+                <snmp_info flag_ok="yes" multiplier="128.0" name="device.luaOutlet" string="yes" function="eaton_functions"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.4.%i" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.part" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.3.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.2.1.2.2.1.6.2" static="yes" string="yes"/>
+		<snmp_info default="1" multiplier="1.0" name="device.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid="1.3.6.1.4.1.534.6.6.7.1.2.1.2.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.4.%i" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.5.%i" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info lookup="marlin_input_type_info" multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.2.%i.1" static="yes"/>
+		<snmp_info multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.3.%i.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_frequency_status_info" multiplier="128.0" name="input.frequency.status" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.4.%i.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_frequency_alarm_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.4.%i.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.load" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.11.%i.1.3" positive="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L1.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L1.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.2" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L2.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.2" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L2.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.2" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.3" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L3.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.3" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="L3.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.4.0.1.3" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.5.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.6.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.7.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.8.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.1" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L1.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L1.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.1" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L1.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.1" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.2" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.2" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L2.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.2" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L2.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.2" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L2.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.2" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.3" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.3.0.1.3" power_status="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="input.L3.current.status" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.3" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="L3.alarm" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.5.0.1.3" string="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.6.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.7.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.8.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="input.L3.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.9.0.1.3" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.5.1.4.0.1" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.4" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.3" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.5.1.3.0.1" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.4" positive="yes" unique="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L1.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.1" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L2.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.2" positive="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.L3.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.3" positive="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_presence_info" multiplier="128.0" name="ambient.present" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.3.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="ambient.temperature.status" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_temperature_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.4.0.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.6.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.8.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.temperature.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.1.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_status_info" multiplier="128.0" name="ambient.humidity.status" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_threshold_humidity_alarms_info" multiplier="128.0" name="ups.alarm" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.5.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.4.0.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.6.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.7.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.8.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ambient.humidity.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.7.2.1.9.0.1" positive="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_drycontacts_info" multiplier="128.0" name="ambient.contacts.1.status" oid=".1.3.6.1.4.1.534.6.6.7.7.3.1.4.0.1" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_ambient_drycontacts_info" multiplier="128.0" name="ambient.contacts.2.status" oid=".1.3.6.1.4.1.534.6.6.7.7.3.1.4.0.2" string="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" flag_ok="yes" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.22.0" static="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.frequency" oid=".1.3.6.1.4.1.534.6.6.7.3.1.1.3.0.1" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.voltage" oid=".1.3.6.1.4.1.534.6.6.7.3.2.1.3.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="0.01" name="outlet.current" oid=".1.3.6.1.4.1.534.6.6.7.3.3.1.4.0.1.1" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.realpower" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.4.0.1.4" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.534.6.6.7.3.4.1.3.0.1.4" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.534.6.6.7.6.1.1.3.0.%i" outlet="yes" static="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="marlin_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.2.0.%i" outlet="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.1" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.2" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.3" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.4" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.5" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.groupid" oid=".1.3.6.1.4.1.534.6.6.7.6.2.1.3.0.%i.6" outlet="yes" static="yes" string="yes" unique="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.3.0.%i" outlet="yes"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.%i.current.status" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.4.0.%i" outlet="yes" string="yes"/>
+		<snmp_info lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="outlet.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.4.0.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.5.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.6.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.7.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.4.1.8.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.7.6.5.1.3.0.%i" outlet="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.2.0.%i" outlet="yes"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.%i.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.3.0.%i" outlet="yes" string="yes"/>
+		<snmp_info lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="outlet.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.3.0.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.4.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.5.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.6.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.6.3.1.7.0.%i" outlet="yes" positive="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.534.6.6.7.6.5.1.2.0.%i" outlet="yes"/>
+		<snmp_info default="no" flag_ok="yes" lookup="eaton_outlet_switchability_info" multiplier="128.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.3.0.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info default="unknown" lookup="eaton_outlet_type_info" multiplier="128.0" name="outlet.%i.type" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.5.0.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.group.count" oid=".1.3.6.1.4.1.534.6.6.7.1.2.1.21.%i" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.group.%i.id" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.2.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="128.0" name="outlet.group.%i.name" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.3.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1" writable="yes"/>
+		<snmp_info lookup="marlin_outlet_group_type_info" multiplier="128.0" name="outlet.group.%i.type" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.4.%i.%i" outlet_group="yes" static="yes" string="yes" type_daisy="1"/>
+		<snmp_info flag_ok="yes" lookup="marlin_outletgroups_status_info" multiplier="128.0" name="outlet.group.%i.status" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.2.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.count" oid=".1.3.6.1.4.1.534.6.6.7.5.1.1.6.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.group.%i.voltage.status" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_voltage_alarms_info" multiplier="128.0" name="outlet.group.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.5.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.6.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.7.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.voltage.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.3.1.8.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.nominal" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.2.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_status_info" multiplier="128.0" name="outlet.group.%i.current.status" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info lookup="marlin_threshold_current_alarms_info" multiplier="128.0" name="outlet.group.%i.alarm" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.4.%i.%i" outlet_group="yes" string="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.load" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.10.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.low.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.5.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.low.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.6.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.high.warning" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.7.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.group.%i.current.high.critical" oid=".1.3.6.1.4.1.534.6.6.7.5.4.1.8.%i.%i" outlet_group="yes" positive="yes" type_daisy="1" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.7.5.5.1.3.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info multiplier="1.0" name="outlet.group.%i.power" oid=".1.3.6.1.4.1.534.6.6.7.5.5.1.2.%i.%i" outlet_group="yes" positive="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.3.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.4.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.7.6.6.1.5.%i.%i" outlet="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.3.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.4.%i.%i" outlet_group="yes" type_daisy="1"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.group.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.7.5.6.1.5.%i.%i" outlet_group="yes" type_daisy="1"/>
+	</snmp>
+	<snmp name="eaton_aphel_revelation_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU Managed" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.534.6.6.6.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.534.6.6.6.1.1.6.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.534.6.6.6.1.1.13.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.534.6.6.6.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.534.6.6.6.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="ups.temperature" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.5.0" power_status="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.534.6.6.6.1.2.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.current" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.voltage" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.2.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.realpower" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.3.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.534.6.6.6.1.3.1.4.0" power_status="yes"/>
+		<snmp_info default="yes" multiplier="1.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.2.%i" outlet="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="eaton_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.4.%i" outlet="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.maximum" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.5.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.7.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.6.%i" outlet="yes"/>
+		<snmp_info multiplier="0.01" name="outlet.%i.powerfactor" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.9.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.8.%i" outlet="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature" oid=".1.3.6.1.4.1.534.6.6.6.2.2.1.3.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.low" oid="1.3.6.1.4.1.534.6.6.6.2.2.1.6.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.temperature.high" oid="1.3.6.1.4.1.534.6.6.6.2.2.1.7.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.3.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.low" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.6.0"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ambient.humidity.high" oid=".1.3.6.1.4.1.534.6.6.6.2.4.1.7.0"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="2.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.534.6.6.6.1.2.2.1.3.%i" outlet="yes"/>
+	</snmp>
+	<snmp name="eaton_aphel_genesisII_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Eaton Powerware ePDU Monitored" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.17373.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="unknown" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.17373.3.1.4.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.17373.3.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.17373.3.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.17373.3.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.1.current" oid=".1.3.6.1.4.1.17373.3.2.1.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.2.current" oid=".1.3.6.1.4.1.17373.3.2.2.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.3.current" oid=".1.3.6.1.4.1.17373.3.2.3.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.4.current" oid=".1.3.6.1.4.1.17373.3.2.4.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.5.current" oid=".1.3.6.1.4.1.17373.3.2.5.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.6.current" oid=".1.3.6.1.4.1.17373.3.2.6.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.7.current" oid=".1.3.6.1.4.1.17373.3.2.7.0" positive="yes"/>
+		<snmp_info multiplier="0.1" name="outlet.8.current" oid=".1.3.6.1.4.1.17373.3.2.8.0" positive="yes"/>
+	</snmp>
+	<snmp name="eaton_pulizzi_switched_mib">
+		<snmp_info absent="yes" default="EATON | Powerware" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Switched ePDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.20677.2.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="unknown" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.20677.2.2.6.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="EATON" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Switched ePDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.20677.2.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.date" oid=".1.3.6.1.4.1.20677.2.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.time" oid=".1.3.6.1.4.1.20677.2.1.3.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.current" oid=".1.3.6.1.4.1.20677.2.8.6.4.2.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.voltage" oid=".1.3.6.1.4.1.20677.2.8.6.4.1.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.20677.2.8.6.4.3.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.20677.2.6.1.%i.1.0" outlet="yes" static="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="pulizzi_sw_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.20677.2.6.3.%i.0" outlet="yes" string="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info default="yes" flag_ok="yes" lookup="pulizzi_sw_outlet_switchability_info" multiplier="128.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.20677.2.6.3.%i.0" outlet="yes" static="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.delay.reboot" oid=".1.3.6.1.4.1.20677.2.6.1.%i.5.0" outlet="yes" writable="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.delay.start" oid=".1.3.6.1.4.1.20677.2.6.1.%i.4.0" outlet="yes" writable="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="load.on" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="2.0" name="load.off" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="3.0" name="load.on.delay" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info command="yes" multiplier="4.0" name="load.off.delay" oid=".1.3.6.1.4.1.20677.2.6.2.1.0"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="2.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+		<snmp_info battery_status="yes" command="yes" multiplier="3.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.20677.2.6.2.%i.0" outlet="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.7.1.2.1.2.0" mib_name="eaton_epdu" name="eaton_marlin" oid=".1.3.6.1.4.1.534.6.6.7" snmp_info="eaton_marlin_mib" version="0.39"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.534.6.6.6.1.1.12.0" mib_name="aphel_revelation" name="aphel_revelation" oid=".1.3.6.1.4.1.534.6.6.6" snmp_info="eaton_aphel_revelation_mib" version="0.48"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.17373.3.1.1.0" mib_name="aphel_genesisII" name="aphel_genesisII" oid=".1.3.6.1.4.1.17373" snmp_info="eaton_aphel_genesisII_mib" version="0.48"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched1" name="pulizzi_switched1" oid=".1.3.6.1.4.1.20677.1" snmp_info="eaton_pulizzi_switched_mib" version="0.2"/>
+	<mib2nut auto_check=".1.3.6.1.4.1.20677.1" mib_name="pulizzi_switched2" name="pulizzi_switched2" oid=".1.3.6.1.4.1.20677.2" snmp_info="eaton_pulizzi_switched_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/huawei-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/huawei-mib.dmf
@@ -0,0 +1,116 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="huawei_voltrating_info">
+		<lookup_info oid="1" value="200"/>
+		<lookup_info oid="2" value="208"/>
+		<lookup_info oid="3" value="220"/>
+		<lookup_info oid="4" value="380"/>
+		<lookup_info oid="5" value="400"/>
+		<lookup_info oid="6" value="415"/>
+		<lookup_info oid="7" value="480"/>
+		<lookup_info oid="8" value="600"/>
+		<lookup_info oid="9" value="690"/>
+	</lookup>
+	<lookup name="huawei_supplymethod_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OL BYPASS"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="OB"/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value="OL ECO"/>
+		<lookup_info oid="7" value="OB ECO"/>
+	</lookup>
+	<lookup name="huawei_pwrrating_info">
+		<lookup_info oid="1" value="80000"/>
+		<lookup_info oid="2" value="100000"/>
+		<lookup_info oid="3" value="120000"/>
+		<lookup_info oid="4" value="160000"/>
+		<lookup_info oid="5" value="200000"/>
+		<lookup_info oid="6" value="30000"/>
+		<lookup_info oid="7" value="40000"/>
+		<lookup_info oid="8" value="60000"/>
+		<lookup_info oid="9" value="2400000"/>
+		<lookup_info oid="10" value="2500000"/>
+		<lookup_info oid="11" value="2800000"/>
+		<lookup_info oid="12" value="3000000"/>
+	</lookup>
+	<lookup name="huawei_battstate_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value=""/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value="CHRG"/>
+		<lookup_info oid="6" value="DISCHRG"/>
+	</lookup>
+	<lookup name="huawei_phase_info">
+		<lookup_info oid="1" value="1"/>
+		<lookup_info oid="2" value="3"/>
+	</lookup>
+	<lookup name="huawei_freqrating_info">
+		<lookup_info oid="1" value="50"/>
+		<lookup_info oid="2" value="60"/>
+	</lookup>
+	<lookup name="huawei_test_result_info">
+		<lookup_info oid="1" value="done and passed"/>
+		<lookup_info oid="2" value="done and warning"/>
+		<lookup_info oid="3" value="done and error"/>
+		<lookup_info oid="4" value="aborted"/>
+		<lookup_info oid="5" value="in progress"/>
+		<lookup_info oid="6" value="no test initiated"/>
+	</lookup>
+	<snmp name="huawei_mib">
+		<snmp_info absent="yes" default="Huawei" flag_ok="yes" multiplier="128.0" name="ups.mfr" string="yes"/>
+		<snmp_info default="Generic SNMP UPS" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.2011.6.174.1.2.100.1.2.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.2011.6.174.1.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ups.time" oid=".1.3.6.1.4.1.2011.6.174.1.11.1.0"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.2011.6.174.1.2.100.1.3.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.2011.6.174.1.2.100.1.5.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="huawei_supplymethod_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.2011.6.174.1.2.101.1.1.1"/>
+		<snmp_info battery_status="yes" flag_ok="yes" lookup="huawei_battstate_info" multiplier="1.0" name="ups.status" oid=".1.3.6.1.4.1.2011.6.174.1.2.101.1.3.1"/>
+		<snmp_info default="" lookup="huawei_test_result_info" multiplier="128.0" name="ups.test.result" oid=".1.3.6.1.2.1.33.1.7.3.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="3" flag_ok="yes" lookup="huawei_phase_info" multiplier="128.0" name="input.phases" oid=".1.3.6.1.4.1.2011.6.174.1.102.100.1.8" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L1-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L2-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.2.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L3-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.3.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.frequency" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.5.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.6.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.7.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.L1.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.8.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.L2.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.9.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.L3.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.3.100.1.10.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.bypass.L1-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.5.100.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.bypass.L2-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.5.100.1.2.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.bypass.L3-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.5.100.1.3.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.bypass.frequency" oid=".1.3.6.1.4.1.2011.6.174.1.5.100.1.4.1"/>
+		<snmp_info absent="yes" default="3" flag_ok="yes" lookup="huawei_phase_info" multiplier="128.0" name="output.phases" oid=".1.3.6.1.4.1.2011.6.174.1.102.100.1.9" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L2-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.2.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L3-N.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.3.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.4.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.5.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.6.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="output.frequency" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.7.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.realpower" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.8.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.realpower" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.9.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.realpower" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.10.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.power" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.11.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L2.power" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.12.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L3.power" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.13.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L1.power.percent" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.14.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L2.power.percent" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.15.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.L3.power.percent" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.16.1"/>
+		<snmp_info flag_ok="yes" lookup="huawei_voltrating_info" multiplier="128.0" name="output.voltage.nominal" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.17.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="huawei_freqrating_info" multiplier="128.0" name="output.frequency.nominal" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.18.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" lookup="huawei_pwrrating_info" multiplier="128.0" name="output.power.nominal" oid=".1.3.6.1.4.1.2011.6.174.1.2.100.1.6.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="output.L1.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.19.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="output.L2.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.20.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="output.L2.powerfactor" oid=".1.3.6.1.4.1.2011.6.174.1.4.100.1.21.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.2011.6.174.1.6.100.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="battery.current" oid=".1.3.6.1.4.1.2011.6.174.1.6.100.1.2.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.2011.6.174.1.6.100.1.3.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="battery.runtime" oid=".1.3.6.1.4.1.2011.6.174.1.6.100.1.4.1"/>
+	</snmp>
+	<mib2nut mib_name="huawei" name="huawei" oid=".1.3.6.1.4.1.8072.3.2.10" snmp_info="huawei_mib" version="0.1"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/ietf-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/ietf-mib.dmf
@@ -0,0 +1,136 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="ietf_beeper_status_info">
+		<lookup_info oid="1" value="disabled"/>
+		<lookup_info oid="2" value="enabled"/>
+		<lookup_info oid="3" value="muted"/>
+	</lookup>
+	<lookup name="ietf_test_result_info">
+		<lookup_info oid="1" value="done and passed"/>
+		<lookup_info oid="2" value="done and warning"/>
+		<lookup_info oid="3" value="done and error"/>
+		<lookup_info oid="4" value="aborted"/>
+		<lookup_info oid="5" value="in progress"/>
+		<lookup_info oid="6" value="no test initiated"/>
+	</lookup>
+	<lookup name="ietf_test_active_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="TEST"/>
+		<lookup_info oid="4" value="TEST"/>
+		<lookup_info oid="5" value="CAL"/>
+	</lookup>
+	<lookup name="ietf_power_source_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="OL BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+	</lookup>
+	<lookup name="ietf_battery_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="LB"/>
+		<lookup_info oid="4" value="LB"/>
+	</lookup>
+	<lookup name="ietf_overload_info">
+		<lookup_info oid="1" value="OVER"/>
+	</lookup>
+	<lookup name="ietf_yes_no_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+	<snmp name="ietf_mib">
+		<snmp_info default="Generic" multiplier="128.0" name="ups.mfr" oid="1.3.6.1.2.1.33.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP UPS" multiplier="128.0" name="ups.model" oid="1.3.6.1.2.1.33.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid="1.3.6.1.2.1.33.1.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware.aux" oid="1.3.6.1.2.1.33.1.1.4.0" static="yes" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="ietf_battery_info" multiplier="128.0" name="ups.status" oid="1.3.6.1.2.1.33.1.2.1.0" string="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime" oid="1.3.6.1.2.1.33.1.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.charge" oid="1.3.6.1.2.1.33.1.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.voltage" oid="1.3.6.1.2.1.33.1.2.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid="1.3.6.1.2.1.33.1.2.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.temperature" oid="1.3.6.1.2.1.33.1.2.7.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid="1.3.6.1.2.1.33.1.3.2.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.frequency" oid="1.3.6.1.2.1.33.1.3.3.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.frequency" oid="1.3.6.1.2.1.33.1.3.3.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.frequency" oid="1.3.6.1.2.1.33.1.3.3.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.frequency" oid="1.3.6.1.2.1.33.1.3.3.1.2.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.voltage" oid="1.3.6.1.2.1.33.1.3.3.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1-N.voltage" oid="1.3.6.1.2.1.33.1.3.3.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2-N.voltage" oid="1.3.6.1.2.1.33.1.3.3.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3-N.voltage" oid="1.3.6.1.2.1.33.1.3.3.1.3.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.current" oid="1.3.6.1.2.1.33.1.3.3.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.current" oid="1.3.6.1.2.1.33.1.3.3.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.current" oid="1.3.6.1.2.1.33.1.3.3.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.current" oid="1.3.6.1.2.1.33.1.3.3.1.4.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.realpower" oid="1.3.6.1.2.1.33.1.3.3.1.5.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1.realpower" oid="1.3.6.1.2.1.33.1.3.3.1.5.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2.realpower" oid="1.3.6.1.2.1.33.1.3.3.1.5.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3.realpower" oid="1.3.6.1.2.1.33.1.3.3.1.5.3"/>
+		<snmp_info default="" lookup="ietf_power_source_info" multiplier="128.0" name="ups.status" oid="1.3.6.1.2.1.33.1.4.1.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid="1.3.6.1.2.1.33.1.4.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid="1.3.6.1.2.1.33.1.4.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid="1.3.6.1.2.1.33.1.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1-N.voltage" oid="1.3.6.1.2.1.33.1.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2-N.voltage" oid="1.3.6.1.2.1.33.1.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3-N.voltage" oid="1.3.6.1.2.1.33.1.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid="1.3.6.1.2.1.33.1.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1.current" oid="1.3.6.1.2.1.33.1.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2.current" oid="1.3.6.1.2.1.33.1.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3.current" oid="1.3.6.1.2.1.33.1.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.realpower" oid="1.3.6.1.2.1.33.1.4.4.1.4.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.realpower" oid="1.3.6.1.2.1.33.1.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.realpower" oid="1.3.6.1.2.1.33.1.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.realpower" oid="1.3.6.1.2.1.33.1.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid="1.3.6.1.2.1.33.1.4.4.1.5.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.bypass.phases" oid="1.3.6.1.2.1.33.1.5.2.0" power_status="yes"/>
+		<snmp_info bypass_1_phase="yes" bypass_3_phase="yes" default="" multiplier="0.1" name="input.bypass.frequency" oid="1.3.6.1.2.1.33.1.5.1.0"/>
+		<snmp_info bypass_1_phase="yes" default="" multiplier="1.0" name="input.bypass.voltage" oid="1.3.6.1.2.1.33.1.5.3.1.2.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L1-N.voltage" oid="1.3.6.1.2.1.33.1.5.3.1.2.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L2-N.voltage" oid="1.3.6.1.2.1.33.1.5.3.1.2.2"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L3-N.voltage" oid="1.3.6.1.2.1.33.1.5.3.1.2.3"/>
+		<snmp_info bypass_1_phase="yes" default="" multiplier="0.1" name="input.bypass.current" oid="1.3.6.1.2.1.33.1.5.3.1.3.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="0.1" name="input.bypass.L1.current" oid="1.3.6.1.2.1.33.1.5.3.1.3.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="0.1" name="input.bypass.L2.current" oid="1.3.6.1.2.1.33.1.5.3.1.3.2"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="0.1" name="input.bypass.L3.current" oid="1.3.6.1.2.1.33.1.5.3.1.3.3"/>
+		<snmp_info bypass_1_phase="yes" default="" multiplier="1.0" name="input.bypass.realpower" oid="1.3.6.1.2.1.33.1.5.3.1.4.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L1.realpower" oid="1.3.6.1.2.1.33.1.5.3.1.4.1"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L2.realpower" oid="1.3.6.1.2.1.33.1.5.3.1.4.2"/>
+		<snmp_info bypass_3_phase="yes" default="" multiplier="1.0" name="input.bypass.L3.realpower" oid="1.3.6.1.2.1.33.1.5.3.1.4.3"/>
+		<snmp_info default="" lookup="ietf_overload_info" multiplier="128.0" name="ups.status" oid="1.3.6.1.2.1.33.1.6.3.8" power_status="yes" string="yes"/>
+		<snmp_info default="" lookup="ietf_test_active_info" multiplier="128.0" name="ups.status" oid="1.3.6.1.2.1.33.1.7.1.0" power_status="yes" string="yes"/>
+		<snmp_info command="yes" default="1.3.6.1.2.1.33.1.7.7.2" multiplier="0.0" name="test.battery.stop" oid="1.3.6.1.2.1.33.1.7.1.0"/>
+		<snmp_info command="yes" default="1.3.6.1.2.1.33.1.7.7.3" multiplier="0.0" name="test.battery.start" oid="1.3.6.1.2.1.33.1.7.1.0"/>
+		<snmp_info command="yes" default="1.3.6.1.2.1.33.1.7.7.4" multiplier="0.0" name="test.battery.start.quick" oid="1.3.6.1.2.1.33.1.7.1.0"/>
+		<snmp_info command="yes" default="1.3.6.1.2.1.33.1.7.7.5" multiplier="0.0" name="test.battery.start.deep" oid="1.3.6.1.2.1.33.1.7.1.0"/>
+		<snmp_info default="" lookup="ietf_test_result_info" multiplier="128.0" name="ups.test.result" oid="1.3.6.1.2.1.33.1.7.3.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="8.0" name="ups.timer.shutdown" oid="1.3.6.1.2.1.33.1.8.2.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info command="yes" default="" multiplier="0.0" name="load.off" oid="1.3.6.1.2.1.33.1.8.2.0"/>
+		<snmp_info default="" multiplier="8.0" name="ups.timer.start" oid="1.3.6.1.2.1.33.1.8.3.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info command="yes" default="" multiplier="0.0" name="load.on" oid="1.3.6.1.2.1.33.1.8.3.0"/>
+		<snmp_info default="" multiplier="8.0" name="ups.timer.reboot" oid="1.3.6.1.2.1.33.1.8.4.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" lookup="ietf_yes_no_info" multiplier="128.0" name="ups.start.auto" oid="1.3.6.1.2.1.33.1.8.5.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage.nominal" oid="1.3.6.1.2.1.33.1.9.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.frequency.nominal" oid="1.3.6.1.2.1.33.1.9.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.nominal" oid="1.3.6.1.2.1.33.1.9.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency.nominal" oid="1.3.6.1.2.1.33.1.9.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.power.nominal" oid="1.3.6.1.2.1.33.1.9.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.realpower.nominal" oid="1.3.6.1.2.1.33.1.9.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime.low" oid="1.3.6.1.2.1.33.1.9.7.0" power_status="yes"/>
+		<snmp_info default="" lookup="ietf_beeper_status_info" multiplier="128.0" name="ups.beeper.status" oid="1.3.6.1.2.1.33.1.9.8.0" power_status="yes" string="yes"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="beeper.disable" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info command="yes" default="" multiplier="2.0" name="beeper.enable" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info command="yes" default="" multiplier="3.0" name="beeper.mute" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info default="" multiplier="1.0" name="input.transfer.low" oid="1.3.6.1.2.1.33.1.9.9.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.transfer.high" oid="1.3.6.1.2.1.33.1.9.10.0" power_status="yes"/>
+	</snmp>
+	<mib2nut auto_check="1.3.6.1.2.1.33.1.1.1.0" mib_name="ietf" name="ietf" oid=".1.3.6.1.2.1.33" power_status="1.3.6.1.2.1.33.1.4.1.0" snmp_info="ietf_mib" version="1.51"/>
+	<mib2nut mib_name="ietf" name="tripplite_ietf" oid=".1.3.6.1.4.1.850.1" snmp_info="ietf_mib" version="1.51"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/mge-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/mge-mib.dmf
@@ -0,0 +1,155 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="mge_power_source_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="4" value="BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="BOOST"/>
+		<lookup_info oid="7" value="TRIM"/>
+	</lookup>
+	<lookup name="mge_output_util_off_info">
+		<lookup_info oid="1" value="OFF"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_replacebatt_info">
+		<lookup_info oid="1" value="RB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_trim_info">
+		<lookup_info oid="1" value="TRIM"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_onbatt_info">
+		<lookup_info oid="1" value="OB"/>
+		<lookup_info oid="2" value="OL"/>
+	</lookup>
+	<lookup name="mge_test_result_info">
+		<lookup_info oid="1" value="done and passed"/>
+		<lookup_info oid="2" value="done and warning"/>
+		<lookup_info oid="3" value="done and error"/>
+		<lookup_info oid="4" value="aborted"/>
+		<lookup_info oid="5" value="in progress"/>
+		<lookup_info oid="6" value="no test initiated"/>
+	</lookup>
+	<lookup name="mge_boost_info">
+		<lookup_info oid="1" value="BOOST"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_transfer_reason_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="input voltage out of range"/>
+		<lookup_info oid="3" value="input frequency out of range"/>
+		<lookup_info oid="4" value="utility off"/>
+	</lookup>
+	<lookup name="mge_bypass_info">
+		<lookup_info oid="1" value="BYPASS"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_beeper_status_info">
+		<lookup_info oid="1" value="disabled"/>
+		<lookup_info oid="2" value="enabled"/>
+		<lookup_info oid="3" value="muted"/>
+	</lookup>
+	<lookup name="mge_lowbatt_info">
+		<lookup_info oid="1" value="LB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_overload_info">
+		<lookup_info oid="1" value="OVER"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="mge_yes_no_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+        <functions name="mge_functions">
+          <function name="ups.mfr">
+              io.write("This is coming from lua\n")
+          </function>
+          <function name="ups.model">
+              io.write("This is ALSO coming from lua\n")
+          </function>
+        </functions>
+	<snmp name="mge_mib">
+		<snmp_info absent="yes" default="Eaton" flag_ok="yes" multiplier="128.0" name="ups.mfr" function="mge_functions" string="yes"/>
+		<snmp_info absent="yes" default="Generic SNMP UPS" flag_ok="yes" multiplier="128.0" name="ups.model" function="mge_functions" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.705.1.1.7.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.705.1.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.705.1.12.12.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.705.1.7.2.1.4.1" output_1_phase="yes"/>
+		<snmp_info default="" lookup="mge_beeper_status_info" multiplier="128.0" name="ups.beeper.status" oid="1.3.6.1.2.1.33.1.9.8.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.L1.load" oid=".1.3.6.1.4.1.705.1.7.2.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.L2.load" oid=".1.3.6.1.4.1.705.1.7.2.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.L3.load" oid=".1.3.6.1.4.1.705.1.7.2.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="" lookup="mge_test_result_info" multiplier="128.0" name="ups.test.result" oid=".1.3.6.1.2.1.33.1.7.3.0" power_status="yes" string="yes"/>
+		<snmp_info absent="yes" default="20" flag_ok="yes" multiplier="6.0" name="ups.delay.shutdown" oid="1.3.6.1.2.1.33.1.8.2.0" string="yes" writable="yes"/>
+		<snmp_info absent="yes" default="30" flag_ok="yes" multiplier="6.0" name="ups.delay.start" oid="1.3.6.1.2.1.33.1.8.3.0" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.shutdown" oid="1.3.6.1.2.1.33.1.8.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.start" oid="1.3.6.1.2.1.33.1.8.3.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="ups.timer.reboot" oid="1.3.6.1.2.1.33.1.8.4.0"/>
+		<snmp_info default="" flag_ok="yes" lookup="mge_yes_no_info" multiplier="1.0" name="ups.start.auto" oid="1.3.6.1.2.1.33.1.8.5.0" writable="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_replacebatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.5.11.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_lowbatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.5.14.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_lowbatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.5.16.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_onbatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.3.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_bypass_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.4.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_output_util_off_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.7.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_boost_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.8.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_overload_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.10.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="mge_trim_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.705.1.7.12.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="mge_power_source_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.2.1.33.1.4.1.0" power_status="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.705.1.6.1.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.voltage" oid=".1.3.6.1.4.1.705.1.6.2.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1-N.voltage" oid=".1.3.6.1.4.1.705.1.6.2.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2-N.voltage" oid=".1.3.6.1.4.1.705.1.6.2.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3-N.voltage" oid=".1.3.6.1.4.1.705.1.6.2.1.2.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.705.1.6.2.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.frequency" oid=".1.3.6.1.4.1.705.1.6.2.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.frequency" oid=".1.3.6.1.4.1.705.1.6.2.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.frequency" oid=".1.3.6.1.4.1.705.1.6.2.1.3.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.voltage.minimum" oid=".1.3.6.1.4.1.705.1.6.2.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1-N.voltage.minimum" oid=".1.3.6.1.4.1.705.1.6.2.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2-N.voltage.minimum" oid=".1.3.6.1.4.1.705.1.6.2.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3-N.voltage.minimum" oid=".1.3.6.1.4.1.705.1.6.2.1.4.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.voltage.maximum" oid=".1.3.6.1.4.1.705.1.6.2.1.5.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1-N.voltage.maximum" oid=".1.3.6.1.4.1.705.1.6.2.1.5.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2-N.voltage.maximum" oid=".1.3.6.1.4.1.705.1.6.2.1.5.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3-N.voltage.maximum" oid=".1.3.6.1.4.1.705.1.6.2.1.5.3"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.705.1.6.2.1.6.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.705.1.6.2.1.6.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.705.1.6.2.1.6.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.705.1.6.2.1.6.3"/>
+		<snmp_info default="" flag_ok="yes" lookup="mge_transfer_reason_info" multiplier="128.0" name="input.transfer.reason" oid=".1.3.6.1.4.1.705.1.6.4.0" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid=".1.3.6.1.4.1.705.1.7.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.705.1.7.2.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1-N.voltage" oid=".1.3.6.1.4.1.705.1.7.2.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2-N.voltage" oid=".1.3.6.1.4.1.705.1.7.2.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3-N.voltage" oid=".1.3.6.1.4.1.705.1.7.2.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.705.1.7.2.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1.frequency" oid=".1.3.6.1.4.1.705.1.7.2.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2.frequency" oid=".1.3.6.1.4.1.705.1.7.2.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3.frequency" oid=".1.3.6.1.4.1.705.1.7.2.1.3.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.705.1.7.2.1.5.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.705.1.7.2.1.5.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.705.1.7.2.1.5.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.705.1.7.2.1.5.3" output_3_phase="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.705.1.5.2.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.runtime" oid=".1.3.6.1.4.1.705.1.5.1.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.runtime.low" oid=".1.3.6.1.4.1.705.1.4.7.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="2.0" name="battery.charge.low" oid=".1.3.6.1.4.1.705.1.4.8.0" power_status="yes" string="yes" writable="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.705.1.5.5.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="ambient.temperature" oid=".1.3.6.1.4.1.705.1.8.1.0" power_status="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="ambient.humidity" oid=".1.3.6.1.4.1.705.1.8.2.0" power_status="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="Main Outlet" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="2.0" name="test.battery.start" oid=".1.3.6.1.4.1.705.1.10.4.0"/>
+		<snmp_info command="yes" default="" multiplier="1.0" name="beeper.disable" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info command="yes" default="" multiplier="2.0" name="beeper.enable" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info command="yes" default="" multiplier="3.0" name="beeper.mute" oid="1.3.6.1.2.1.33.1.9.8.0"/>
+		<snmp_info command="yes" default="" multiplier="20.0" name="load.off.delay" oid="1.3.6.1.2.1.33.1.8.2.0"/>
+		<snmp_info command="yes" default="" multiplier="30.0" name="load.on.delay" oid="1.3.6.1.2.1.33.1.8.3.0"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.705.1.1.1.0" mib_name="mge" name="mge" oid=".1.3.6.1.4.1.705.1" snmp_info="mge_mib" version="0.51"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/netvision-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/netvision-mib.dmf
@@ -0,0 +1,74 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="netvision_batt_info">
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="LB"/>
+		<lookup_info oid="4" value="LB"/>
+		<lookup_info oid="5" value="DISCHRG"/>
+		<lookup_info oid="6" value="RB"/>
+	</lookup>
+	<lookup name="netvision_onbatt_info">
+		<lookup_info oid="0" value="OL"/>
+		<lookup_info oid="1" value="OB"/>
+	</lookup>
+	<lookup name="netvision_output_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="OL BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value=""/>
+	</lookup>
+	<snmp name="netvision_mib">
+		<snmp_info default="SOCOMEC SICON UPS" flag_ok="yes" multiplier="128.0" name="ups.mfr" oid=".1.3.6.1.4.1.4555.1.1.1.1.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP UPS" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.4555.1.1.1.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.4555.1.1.1.1.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware.aux" oid=".1.3.6.1.4.1.4555.1.1.1.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="netvision_batt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.4555.1.1.1.1.2.1.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="netvision_output_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.1.0" power_status="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="netvision_onbatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.4555.1.1.1.1.6.3.2.0" power_status="yes" string="yes"/>
+		<snmp_info input_1_phase="yes" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4.1"/>
+		<snmp_info multiplier="1.0" name="input.phases" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.1.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.frequency" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.2.0"/>
+		<snmp_info input_1_phase="yes" multiplier="0.1" name="input.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5.1"/>
+		<snmp_info input_1_phase="yes" multiplier="0.1" name="input.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3.1"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L1-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5.1"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L1.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3.1"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L2-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5.2"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L2.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3.2"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L3-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.5.3"/>
+		<snmp_info input_3_phase="yes" multiplier="0.1" name="input.L3.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.3.3.1.3.3"/>
+		<snmp_info multiplier="1.0" name="output.phases" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.3.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.2.0"/>
+		<snmp_info multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info multiplier="1.0" name="output.load" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4.1" output_1_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L1-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L1.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info multiplier="1.0" name="output.L1.power.percent" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L2-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L2.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info multiplier="1.0" name="output.L2.power.percent" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L3-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info multiplier="0.1" name="output.L3.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info multiplier="1.0" name="output.L3.power.percent" oid=".1.3.6.1.4.1.4555.1.1.1.1.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info multiplier="1.0" name="input.bypass.phases" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.2.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.bypass.frequency" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.1.0"/>
+		<snmp_info bypass_1_phase="yes" multiplier="0.1" name="input.bypass.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2.1"/>
+		<snmp_info bypass_1_phase="yes" multiplier="0.1" name="input.bypass.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3.1"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L1-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2.1"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L1.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3.1"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L2-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2.2"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L2.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3.2"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L3-N.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.2.3"/>
+		<snmp_info bypass_3_phase="yes" multiplier="0.1" name="input.bypass.L3.current" oid=".1.3.6.1.4.1.4555.1.1.1.1.5.3.1.3.3"/>
+		<snmp_info default="" flag_ok="yes" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.4555.1.1.1.1.2.4.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="0.1" name="battery.voltage" oid=".1.3.6.1.4.1.4555.1.1.1.1.2.5.0"/>
+		<snmp_info default="" flag_ok="yes" multiplier="60.0" name="battery.runtime" oid=".1.3.6.1.4.1.4555.1.1.1.1.2.3.0"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.4555.1.1.1.1.1.1.0" mib_name="netvision" name="netvision" oid=".1.3.6.1.4.1.4555.1.1.1" snmp_info="netvision_mib" version="0.41"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/powerware-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/powerware-mib.dmf
@@ -0,0 +1,195 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="pw_alarm_lb">
+		<lookup_info oid="1" value="LB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="pw_mode_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="normal"/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value=""/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="parallel capacity"/>
+		<lookup_info oid="9" value="parallel redundancy"/>
+		<lookup_info oid="10" value="high efficiency"/>
+		<lookup_info oid="240" value=""/>
+		<lookup_info oid="100" value=""/>
+		<lookup_info oid="96" value=""/>
+		<lookup_info oid="81" value="high efficiency"/>
+		<lookup_info oid="80" value="normal"/>
+		<lookup_info oid="64" value=""/>
+		<lookup_info oid="16" value=""/>
+	</lookup>
+	<lookup name="pw_yes_no_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+	<lookup name="pw_batt_test_info">
+		<lookup_info oid="1" value="Unknown"/>
+		<lookup_info oid="2" value="Done and passed"/>
+		<lookup_info oid="3" value="Done and error"/>
+		<lookup_info oid="4" value="In progress"/>
+		<lookup_info oid="5" value="Not supported"/>
+		<lookup_info oid="6" value="Inhibited"/>
+		<lookup_info oid="7" value="Scheduled"/>
+	</lookup>
+	<lookup name="pw_abm_status_info">
+		<lookup_info oid="1" value="charging"/>
+		<lookup_info oid="2" value="discharging"/>
+		<lookup_info oid="3" value="floating"/>
+		<lookup_info oid="4" value="resting"/>
+		<lookup_info oid="5" value="unknown"/>
+		<lookup_info oid="6" value="disabled"/>
+	</lookup>
+	<lookup name="pw_alarm_ob">
+		<lookup_info oid="1" value="OB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="pw_battery_abm_status">
+		<lookup_info oid="1" value="CHRG"/>
+		<lookup_info oid="2" value="DISCHRG"/>
+	</lookup>
+	<lookup name="pw_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value="OL"/>
+		<lookup_info oid="10" value="OL"/>
+		<lookup_info oid="240" value="OB"/>
+		<lookup_info oid="100" value="BYPASS"/>
+		<lookup_info oid="96" value="BYPASS"/>
+		<lookup_info oid="81" value="OL"/>
+		<lookup_info oid="80" value="OL"/>
+		<lookup_info oid="64" value="OL"/>
+		<lookup_info oid="16" value="OFF"/>
+	</lookup>
+	<alarm name="pw_alarms">
+		<info_alarm oid="1.3.6.1.4.1.534.1.7.4" status="LB"/>
+		<info_alarm alarm="Output overload!" oid=".1.3.6.1.4.1.534.1.7.7" status="OVER"/>
+		<info_alarm alarm="Internal failure!" oid=".1.3.6.1.4.1.534.1.7.8"/>
+		<info_alarm alarm="Battery discharged!" oid=".1.3.6.1.4.1.534.1.7.9"/>
+		<info_alarm alarm="Inverter failure!" oid=".1.3.6.1.4.1.534.1.7.10"/>
+		<info_alarm alarm="On bypass!" oid=".1.3.6.1.4.1.534.1.7.11" status="BYPASS"/>
+		<info_alarm alarm="Bypass not available!" oid=".1.3.6.1.4.1.534.1.7.12"/>
+		<info_alarm alarm="Output off!" oid=".1.3.6.1.4.1.534.1.7.13" status="OFF"/>
+		<info_alarm alarm="Input failure!" oid=".1.3.6.1.4.1.534.1.7.14"/>
+		<info_alarm alarm="Building alarm!" oid=".1.3.6.1.4.1.534.1.7.15"/>
+		<info_alarm alarm="Shutdown imminent!" oid=".1.3.6.1.4.1.534.1.7.16"/>
+		<info_alarm alarm="On inverter!" oid=".1.3.6.1.4.1.534.1.7.17"/>
+		<info_alarm alarm="Breaker open!" oid=".1.3.6.1.4.1.534.1.7.20"/>
+		<info_alarm alarm="Battery bad!" oid=".1.3.6.1.4.1.534.1.7.23" status="RB"/>
+		<info_alarm alarm="Output off as requested!" oid=".1.3.6.1.4.1.534.1.7.24" status="OFF"/>
+		<info_alarm alarm="Diagnostic test failure!" oid=".1.3.6.1.4.1.534.1.7.25"/>
+		<info_alarm alarm="Communication with UPS lost!" oid=".1.3.6.1.4.1.534.1.7.26"/>
+		<info_alarm alarm="Shutdown pending!" oid=".1.3.6.1.4.1.534.1.7.27"/>
+		<info_alarm alarm="Bad ambient temperature!" oid=".1.3.6.1.4.1.534.1.7.29"/>
+		<info_alarm alarm="Redundancy lost!" oid=".1.3.6.1.4.1.534.1.7.30"/>
+		<info_alarm alarm="Bad temperature!" oid=".1.3.6.1.4.1.534.1.7.31"/>
+		<info_alarm alarm="Charger failure!" oid=".1.3.6.1.4.1.534.1.7.32"/>
+		<info_alarm alarm="Fan failure!" oid=".1.3.6.1.4.1.534.1.7.33"/>
+		<info_alarm alarm="Fuse failure!" oid=".1.3.6.1.4.1.534.1.7.34"/>
+		<info_alarm alarm="Powerswitch failure!" oid=".1.3.6.1.4.1.534.1.7.35"/>
+		<info_alarm alarm="Parallel or composite module failure!" oid=".1.3.6.1.4.1.534.1.7.36"/>
+		<info_alarm alarm="Using alternative power source!" oid=".1.3.6.1.4.1.534.1.7.37"/>
+		<info_alarm alarm="Alternative power source unavailable!" oid=".1.3.6.1.4.1.534.1.7.38"/>
+		<info_alarm alarm="Bad remote temperature!" oid=".1.3.6.1.4.1.534.1.7.40"/>
+		<info_alarm alarm="Bad remote humidity!" oid=".1.3.6.1.4.1.534.1.7.41"/>
+		<info_alarm alarm="Bad output condition!" oid=".1.3.6.1.4.1.534.1.7.42"/>
+		<info_alarm alarm="Awaiting power!" oid=".1.3.6.1.4.1.534.1.7.43"/>
+		<info_alarm alarm="On maintenance bypass!" oid=".1.3.6.1.4.1.534.1.7.44" status="BYPASS"/>
+	</alarm>
+	<snmp name="pw_mib">
+		<snmp_info default="" multiplier="128.0" name="ups.mfr" oid="1.3.6.1.4.1.534.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.model" oid="1.3.6.1.4.1.534.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware" oid="1.3.6.1.4.1.534.1.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.firmware.aux" oid="1.3.6.1.2.1.33.1.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="128.0" name="ups.serial" oid="1.3.6.1.2.1.33.1.1.5.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid="1.3.6.1.4.1.534.1.4.1.0" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.power" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" power_status="yes"/>
+		<snmp_info default="OFF" lookup="pw_pwr_info" multiplier="128.0" name="ups.status" oid="1.3.6.1.4.1.534.1.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_alarm_ob" multiplier="128.0" name="ups.status" oid="1.3.6.1.4.1.534.1.7.3" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_alarm_lb" multiplier="128.0" name="ups.status" oid="1.3.6.1.4.1.534.1.7.4" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_battery_abm_status" multiplier="128.0" name="ups.status" oid="1.3.6.1.4.1.534.1.2.5.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="pw_mode_info" multiplier="128.0" name="ups.type" oid="1.3.6.1.4.1.534.1.4.5.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower.nominal" oid="1.3.6.1.4.1.534.1.10.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.power.nominal" oid="1.3.6.1.2.1.33.1.9.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature" oid="1.3.6.1.4.1.534.1.6.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature.low" oid="1.3.6.1.4.1.534.1.6.2.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature.high" oid="1.3.6.1.4.1.534.1.6.3.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" lookup="pw_batt_test_info" multiplier="128.0" name="ups.test.result" oid="1.3.6.1.4.1.534.1.8.2.0" power_status="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="pw_yes_no_info" multiplier="128.0" name="ups.start.auto" oid="1.3.6.1.2.1.33.1.8.5.0" string="yes" writable="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_abm_status_info" multiplier="128.0" name="battery.charger.status" oid="1.3.6.1.4.1.534.1.2.5.0" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.charge" oid="1.3.6.1.4.1.534.1.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime" oid="1.3.6.1.4.1.534.1.2.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.voltage" oid="1.3.6.1.4.1.534.1.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid="1.3.6.1.4.1.534.1.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime.low" oid="1.3.6.1.2.1.33.1.9.7.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="battery.date" oid=".1.3.6.1.4.1.534.1.2.6.0" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid="1.3.6.1.4.1.534.1.4.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid="1.3.6.1.4.1.534.1.4.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency.nominal" oid="1.3.6.1.4.1.534.1.10.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.534.1.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.low" oid=".1.3.6.1.4.1.534.1.10.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.high" oid=".1.3.6.1.4.1.534.1.10.7.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid="1.3.6.1.4.1.534.1.3.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="input.frequency" oid="1.3.6.1.4.1.534.1.3.1.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.0"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.2.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.0"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.3"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.3"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.3"/>
+		<snmp_info default="" multiplier="1.0" name="input.quality" oid="1.3.6.1.4.1.534.1.3.2.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.bypass.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.0"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L1-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L2-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L3-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.3"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature" oid="1.3.6.1.4.1.534.1.6.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.low" oid="1.3.6.1.4.1.534.1.6.9.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.high" oid="1.3.6.1.4.1.534.1.6.10.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity" oid="1.3.6.1.4.1.534.1.6.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity.low" oid="1.3.6.1.4.1.534.1.6.11.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity.high" oid="1.3.6.1.4.1.534.1.6.12.0" power_status="yes" writable="yes"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="test.battery.start.quick" oid="1.3.6.1.4.1.534.1.8.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.return" oid="1.3.6.1.4.1.534.1.9.6"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.stop" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="load.off" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="30.0" name="load.off.delay" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="load.on" oid="1.3.6.1.4.1.534.1.9.2"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="20.0" name="load.on.delay" oid="1.3.6.1.4.1.534.1.9.2"/>
+		<snmp_info default="" multiplier="1.0" name="ups.alarms" oid="1.3.6.1.4.1.534.1.7.1.0" power_status="yes"/>
+	</snmp>
+	<mib2nut alarms_info="pw_alarms" auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pw" name="powerware" oid=".1.3.6.1.4.1.534.1" snmp_info="pw_mib" version="0.89"/>
+	<mib2nut alarms_info="pw_alarms" auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pxgx_ups" name="pxgx_ups" oid=".1.3.6.1.4.1.534.2.12" snmp_info="pw_mib" version="0.89"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/raritan-pdu-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/raritan-pdu-mib.dmf
@@ -0,0 +1,45 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="raritan_pdu_outlet_status_info">
+		<lookup_info oid="-1" value="error"/>
+		<lookup_info oid="0" value="off"/>
+		<lookup_info oid="1" value="on"/>
+		<lookup_info oid="2" value="cycling"/>
+	</lookup>
+	<snmp name="raritan_mib">
+		<snmp_info absent="yes" default="Raritan" flag_ok="yes" multiplier="128.0" name="device.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.13742.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.13742.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.13742.1.1.6.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="Raritan" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic SNMP PDU" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.13742.1.1.12.0" static="yes" string="yes"/>
+		<snmp_info default="unknown" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.13742.1.1.13.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.serial" oid=".1.3.6.1.4.1.13742.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.13742.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="ups.type" static="yes" string="yes"/>
+		<snmp_info multiplier="1.0" name="ups.temperature" oid=".1.3.6.1.4.1.13742.1.3.1.5.0" power_status="yes"/>
+		<snmp_info absent="yes" default="0" flag_ok="yes" multiplier="1.0" name="outlet.id" static="yes"/>
+		<snmp_info absent="yes" default="All outlets" flag_ok="yes" multiplier="20.0" name="outlet.desc" static="yes" string="yes" writable="yes"/>
+		<snmp_info default="0" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.13742.1.2.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.current" oid=".1.3.6.1.4.1.13742.1.3.1.1.0" power_status="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.voltage" oid=".1.3.6.1.4.1.13742.1.3.1.2.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.realpower" oid=".1.3.6.1.4.1.13742.1.3.1.3.0" power_status="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.power" oid=".1.3.6.1.4.1.13742.1.3.1.4.0" power_status="yes"/>
+		<snmp_info default="yes" multiplier="1.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.13742.1.2.2.1.1.%i" outlet="yes" static="yes"/>
+		<snmp_info absent="yes" default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" outlet="yes" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.13742.1.2.2.1.2.%i" outlet="yes" string="yes" writable="yes"/>
+		<snmp_info flag_ok="yes" lookup="raritan_pdu_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.13742.1.2.2.1.3.%i" outlet="yes" string="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current" oid=".1.3.6.1.4.1.13742.1.2.2.1.4.%i" outlet="yes"/>
+		<snmp_info multiplier="0.001" name="outlet.%i.current.maximum" oid=".1.3.6.1.4.1.13742.1.2.2.1.5.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.13742.1.2.2.1.7.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.13742.1.2.2.1.6.%i" outlet="yes"/>
+		<snmp_info multiplier="0.01" name="outlet.%i.powerfactor" oid=".1.3.6.1.4.1.13742.1.2.2.1.9.%i" outlet="yes"/>
+		<snmp_info multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.13742.1.2.2.1.8.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.13742.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.13742.1.2.2.1.3.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="2.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.13742.1.2.2.1.3.%i" outlet="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.13742.1.1.12.0" mib_name="raritan" name="raritan" oid=".1.3.6.1.4.1.13742" snmp_info="raritan_mib" version="0.5"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/raritan-px2-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/raritan-px2-mib.dmf
@@ -0,0 +1,65 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="raritanpx2_outlet_switchability_info">
+		<lookup_info oid="-1" value="yes"/>
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+	<lookup name="raritanpx2_outlet_status_info">
+		<lookup_info oid="-1" value="unavailable"/>
+		<lookup_info oid="0" value="open"/>
+		<lookup_info oid="1" value="closed"/>
+		<lookup_info oid="2" value="belowLowerCritical"/>
+		<lookup_info oid="3" value="belowLowerWarning"/>
+		<lookup_info oid="4" value="normal"/>
+		<lookup_info oid="5" value="aboveUpperWarning"/>
+		<lookup_info oid="6" value="aboveUpperCritical"/>
+		<lookup_info oid="7" value="on"/>
+		<lookup_info oid="8" value="off"/>
+		<lookup_info oid="9" value="detected"/>
+		<lookup_info oid="10" value="notDetected"/>
+		<lookup_info oid="11" value="alarmed"/>
+		<lookup_info oid="12" value="ok"/>
+		<lookup_info oid="13" value="marginal"/>
+		<lookup_info oid="14" value="fail"/>
+		<lookup_info oid="15" value="yes"/>
+		<lookup_info oid="16" value="no"/>
+		<lookup_info oid="17" value="standby"/>
+		<lookup_info oid="18" value="one"/>
+		<lookup_info oid="19" value="two"/>
+		<lookup_info oid="20" value="inSync"/>
+		<lookup_info oid="21" value="outOfSync"/>
+		<lookup_info oid="0" value="NULL"/>
+	</lookup>
+	<snmp name="raritan_px2_mib">
+		<snmp_info default="Raritan" flag_ok="yes" multiplier="128.0" name="device.mfr" oid=".1.3.6.1.4.1.13742.6.3.2.1.1.2.1" static="yes" string="yes"/>
+		<snmp_info default="Raritan PX2 SNMP PDU device" flag_ok="yes" multiplier="128.0" name="device.model" oid=".1.3.6.1.4.1.13742.6.3.2.1.1.3.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.serial" oid=".1.3.6.1.4.1.13742.6.3.2.1.1.4.1" static="yes" string="yes"/>
+		<snmp_info absent="yes" default="pdu" flag_ok="yes" multiplier="128.0" name="device.type" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="128.0" name="device.macaddr" oid=".1.3.6.1.4.1.13742.6.3.2.2.1.11.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="device.revision" oid=".1.3.6.1.4.1.13742.6.3.2.3.1.4.1.1.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.firmware" oid=".1.3.6.1.4.1.13742.6.3.2.3.1.6.1.1.1" static="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" multiplier="128.0" name="ups.id" oid=".1.3.6.1.4.1.13742.6.3.2.2.1.13.1" static="yes" string="yes"/>
+		<snmp_info default="Raritan PX2 SNMP PDU device" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.13742.6.3.2.1.1.3.1" static="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.load" oid=".1.3.6.1.4.1.13742.6.5.2.3.1.4.1.1.1"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.voltage" oid=".1.3.6.1.4.1.13742.6.5.2.3.1.4.1.1.4"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.realpower" oid=".1.3.6.1.4.1.13742.6.5.2.3.1.4.1.1.5"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="input.power" oid=".1.3.6.1.4.1.13742.6.5.2.3.1.4.1.1.6"/>
+		<snmp_info flag_ok="yes" multiplier="0.01" name="input.powerfactor" oid=".1.3.6.1.4.1.13742.6.5.2.3.1.4.1.1.7"/>
+		<snmp_info default="0" flag_ok="yes" multiplier="1.0" name="outlet.count" oid=".1.3.6.1.4.1.13742.6.3.2.2.1.4.1" static="yes"/>
+		<snmp_info multiplier="128.0" name="outlet.%i.desc" oid=".1.3.6.1.4.1.13742.6.3.5.3.1.3.1.%i" outlet="yes" string="yes" writable="yes"/>
+		<snmp_info lookup="raritanpx2_outlet_status_info" multiplier="128.0" name="outlet.%i.status" oid=".1.3.6.1.4.1.13742.6.4.1.2.1.3.1.%i" outlet="yes" string="yes"/>
+		<snmp_info default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.id" oid=".1.3.6.1.4.1.13742.6.3.5.3.1.2.1.%i" outlet="yes" static="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="outlet.%i.current" oid=".1.3.6.1.4.1.13742.6.5.4.3.1.4.1.%i.1" outlet="yes"/>
+		<snmp_info default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.voltage" oid=".1.3.6.1.4.1.13742.6.5.4.3.1.4.1.%i.4" outlet="yes"/>
+		<snmp_info default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.power" oid=".1.3.6.1.4.1.13742.6.5.4.3.1.4.1.%i.5" outlet="yes"/>
+		<snmp_info default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.realpower" oid=".1.3.6.1.4.1.13742.6.5.4.3.1.4.1.%i.6" outlet="yes"/>
+		<snmp_info default="%i" flag_ok="yes" multiplier="1.0" name="outlet.%i.powerfactor" oid=".1.3.6.1.4.1.13742.6.5.4.3.1.4.1.%i.7" outlet="yes"/>
+		<snmp_info default="no" flag_ok="yes" lookup="raritanpx2_outlet_switchability_info" multiplier="128.0" name="outlet.%i.switchable" oid=".1.3.6.1.4.1.13742.6.3.5.3.1.28.1.%i" outlet="yes" static="yes" string="yes"/>
+		<snmp_info command="yes" multiplier="0.0" name="outlet.%i.load.off" oid=".1.3.6.1.4.1.13742.6.4.1.2.1.2.1.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="1.0" name="outlet.%i.load.on" oid=".1.3.6.1.4.1.13742.6.4.1.2.1.2.1.%i" outlet="yes"/>
+		<snmp_info command="yes" multiplier="2.0" name="outlet.%i.load.cycle" oid=".1.3.6.1.4.1.13742.6.4.1.2.1.2.1.%i" outlet="yes"/>
+	</snmp>
+	<mib2nut auto_check=".1.3.6.1.4.1.13742.6.3.2.1.1.3.1" mib_name="raritan-px2" name="raritan_px2" oid=".1.3.6.1.4.1.13742.6" snmp_info="raritan_px2_mib" version="0.1"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/dmfsnmp/xppc-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/dmfsnmp/xppc-mib.dmf
@@ -0,0 +1,33 @@
+<?xml version="1.0" ?>
+<nut version="1.0.0" xmlns="http://www.networkupstools.org/dmf/snmp/snmp-ups">
+	<lookup name="xpcc_onbatt_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="LB"/>
+	</lookup>
+	<lookup name="xpcc_power_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OL"/>
+		<lookup_info oid="3" value="OB"/>
+		<lookup_info oid="4" value="OL BOOST"/>
+		<lookup_info oid="5" value="OFF"/>
+		<lookup_info oid="6" value="BYPASS"/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="OFF"/>
+		<lookup_info oid="9" value="OL TRIM"/>
+	</lookup>
+	<snmp name="xppc_mib">
+		<snmp_info absent="yes" default="Tripp Lite / Phoenixtec" flag_ok="yes" multiplier="128.0" name="ups.mfr" static="yes" string="yes"/>
+		<snmp_info default="Generic Phoenixtec SNMP device" flag_ok="yes" multiplier="128.0" name="ups.model" oid=".1.3.6.1.4.1.935.1.1.1.1.1.1.0" string="yes"/>
+		<snmp_info battery_status="yes" default="" flag_ok="yes" lookup="xpcc_onbatt_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.935.1.1.1.2.1.1.0" power_status="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="battery.charge" oid=".1.3.6.1.4.1.935.1.1.1.2.2.1.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="ups.temperature" oid=".1.3.6.1.4.1.935.1.1.1.2.2.3.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="input.voltage" oid=".1.3.6.1.4.1.935.1.1.1.3.2.1.0" power_status="yes"/>
+		<snmp_info default="" lookup="xpcc_power_info" multiplier="128.0" name="ups.status" oid=".1.3.6.1.4.1.935.1.1.1.4.1.1.0" power_status="yes" string="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.voltage" oid=".1.3.6.1.4.1.935.1.1.1.4.2.1.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="0.1" name="output.frequency" oid=".1.3.6.1.4.1.935.1.1.1.4.2.2.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" multiplier="1.0" name="ups.load" oid=".1.3.6.1.4.1.935.1.1.1.4.2.3.0" power_status="yes"/>
+	</snmp>
+	<mib2nut mib_name="xppc" name="xppc" oid=".1.3.6.1.4.1.935" snmp_info="xppc_mib" version="0.2"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/jsonify-mib.py
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/jsonify-mib.py
@@ -0,0 +1,500 @@
+#!/usr/bin/python2.7
+
+# This Python script takes structure contents from existing legacy
+# NUT *-mib.c sources. This is the first stage for DMF generation,
+# which just dumps those structures as JSON markup that can be consumed
+# by anyone interested.
+#
+#    Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+#
+
+from __future__ import print_function
+import argparse
+import copy
+import functools
+import json
+import sys
+import subprocess
+import os
+
+from pycparser import c_parser, c_ast, parse_file
+
+__doc__ = """
+Parses the mib description and prints all the snmp_info_t and info_lkp_t
+structures found in the file. The output is dumped as JSON for easier
+manipulation.
+"""
+__author__ = """
+Michal Vyskocil <michal.vyskocil@gmail.com>
+"""
+
+# TODO:
+#   - read the file to find and prints the comments
+
+def warn (msg):
+    print ("W: %s" % msg, file=sys.stderr)
+
+def info (msg):
+    print ("I: %s" % msg, file=sys.stderr)
+
+def f2f(node):
+    """convert c_ast node flags to list of numbers
+    (1, 2, 4) == SU_FLAG_OK | SU_FLAG_STATIC | SU_FLAG_ABSENT
+    """
+    if  isinstance (node, c_ast.BinaryOp) and \
+        node.op == "<<":
+        return (int (node.left.value) << int (node.right.value), )
+    elif isinstance (node, c_ast.Constant):
+        return (int (node.value), )
+    else:
+        r = list()
+        r.extend (f2f (node.left))
+        r.extend (f2f (node.right))
+    return r
+
+class Visitor(c_ast.NodeVisitor):
+
+    def __init__(self, *args, **kwargs):
+        super(Visitor, self).__init__(*args, **kwargs)
+        self._mappings = {
+            "INFO" : dict (),
+            "MIB2NUT" : dict (),
+            "SNMP-INFO" : dict (),
+            "ALARMS-INFO" : dict ()}
+
+    def _visit_snmp_info_t (self, node):
+        ret = list ()
+        for _, ilist in node.init.children ():
+            ditem = dict ()
+
+            kids = ilist.children ()
+
+            # 0: const char *info_type
+            _, info_type = kids [0]
+            try:
+                ditem ["info_type"] = info_type.value.strip ('"')
+                # some pycparser versions need this check for 0 vs. NULL instead
+                if ( ditem ["info_type"] == 0 ):
+                    continue
+                if ( ditem ["info_type"] == "0" ):
+                    continue
+                if ( ditem ["info_type"] == "NULL" ):
+                    continue
+            except AttributeError:
+                # There is { NULL, 0, 0 ...} on the end of each structure
+                # we should skip this one
+                continue
+
+            # This is a trick - we store _reference_ to ditem in list
+            # so all modification becomes visible in the list
+            ret.append (ditem)
+
+            # 1: int info_flags
+            _, info_flags = kids [1]
+            if isinstance (info_flags, c_ast.Constant):
+                ditem ["info_flags"] = (int (info_flags.value, 16), )
+            elif isinstance (info_flags, c_ast.BinaryOp):
+                assert info_flags.op == '|'
+                ditem ["info_flags"] = (int (info_flags.left.value, 16), int (info_flags.right.value, 16))
+
+            # 2: double info_len
+            _, info_len = kids [2]
+            ditem ["info_len"] = float (info_len.value.strip ('"'))
+
+            # 3: const char *OID
+            _, OID = kids [3]
+            try:
+                ditem ["OID"] = OID.value.strip ('"')
+                # some pycparser versions need this check for 0 vs. NULL instead
+                if ( ditem ["OID"] == "0" ):
+                    ditem ["OID"] = None
+            except:
+                ditem ["OID"] = None
+
+            # 4: const char *dfl
+            # NOTE: Some MIB.C's incorrectly declare the value as numeric zero
+            # rather than symbolic NULL. No more examples should remain in the
+            # upstream NUT (recently fixed), but may happen in downstream forks
+            _, default = kids [4]
+            ditem ["dfl"] = None
+            if isinstance (default, c_ast.Constant):
+                if default.type == "string":
+                    ditem ["dfl"] = default.value.strip ('"')
+                elif default.type == "int":
+                    # Note: after pycparser NULL is resolved into 0 too
+                    # So we only warn if some other number is encountered
+                    if ( int(default.value) != 0 ):
+                        warn ("numeric value '%s' passed as 'char *dfl' in 'snmp_info_t'; ASSUMING this is explicit NULL for your platform" % default.value)
+            elif isinstance (default, c_ast.Cast):
+                ditem ["dfl"] = None
+
+            # 5: unsigned long flags
+            _, flags = kids [5]
+            ditem ["flags"] = tuple (f2f (flags))
+
+            # 6: info_lkp_t *oid2info
+            _, oid2info = kids [6]
+            ditem ["oid2info"] = None
+            if isinstance (oid2info, c_ast.Cast):
+                ditem ["oid2info"] = None
+            elif isinstance (oid2info, c_ast.ID):
+                ditem ["oid2info"] = oid2info.name
+            elif isinstance (oid2info, c_ast.UnaryOp) and oid2info.op == '&':
+                ditem ["oid2info"] = oid2info.expr.name.name
+
+            # 7: int *setvar
+            try:
+                _, setvar = kids [7]
+            except IndexError:
+                warn ("%s: %d: missing setvar of %s" % (oid2info.coord.file, oid2info.coord.line, ditem ["info_type"]))
+                ditem ["setvar"] = None
+                continue
+
+            if isinstance (setvar, c_ast.Cast):
+                ditem ["setvar"] = None
+            elif isinstance (setvar, c_ast.UnaryOp):
+                ditem ["setvar"] = setvar.expr.name
+
+        return tuple (ret)
+
+    def _visit_info_lkp_t (self, node):
+        ret = []
+        for _, ilist in node.init.children ():
+            key_node = ilist.exprs [0]
+            if isinstance (key_node, c_ast.UnaryOp):
+                key = -1 * int (key_node.expr.value)
+            else:
+                key = int (key_node.value)
+
+            # array ends with {0, NULL}
+            if isinstance (ilist.exprs [1], c_ast.Cast):
+                continue
+
+            # in some pycparser versions this check for {0, NULL} works instead
+            if ( key == 0 ):
+                if ( ilist.exprs [1].value.strip ('"') == "0" ):
+                    continue
+                elif ( ilist.exprs [1] == "0" ):
+                    continue
+
+            ret.append ((key, ilist.exprs [1].value.strip ('"')))
+        return ret
+
+    def _visit_mib2nut_info_t (self, node):
+        ret = dict ()
+        kids = [c for _, c in node.init.children ()]
+
+        # 0 - 3, 5) mib_name - oid_auto_check, 5 sysOID
+        for i, key in enumerate (("mib_name", "mib_version", "oid_pwr_status", "oid_auto_check", None, "sysOID")):
+            if key is None:
+                continue
+            try:
+                kids [i]
+            except IndexError:
+                ret [key] = None
+                continue
+
+            if isinstance (kids [i], c_ast.Cast):
+                ret [key] = None
+            else:
+                ret [key] = kids [i].value.strip ('"')
+
+            if ( ret [key] == "0" ):
+                ret [key] = None
+
+        # 4 snmp_info
+        ret ["snmp_info"] = kids [4].name
+
+        # 6 alarms_info
+        if len (kids) == 6:
+            warn ("alarms_info_t is missing for %s" % node.name)
+        elif len (kids) > 6:
+            ret ["alarms_info"] = kids [6].name
+        return ret
+
+    def _visit_alarms_info_t (self, node):
+        lst = list ()
+        for _, ilist in node.init.children ():
+            kids = [k for _, k in ilist.children ()]
+            ret = dict ()
+            for i, key in enumerate (("OID", "status_value", "alarm_value")):
+                try:
+                    kids [i]
+                except IndexError:
+                    ret [key] = None
+                    continue
+
+                if isinstance (kids [i], c_ast.Cast):
+                    ret [key] = None
+                else:
+                    ret [key] = kids [i].value.strip ('"')
+
+                if ( ret [key] == "0" ):
+                    ret [key] = None
+
+            # skip alarm_info with all the values None
+            if any(x is not None for x in ret.values ()):
+                lst.append (ret)
+
+        return lst
+
+    def visit_Decl (self, node):
+        if  isinstance (node.type, c_ast.ArrayDecl) and \
+            isinstance (node.type.type, c_ast.TypeDecl) and \
+            isinstance (node.type.type.type, c_ast.IdentifierType):
+
+            if node.type.type.type.names == ['snmp_info_t']:
+                self._mappings ["SNMP-INFO"][node.name] = self._visit_snmp_info_t (node)
+            elif node.type.type.type.names == ['info_lkp_t']:
+                self._mappings ["INFO"][node.type.type.declname] = \
+                self._visit_info_lkp_t (node)
+            elif node.type.type.type.names == ['alarms_info_t']:
+                self._mappings ["ALARMS-INFO"][node.type.type.declname] = \
+                self._visit_alarms_info_t (node)
+
+        if  isinstance (node.type, c_ast.TypeDecl) and \
+            isinstance (node.type.type, c_ast.IdentifierType) and \
+            node.type.type.names == ['mib2nut_info_t'] and \
+            node.storage == [] :
+                self._mappings ["MIB2NUT"][node.name] = \
+                self._visit_mib2nut_info_t (node)
+
+# Find the shellscript to parse away undesired constructs from GNU CPP output
+def s_cpp_path ():
+    return \
+        os.path.join (
+            os.path.dirname (
+                os.path.abspath (__file__)),
+            "nut_cpp")
+
+def s_info2c (fout, jsinfo):
+    for key in jsinfo.keys ():
+        print ("\nstatic info_lkp_t %s_TEST[] = {" % key, file=fout)
+        for key, value in jsinfo [key]:
+            print ("    { %d, \"%s\" }," % (key, value), file=fout)
+        print ("    { 0, NULL }\n};\n", file=fout)
+
+def s_snmp2c (fout, js, name):
+    print ("\nstatic snmp_info_t %s_TEST[] = {" % name, file=fout)
+    for info in js[name]:
+        pinfo = copy.copy (info)
+        pinfo ["info_flags"] = functools.reduce (lambda x, y : x|y, pinfo ["info_flags"])
+        pinfo ["flags"] = functools.reduce (lambda x, y : x|y, pinfo ["flags"])
+        for k in ("OID", "oid2info", "dfl", "info_type", "setvar"):
+            if not k in pinfo or pinfo [k] is None:
+                pinfo [k] = "NULL"
+
+        for k in ("dfl", "OID"):
+            if isinstance (pinfo [k], int):
+                continue
+            if pinfo [k] != "NULL":
+                pinfo [k] = '"' + pinfo [k] + '"'
+
+        if pinfo ["setvar"] != "NULL":
+            pinfo ["setvar"] = '&' + pinfo ["setvar"]
+        print ('    { "%(info_type)s", %(info_flags)d, %(info_len)f, %(OID)s, %(dfl)s, %(flags)d, %(oid2info)s, %(setvar)s},' % pinfo, file=fout)
+    print ("    { NULL, 0, 0, NULL, NULL, 0, NULL }", file=fout)
+    print ("};", file=fout)
+
+def s_mib2nut (fout, js, name):
+    pinfo = copy.copy (js [name])
+    pinfo ["name"] = name
+
+    for key in ("mib_name", "mib_version", "oid_pwr_status", "oid_auto_check", "sysOID"):
+        if pinfo.get (key) is None:
+            pinfo [key] = "NULL"
+        elif ( pinfo [key] == "0" ):
+            pinfo [key] = "NULL"
+        else:
+            pinfo [key] = '"%s"' % pinfo [key]
+
+    for key in ("snmp_info", "alarms_info"):
+        if pinfo.get (key) is None:
+            pinfo [key] = "NULL"
+        elif ( pinfo [key] == "0" ):
+            pinfo [key] = "NULL"
+
+    print ("""
+static mib2nut_info_t %(name)s_TEST = { %(mib_name)s, %(mib_version)s, %(oid_pwr_status)s, %(oid_auto_check)s, %(snmp_info)s, %(sysOID)s, %(alarms_info)s };
+""" % pinfo, file=fout)
+
+def s_json2c (fout, MIB_name, js):
+    print ("""
+#include <stdbool.h>
+#include "main.h"
+#include "snmp-ups.h"
+
+// for setvar field
+int input_phases, output_phases, bypass_phases;
+
+// avoid macro-conflict with snmp-ups
+#ifdef PACKAGE_VERSION
+#undef PACKAGE_VERSION
+#undef PACKAGE_NAME
+#undef PACKAGE_STRING
+#undef PACKAGE_TARNAME
+#undef PACKAGE_BUGREPORT
+#endif
+#include "%s.c"
+
+static inline bool streq (const char* x, const char* y)
+{
+    if (!x && !y)
+        return true;
+    if (!x || !y) {
+        fprintf(stderr, "\\nDEBUG: strEQ(): One compared string (but not both) is NULL:\\n\\t%%s\\n\\t%%s\\n\\n", x ? x : "<NULL>" , y ? y : "<NULL>");
+        return false;
+        }
+    int cmp = strcmp (x, y);
+    if (cmp != 0) {
+        fprintf(stderr, "\\nDEBUG: strEQ(): Strings not equal (%%i):\\n\\t%%s\\n\\t%%s\\n\\n", cmp, x, y);
+    }
+    return cmp == 0;
+}
+
+static inline bool strneq (const char* x, const char* y)
+{
+    if (!x && !y) {
+        fprintf(stderr, "\\nDEBUG: strNEQ(): Both compared strings are NULL\\n");
+        return false;
+        }
+    if (!x || !y) {
+        return true;
+        }
+    int cmp = strcmp (x, y);
+    if (cmp == 0) {
+        fprintf(stderr, "\\nDEBUG: strNEQ(): Strings are equal (%%i):\\n\\t%%s\\n\\t%%s\\n\\n", cmp, x, y);
+    }
+    return cmp != 0;
+}
+
+""" % MIB_name, file=fout)
+
+    s_info2c (fout, js["INFO"])
+    for key in js ["SNMP-INFO"].keys ():
+        s_snmp2c (fout, js ["SNMP-INFO"], key)
+    for key in js ["MIB2NUT"].keys ():
+        s_mib2nut (fout, js ["MIB2NUT"], key)
+
+    # generate test function
+    print ("""
+int main () {
+    size_t i = 0;""", file=fout)
+
+    for key in js["INFO"]:
+        print ("""
+    fprintf (stderr, "Test %(k)s: ");
+    for (i = 0; %(k)s_TEST [i].oid_value != 0 && %(k)s_TEST [i].info_value != NULL; i++) {
+        fprintf (stderr, "[%%i] ", i);
+        assert (%(k)s [i].oid_value == %(k)s_TEST [i].oid_value);
+        assert (%(k)s [i].info_value && %(k)s_TEST [i].info_value);
+        assert (streq (%(k)s [i].info_value, %(k)s_TEST [i].info_value));
+    }
+    fprintf (stderr, "OK\\n");""" % {'k' : key}, file=fout)
+
+    for key in js ["SNMP-INFO"].keys ():
+        print ("""
+    fprintf (stderr, "Test %(k)s: ");
+    for (i = 0; %(k)s_TEST [i].info_type != NULL; i++) {
+        fprintf (stderr, "[%%i] ", i);
+        assert (streq (%(k)s [i].info_type, %(k)s_TEST [i].info_type));
+        assert (%(k)s [i].info_flags == %(k)s_TEST [i].info_flags);
+        assert (%(k)s [i].info_len == %(k)s_TEST [i].info_len);
+        assert (streq (%(k)s [i].OID, %(k)s_TEST [i].OID));
+        assert (streq (%(k)s [i].dfl, %(k)s_TEST [i].dfl));
+        assert (%(k)s [i].flags == %(k)s_TEST [i].flags);
+        if (%(k)s [i].oid2info != %(k)s_TEST [i].oid2info) {
+            fprintf (stderr, "%(k)s[%%d].oid2info=<%%p>\\n", i, %(k)s[i].oid2info);
+            fprintf (stderr, "%(k)s_TEST[%%d].oid2info=<%%p>\\n", i, %(k)s_TEST[i].oid2info);
+            return 1;
+        }
+        assert (%(k)s [i].setvar == %(k)s_TEST [i].setvar);
+    }
+    fprintf (stderr, "OK\\n");""" % {'k' : key}, file=fout)
+
+    for key in js ["MIB2NUT"].keys ():
+        print ("""
+    fprintf (stderr, "Test %(k)s\\n");
+    assert (streq (%(k)s_TEST.mib_name, %(k)s.mib_name));
+    assert (streq (%(k)s_TEST.mib_version, %(k)s.mib_version));
+    assert (streq (%(k)s_TEST.oid_pwr_status, %(k)s.oid_pwr_status));
+    assert (streq (%(k)s_TEST.oid_auto_check, %(k)s.oid_auto_check));
+    assert (%(k)s_TEST.snmp_info == %(k)s.snmp_info);
+    assert (streq (%(k)s_TEST.sysOID, %(k)s.sysOID));
+    assert (%(k)s_TEST.alarms_info == %(k)s.alarms_info);
+""" % {'k' : key}, file=fout)
+
+    print ("""
+    return 0;
+}
+""", file=fout)
+
+def s_mkparser ():
+    p = argparse.ArgumentParser ()
+    p.add_argument ("--test", default=False, action='store_true',
+            help="compile json dump back to C and compare against original static structure")
+    p.add_argument ("source", help="source code of MIB.c")
+    return p
+
+## MAIN
+p = s_mkparser ()
+args = p.parse_args (sys.argv[1:])
+drivers_dir = os.path.dirname (os.path.abspath (args.source))
+include_dir = os.path.abspath (os.path.join (drivers_dir, "../include"))
+info ("CALL parse_file():")
+try:
+    ast = parse_file (
+        args.source,
+        use_cpp=True,
+        cpp_path=s_cpp_path (),
+        cpp_args=["-I"+drivers_dir, "-I"+include_dir]
+        )
+    if not isinstance(ast, c_ast.FileAST):
+        raise RuntimeError("Got a not c_ast.FileAST instance after parsing")
+    c = 0
+    for idx, node in ast.children ():
+        c = c+1
+    if c == 0 :
+        raise RuntimeError ("Got no data in resulting tree")
+except Exception as e:
+    warn ("FAILED to parse %s: %s" % (args.source, e))
+    sys.exit(1)
+
+info ("Parsed %s OK" % args.source)
+
+info ("CALL Visitor():")
+v = Visitor ()
+for idx, node in ast.children ():
+    v.visit (node)
+
+if args.test:
+    info ("CALL test()")
+    test_file = os.path.basename (args.source)
+    MIB_name = os.path.splitext (test_file) [0]
+    test_file = MIB_name + "_TEST.c"
+    prog_file = MIB_name + "_TEST.exe"
+    with open (test_file, "wt") as fout:
+        s_json2c (fout, MIB_name, v._mappings)
+
+    try:
+        gcc = os.environ["CC"]
+    except KeyError:
+        gcc = "cc"
+    cmd = [gcc, "-std=c11", "-ggdb", "-I", drivers_dir, "-I", include_dir, "-o", prog_file, test_file]
+    info ("COMPILE: " + " ".join (cmd))
+    try:
+        subprocess.check_call (cmd)
+    except subprocess.CalledProcessError as retcode:
+        warn ("COMPILE FAILED with code ", retcode.returncode)
+        sys.exit (retcode.returncode)
+    info ("SELFTEST ./" + prog_file)
+    try:
+        subprocess.check_call ("./%s" % prog_file)
+    except subprocess.CalledProcessError as retcode:
+        warn ("SELFTEST FAILED with code ", retcode.returncode)
+        sys.exit (retcode.returncode)
+    info ("SELFTEST %s PASSED" % prog_file)
+
+info ("JSONDUMP")
+json.dump (v._mappings, sys.stdout, indent=4)
+sys.exit (0)
Index: nut-2.7.4/scripts/DMF/lua-example-mib.dmf
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/lua-example-mib.dmf
@@ -0,0 +1,209 @@
+<?xml version="1.0" ?>
+<nut>
+<!--
+// Example DMF XML for LUA experiments (inspect some data bits dynamically)
+// Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+// -->
+	<lookup name="pw_alarm_lb">
+		<lookup_info oid="1" value="LB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="pw_mode_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="normal"/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value=""/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="parallel capacity"/>
+		<lookup_info oid="9" value="parallel redundancy"/>
+		<lookup_info oid="10" value="high efficiency"/>
+		<lookup_info oid="240" value=""/>
+		<lookup_info oid="100" value=""/>
+		<lookup_info oid="96" value=""/>
+		<lookup_info oid="81" value="high efficiency"/>
+		<lookup_info oid="80" value="normal"/>
+		<lookup_info oid="64" value=""/>
+		<lookup_info oid="16" value=""/>
+	</lookup>
+	<lookup name="pw_batt_test_info">
+		<lookup_info oid="1" value="Unknown"/>
+		<lookup_info oid="2" value="Done and passed"/>
+		<lookup_info oid="3" value="Done and error"/>
+		<lookup_info oid="4" value="In progress"/>
+		<lookup_info oid="5" value="Not supported"/>
+		<lookup_info oid="6" value="Inhibited"/>
+		<lookup_info oid="7" value="Scheduled"/>
+	</lookup>
+	<lookup name="pw_alarm_ob">
+		<lookup_info oid="1" value="OB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="eaton_abm_status_info">
+		<lookup_info oid="1" value="charging"/>
+		<lookup_info oid="2" value="discharging"/>
+		<lookup_info oid="3" value="floating"/>
+		<lookup_info oid="4" value="resting"/>
+		<lookup_info oid="5" value="unknown"/>
+		<lookup_info oid="6" value="disabled"/>
+	</lookup>
+	<lookup name="ietf_yes_no_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+	<lookup name="pw_battery_abm_status">
+		<lookup_info oid="1" value="CHRG"/>
+		<lookup_info oid="2" value="DISCHRG"/>
+	</lookup>
+	<lookup name="pw_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value="OL"/>
+		<lookup_info oid="10" value="OL"/>
+		<lookup_info oid="240" value="OB"/>
+		<lookup_info oid="100" value="BYPASS"/>
+		<lookup_info oid="96" value="BYPASS"/>
+		<lookup_info oid="81" value="OL"/>
+		<lookup_info oid="80" value="OL"/>
+		<lookup_info oid="64" value="OL"/>
+		<lookup_info oid="16" value="OFF"/>
+	</lookup>
+	<alarm name="pw_alarms">
+		<info_alarm alarm="None" oid="1.3.6.1.4.1.534.1.7.4" status="LB"/>
+		<info_alarm alarm="Output overload!" oid=".1.3.6.1.4.1.534.1.7.7" status="OVER"/>
+		<info_alarm alarm="Internal failure!" oid=".1.3.6.1.4.1.534.1.7.8" status="None"/>
+		<info_alarm alarm="Battery discharged!" oid=".1.3.6.1.4.1.534.1.7.9" status="None"/>
+		<info_alarm alarm="Inverter failure!" oid=".1.3.6.1.4.1.534.1.7.10" status="None"/>
+		<info_alarm alarm="On bypass!" oid=".1.3.6.1.4.1.534.1.7.11" status="BYPASS"/>
+		<info_alarm alarm="Bypass not available!" oid=".1.3.6.1.4.1.534.1.7.12" status="None"/>
+		<info_alarm alarm="Output off!" oid=".1.3.6.1.4.1.534.1.7.13" status="OFF"/>
+		<info_alarm alarm="Input failure!" oid=".1.3.6.1.4.1.534.1.7.14" status="None"/>
+		<info_alarm alarm="Building alarm!" oid=".1.3.6.1.4.1.534.1.7.15" status="None"/>
+		<info_alarm alarm="Shutdown imminent!" oid=".1.3.6.1.4.1.534.1.7.16" status="None"/>
+		<info_alarm alarm="On inverter!" oid=".1.3.6.1.4.1.534.1.7.17" status="None"/>
+		<info_alarm alarm="Breaker open!" oid=".1.3.6.1.4.1.534.1.7.20" status="None"/>
+		<info_alarm alarm="Battery bad!" oid=".1.3.6.1.4.1.534.1.7.23" status="RB"/>
+		<info_alarm alarm="Output off as requested!" oid=".1.3.6.1.4.1.534.1.7.24" status="OFF"/>
+		<info_alarm alarm="Diagnostic test failure!" oid=".1.3.6.1.4.1.534.1.7.25" status="None"/>
+		<info_alarm alarm="Communication with UPS lost!" oid=".1.3.6.1.4.1.534.1.7.26" status="None"/>
+		<info_alarm alarm="Shutdown pending!" oid=".1.3.6.1.4.1.534.1.7.27" status="None"/>
+		<info_alarm alarm="Bad ambient temperature!" oid=".1.3.6.1.4.1.534.1.7.29" status="None"/>
+		<info_alarm alarm="Redundancy lost!" oid=".1.3.6.1.4.1.534.1.7.30" status="None"/>
+		<info_alarm alarm="Bad temperature!" oid=".1.3.6.1.4.1.534.1.7.31" status="None"/>
+		<info_alarm alarm="Charger failure!" oid=".1.3.6.1.4.1.534.1.7.32" status="None"/>
+		<info_alarm alarm="Fan failure!" oid=".1.3.6.1.4.1.534.1.7.33" status="None"/>
+		<info_alarm alarm="Fuse failure!" oid=".1.3.6.1.4.1.534.1.7.34" status="None"/>
+		<info_alarm alarm="Powerswitch failure!" oid=".1.3.6.1.4.1.534.1.7.35" status="None"/>
+		<info_alarm alarm="Parallel or composite module failure!" oid=".1.3.6.1.4.1.534.1.7.36" status="None"/>
+		<info_alarm alarm="Using alternative power source!" oid=".1.3.6.1.4.1.534.1.7.37" status="None"/>
+		<info_alarm alarm="Alternative power source unavailable!" oid=".1.3.6.1.4.1.534.1.7.38" status="None"/>
+		<info_alarm alarm="Bad remote temperature!" oid=".1.3.6.1.4.1.534.1.7.40" status="None"/>
+		<info_alarm alarm="Bad remote humidity!" oid=".1.3.6.1.4.1.534.1.7.41" status="None"/>
+		<info_alarm alarm="Bad output condition!" oid=".1.3.6.1.4.1.534.1.7.42" status="None"/>
+		<info_alarm alarm="Awaiting power!" oid=".1.3.6.1.4.1.534.1.7.43" status="None"/>
+		<info_alarm alarm="On maintenance bypass!" oid=".1.3.6.1.4.1.534.1.7.44" status="BYPASS"/>
+		<info_alarm alarm="None" oid="None" status="None"/>
+	</alarm>
+	<snmp name="pw_mib">
+		<snmp_info default="" name="ups.mfr" oid="1.3.6.1.4.1.534.1.1.1.0" static="yes" string="yes"/>
+		<snmp_info default="" name="ups.model" oid="1.3.6.1.4.1.534.1.1.2.0" static="yes" string="yes"/>
+		<snmp_info default="" name="ups.firmware" oid="1.3.6.1.4.1.534.1.1.3.0" static="yes" string="yes"/>
+		<snmp_info default="" name="ups.firmware.aux" oid="1.3.6.1.2.1.33.1.1.4.0" static="yes" string="yes"/>
+		<snmp_info default="" name="ups.serial" oid="1.3.6.1.2.1.33.1.1.5.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.load" oid="1.3.6.1.4.1.534.1.4.1.0" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.power" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" power_status="yes"/>
+		<snmp_info default="OFF" lookup="pw_pwr_info" name="ups.status" oid="1.3.6.1.4.1.534.1.4.5.0" power_status="yes" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_alarm_ob" name="ups.status" oid="1.3.6.1.4.1.534.1.7.3" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_alarm_lb" name="ups.status" oid="1.3.6.1.4.1.534.1.7.4" string="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="pw_battery_abm_status" name="ups.status" oid="1.3.6.1.4.1.534.1.2.5.0" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="pw_mode_info" name="ups.type" oid="1.3.6.1.4.1.534.1.4.5.0" static="yes" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.realpower.nominal" oid="1.3.6.1.4.1.534.1.10.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.power.nominal" oid="1.3.6.1.2.1.33.1.9.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature" oid="1.3.6.1.4.1.534.1.6.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature.low" oid="1.3.6.1.4.1.534.1.6.2.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ups.temperature.high" oid="1.3.6.1.4.1.534.1.6.3.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" lookup="pw_batt_test_info" name="ups.test.result" oid="1.3.6.1.4.1.534.1.8.2.0" power_status="yes" string="yes"/>
+		<snmp_info default="" flag_ok="yes" lookup="ietf_yes_no_info" name="ups.start.auto" oid="1.3.6.1.2.1.33.1.8.5.0" string="yes" writable="yes"/>
+		<snmp_info battery_status="yes" default="" lookup="eaton_abm_status_info" name="battery.charger.status" oid="1.3.6.1.4.1.534.1.2.5.0" string="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.charge" oid="1.3.6.1.4.1.534.1.2.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.runtime" oid="1.3.6.1.4.1.534.1.2.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="battery.voltage" oid="1.3.6.1.4.1.534.1.2.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="battery.current" oid="1.3.6.1.4.1.534.1.2.3.0" power_status="yes"/>
+		<snmp_info default="" multiplier="60.0" name="battery.runtime.low" oid="1.3.6.1.2.1.33.1.9.7.0" power_status="yes"/>
+		<snmp_info flag_ok="yes" name="battery.date" oid=".1.3.6.1.4.1.534.1.2.6.0" string="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.phases" oid="1.3.6.1.4.1.534.1.4.3.0" setvar="output_phases"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency" oid="1.3.6.1.4.1.534.1.4.2.0" power_status="yes"/>
+		<snmp_info default="" multiplier="0.1" name="output.frequency.nominal" oid="1.3.6.1.4.1.534.1.10.4.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage" oid=".1.3.6.1.4.1.534.1.4.4.1.2.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.low" oid=".1.3.6.1.4.1.534.1.10.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.high" oid=".1.3.6.1.4.1.534.1.10.7.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" output_1_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3-N.voltage" oid="1.3.6.1.4.1.534.1.4.4.1.2.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.current" oid="1.3.6.1.4.1.534.1.4.4.1.3.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.realpower" oid="1.3.6.1.4.1.534.1.4.4.1.4.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L1.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.1" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L2.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.2" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.L3.power.percent" oid="1.3.6.1.2.1.33.1.4.4.1.5.3" output_3_phase="yes"/>
+		<snmp_info default="" multiplier="1.0" name="output.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.1.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="input.phases" oid="1.3.6.1.4.1.534.1.3.3.0" setvar="input_phases"/>
+		<snmp_info default="" multiplier="0.1" name="input.frequency" oid="1.3.6.1.4.1.534.1.3.1.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.0"/>
+		<snmp_info default="" multiplier="1.0" name="input.voltage.nominal" oid="1.3.6.1.4.1.534.1.10.2.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="0.1" name="input.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.0"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3-N.voltage" oid="1.3.6.1.4.1.534.1.3.4.1.2.3"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3.current" oid="1.3.6.1.4.1.534.1.3.4.1.3.3"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L1.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L2.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.L3.realpower" oid="1.3.6.1.4.1.534.1.3.4.1.4.3"/>
+		<snmp_info default="" multiplier="1.0" name="input.quality" oid="1.3.6.1.4.1.534.1.3.2.0" power_status="yes"/>
+		<snmp_info default="" input_1_phase="yes" multiplier="1.0" name="input.bypass.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.0"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L1-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.1"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L2-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.2"/>
+		<snmp_info default="" input_3_phase="yes" multiplier="1.0" name="input.bypass.L3-N.voltage" oid="1.3.6.1.4.1.534.1.5.3.1.2.3"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature" oid="1.3.6.1.4.1.534.1.6.5.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.low" oid="1.3.6.1.4.1.534.1.6.9.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.temperature.high" oid="1.3.6.1.4.1.534.1.6.10.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity" oid="1.3.6.1.4.1.534.1.6.6.0" power_status="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity.low" oid="1.3.6.1.4.1.534.1.6.11.0" power_status="yes" writable="yes"/>
+		<snmp_info default="" multiplier="1.0" name="ambient.humidity.high" oid="1.3.6.1.4.1.534.1.6.12.0" power_status="yes" writable="yes"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="test.battery.start.quick" oid="1.3.6.1.4.1.534.1.8.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.return" oid="1.3.6.1.4.1.534.1.9.6"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="0.0" name="shutdown.stop" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="load.off" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="30.0" name="load.off.delay" oid="1.3.6.1.4.1.534.1.9.1"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="1.0" name="load.on" oid="1.3.6.1.4.1.534.1.9.2"/>
+		<snmp_info command="yes" default="" flag_ok="yes" multiplier="20.0" name="load.on.delay" oid="1.3.6.1.4.1.534.1.9.2"/>
+		<snmp_info default="" multiplier="1.0" name="ups.alarms" oid="1.3.6.1.4.1.534.1.7.1.0" power_status="yes"/>
+	</snmp>
+	<function name="load.on_apc">
+		<!-- Example function that prints a string -->
+		   print("something")
+	</function>
+	<function name="load.on_apx">
+		<!-- Example function that prints a number -->
+		   something = 10
+		   print(something)
+	</function>
+	<mib2nut alarms_info="pw_alarms" auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pw" name="powerware" oid=".1.3.6.1.4.1.534.1" snmp_info="pw_mib" function="load.on_apc" function="load.on_apx" version="0.88"/>
+	<mib2nut alarms_info="pw_alarms" auto_check="1.3.6.1.4.1.534.1.1.2.0" mib_name="pxgx_ups" name="pxgx_ups" oid=".1.3.6.1.4.1.534.2.12" snmp_info="pw_mib" version="0.88"/>
+</nut>
+
Index: nut-2.7.4/scripts/DMF/model.xml
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/model.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" ?>
+<nut>
+	<lookup name="source">
+		<info_lookup oid="1" value="LB"/>
+		<info_lookup oid="2" value=""/>
+		<info_lookup oid="3" value="LB"/>
+		<info_lookup oid="4" value="OB"/>
+		<info_lookup oid="5" value="LO"/>
+		<info_lookup oid="6" value=""/>
+	</lookup>
+	<lookup name="sensitivity">
+		<info_lookup oid="1" value="LB"/>
+		<info_lookup oid="2" value=""/>
+		<info_lookup oid="3" value="LB"/>
+	</lookup>
+	<alarm name="pw_alarm_lb">
+		<info_alarm oid=".1.3.6.1.4.1.534.1.7.7" status="OVER" alarm="Output overload!"/>
+		<info_alarm oid=".1.3.6.1.4.1.534.1.7.8" status="NULL" alarm="Internal failure!"/>
+		<info_alarm oid=".1.3.6.1.4.1.534.1.7.9" status="BYPASS" alarm="On bypass!"/>
+	</alarm>
+	<alarm name="temp_alarm">
+		<info_alarm oid=".1.3.6.1.4.1.534.1.3.7" status="OVER" alarm="Burning"/>
+		<info_alarm oid=".1.3.6.1.4.1.534.1.3.8" status="NULL" alarm="No data"/>
+	</alarm>
+</nut>
+<!--
+<snmp name = "name">
+    <info
+        name = "<string>"
+        multiplier = "0.2" or constant if string = "yes"
+        oid = "<string>" or NULL
+        default = "<string>" or NULL
+        lookup = "<string>" or NUUL
+        ?setvar? = "(input_phases|output_phases|bypass_phases)"
+        ^^^ implies SU_FLAG_SETINT if setvar is not NULL
+        // flags
+        SU_FLAG_STATIC ->
+        static = "1"
+        absent = "1"
+        optimize: check the ( value[0] == 'y' || value[0] == '1')
+        // info_flags
+        0   - no attribute
+        ST_FLAG_RW - readwrite/writtable="yes"
+        ST_FLAG_STRING - string = "yes"
+    />
+</snmp>
+     -->
\ No newline at end of file
Index: nut-2.7.4/scripts/DMF/nut_cpp
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/nut_cpp
@@ -0,0 +1,41 @@
+#!/bin/bash
+# postprocessor of C preprocessor - removes __attribute__ declarations, which are not compatible for pycparser
+
+[ -n "${CPP-}" ] || CPP="cpp"
+[ -n "${CFLAGS-}" ] || CFLAGS="-I../../include"
+
+set -o pipefail
+#set -exv
+
+echo "PREPROCESS: ( cd `pwd` && $CPP $CFLAGS $* )" >&2
+
+$CPP $CFLAGS "${@}" | sed \
+    -e 's/ __asm(.*)$/;/' \
+    -e 's/__asm__ (.*);/;/' \
+    -e 's/__attribute__ ((visibility("default"))) //' \
+    -e 's/__attribute__((unused))//' \
+    -e 's/__attribute__((aligned(8)));/;/' \
+    -e 's/__attribute__((availability(.*)));/;/' \
+    -e 's/__attribute__((availability(.*)))//' \
+    -e 's/__attribute__((format.*)));$/;/' \
+    -e 's/__inline__/inline/' \
+    -e 's/__THROW;$/;/' \
+    -e 's/__END_DECLS//' \
+    -e 's/__BEGIN_DECLS//' \
+    -e 's/void (\*signal(int, void (\*)(int)))(int);//' \
+    -e 's/__attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));/;/' \
+    -e 's/__attribute__ ((__mode__ (__[A-Z][A-Z]__)));/;/' \
+    -e 's/__attribute__ ((__mode__ (__word__)));/;/' \
+    -e 's/__attribute__ ((__nothrow__ , __leaf__));/;/' \
+    -e 's/__attribute__ ((__nonnull__ ([0-9])));/;/' \
+    -e 's/__attribute__ ((__nothrow__ , __leaf__)) ;/;/' \
+    -e 's/__attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;/;/' \
+    -e 's/__attribute__.*$/;/' \
+    -e 's/static __inline/static/' \
+    -e 's/__restrict//g' \
+    -e 's/__extension__//' \
+    -e 's/__builtin_va_list/int/' # | tee temp-cpp.tmp
+
+RET=$?
+[ "$RET" = 0 ] && echo "INFO: CPP+SED passed OK" >&2 || echo "ERROR: CPP+SED returned code $RET" >&2
+exit $RET
Index: nut-2.7.4/scripts/DMF/nutscan-snmp.h
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/nutscan-snmp.h
@@ -0,0 +1,57 @@
+/* nutscan-snmp
+ *  Copyright (C) 2011 - Frederic Bohe <FredericBohe@Eaton.com>
+ *  Copyright (C) 2016 - Arnaud Quette <ArnaudQuette@Eaton.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#ifndef DEVSCAN_SNMP_H
+#define DEVSCAN_SNMP_H
+
+typedef struct {
+        char *          oid;
+        char *          mib;
+        char *       sysoid;
+} snmp_device_id_t;
+
+/* SNMP IDs device table */
+/*static snmp_device_id_t snmp_device_table[] = {
+	{ ".1.3.6.1.4.1.534.10.2.1.2.0",  "eaton_ats", ".1.3.6.1.4.1.705.1"},
+	{ ".1.3.6.1.4.1.13742.6.3.2.1.1.3.1",  "raritan-px2", ".1.3.6.1.4.1.13742.6"},
+	{ ".1.3.6.1.4.1.2947.1.1.2.0",  "bestpower", NULL},
+	{ ".1.3.6.1.4.1.17373.3.1.1.0",  "aphel_genesisII", ".1.3.6.1.4.1.17373"},
+	{ ".1.3.6.1.4.1.534.6.6.6.1.1.12.0",  "aphel_revelation", ".1.3.6.1.4.1.534.6.6.6"},
+	{ ".1.3.6.1.4.1.534.6.6.7.1.2.1.2.0",  "eaton_epdu", ".1.3.6.1.4.1.534.6.6.7"},
+	{ ".1.3.6.1.4.1.20677.1",  "pulizzi_switched1", ".1.3.6.1.4.1.20677.1"},
+	{ ".1.3.6.1.4.1.20677.1",  "pulizzi_switched2", ".1.3.6.1.4.1.20677.2"},
+	{ ".1.3.6.1.4.1.705.1.1.1.0",  "mge", ".1.3.6.1.4.1.705.1"},
+	{ "1.3.6.1.4.1.534.1.1.2.0",  "pw", ".1.3.6.1.4.1.534.1"},
+	{ "1.3.6.1.4.1.534.1.1.2.0",  "pxgx_ups", ".1.3.6.1.4.1.534.2.12"},
+	{ ".1.3.6.1.4.1.3808.1.1.1.1.1.1.0",  "cyberpower", ".1.3.6.1.4.1.3808"},
+	{ ".1.3.6.1.4.1.13742.1.1.12.0",  "raritan", ".1.3.6.1.4.1.13742"},
+	{ "1.3.6.1.2.1.33.1.1.1.0",  "ietf", ".1.3.6.1.2.1.33"},
+	{ "",  "ietf", ".1.3.6.1.4.1.850.1"},
+	{ ".1.3.6.1.4.1.4779.1.3.5.2.1.24.1",  "baytech", NULL},
+	{ "",  "huawei", ".1.3.6.1.4.1.8072.3.2.10"},
+	{ ".1.3.6.1.4.1.232.165.3.1.1.0",  "cpqpower", ".1.3.6.1.4.1.232.165.3"},
+	{ "",  "apc_ats", ".1.3.6.1.4.1.318.1.3.11"},
+	{ "",  "xppc", ".1.3.6.1.4.1.935"},
+	{ ".1.3.6.1.4.1.4555.1.1.1.1.1.1.0",  "netvision", ".1.3.6.1.4.1.4555.1.1.1"},
+	{ "",  "delta_ups", ".1.3.6.1.4.1.2254.2.4"},
+	{ ".1.3.6.1.4.1.318.1.1.1.1.1.1.0",  "apcc", NULL},*/
+        /* Terminating entry */
+        //{ NULL, NULL, NULL}
+//};
+#endif /* DEVSCAN_SNMP_H */
Index: nut-2.7.4/scripts/DMF/powerware-mib.c.json
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/powerware-mib.c.json
@@ -0,0 +1,1582 @@
+{
+    "INFO": {
+        "pw_alarm_lb": [
+            [
+                1, 
+                "LB"
+            ], 
+            [
+                2, 
+                ""
+            ]
+        ], 
+        "pw_mode_info": [
+            [
+                1, 
+                ""
+            ], 
+            [
+                2, 
+                ""
+            ], 
+            [
+                3, 
+                "normal"
+            ], 
+            [
+                4, 
+                ""
+            ], 
+            [
+                5, 
+                ""
+            ], 
+            [
+                6, 
+                ""
+            ], 
+            [
+                7, 
+                ""
+            ], 
+            [
+                8, 
+                "parallel capacity"
+            ], 
+            [
+                9, 
+                "parallel redundancy"
+            ], 
+            [
+                10, 
+                "high efficiency"
+            ], 
+            [
+                240, 
+                ""
+            ], 
+            [
+                100, 
+                ""
+            ], 
+            [
+                96, 
+                ""
+            ], 
+            [
+                81, 
+                "high efficiency"
+            ], 
+            [
+                80, 
+                "normal"
+            ], 
+            [
+                64, 
+                ""
+            ], 
+            [
+                16, 
+                ""
+            ]
+        ], 
+        "pw_batt_test_info": [
+            [
+                1, 
+                "Unknown"
+            ], 
+            [
+                2, 
+                "Done and passed"
+            ], 
+            [
+                3, 
+                "Done and error"
+            ], 
+            [
+                4, 
+                "In progress"
+            ], 
+            [
+                5, 
+                "Not supported"
+            ], 
+            [
+                6, 
+                "Inhibited"
+            ], 
+            [
+                7, 
+                "Scheduled"
+            ]
+        ], 
+        "pw_alarm_ob": [
+            [
+                1, 
+                "OB"
+            ], 
+            [
+                2, 
+                ""
+            ]
+        ], 
+        "pw_pwr_info": [
+            [
+                1, 
+                ""
+            ], 
+            [
+                2, 
+                "OFF"
+            ], 
+            [
+                3, 
+                "OL"
+            ], 
+            [
+                4, 
+                "BYPASS"
+            ], 
+            [
+                5, 
+                "OB"
+            ], 
+            [
+                6, 
+                "OL BOOST"
+            ], 
+            [
+                7, 
+                "OL TRIM"
+            ], 
+            [
+                8, 
+                "OL"
+            ], 
+            [
+                9, 
+                "OL"
+            ], 
+            [
+                10, 
+                "OL"
+            ], 
+            [
+                240, 
+                "OB"
+            ], 
+            [
+                100, 
+                "BYPASS"
+            ], 
+            [
+                96, 
+                "BYPASS"
+            ], 
+            [
+                81, 
+                "OL"
+            ], 
+            [
+                80, 
+                "OL"
+            ], 
+            [
+                64, 
+                "OL"
+            ], 
+            [
+                16, 
+                "OFF"
+            ]
+        ], 
+        "ietf_yes_no_info": [
+            [
+                1, 
+                "yes"
+            ], 
+            [
+                2, 
+                "no"
+            ]
+        ], 
+        "pw_battery_abm_status": [
+            [
+                1, 
+                "CHRG"
+            ], 
+            [
+                2, 
+                "DISCHRG"
+            ]
+        ], 
+        "eaton_abm_status_info": [
+            [
+                1, 
+                "charging"
+            ], 
+            [
+                2, 
+                "discharging"
+            ], 
+            [
+                3, 
+                "floating"
+            ], 
+            [
+                4, 
+                "resting"
+            ], 
+            [
+                5, 
+                "unknown"
+            ], 
+            [
+                6, 
+                "disabled"
+            ]
+        ]
+    }, 
+    "SNMP-INFO": {
+        "pw_mib": [
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.1.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.mfr", 
+                "flags": [
+                    2
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.1.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.model", 
+                "flags": [
+                    2
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.1.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.firmware", 
+                "flags": [
+                    2
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.1.4.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.firmware.aux", 
+                "flags": [
+                    2
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.1.5.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.serial", 
+                "flags": [
+                    2
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.load", 
+                "flags": [
+                    16384
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.4.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.power", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.5.0", 
+                "oid2info": "pw_pwr_info", 
+                "dfl": "OFF", 
+                "info_type": "ups.status", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.7.3", 
+                "oid2info": "pw_alarm_ob", 
+                "dfl": "", 
+                "info_type": "ups.status", 
+                "flags": [
+                    256
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.7.4", 
+                "oid2info": "pw_alarm_lb", 
+                "dfl": "", 
+                "info_type": "ups.status", 
+                "flags": [
+                    256
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.5.0", 
+                "oid2info": "pw_battery_abm_status", 
+                "dfl": "", 
+                "info_type": "ups.status", 
+                "flags": [
+                    256
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.5.0", 
+                "oid2info": "pw_mode_info", 
+                "dfl": "", 
+                "info_type": "ups.type", 
+                "flags": [
+                    2, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.10.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.realpower.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.9.5.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.power.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.temperature", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.temperature.low", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.temperature.high", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.8.2.0", 
+                "oid2info": "pw_batt_test_info", 
+                "dfl": "", 
+                "info_type": "ups.test.result", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    1, 
+                    2
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.8.5.0", 
+                "oid2info": "ietf_yes_no_info", 
+                "dfl": "", 
+                "info_type": "ups.start.auto", 
+                "flags": [
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    2
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.5.0", 
+                "oid2info": "eaton_abm_status_info", 
+                "dfl": "", 
+                "info_type": "battery.charger.status", 
+                "flags": [
+                    256
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.4.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "battery.charge", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "battery.runtime", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "battery.voltage", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 0.1, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.2.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "battery.current", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 60.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.9.7.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "battery.runtime.low", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 128.0, 
+                "info_flags": [
+                    1, 
+                    2
+                ], 
+                "OID": ".1.3.6.1.4.1.534.1.2.6.0", 
+                "oid2info": null, 
+                "dfl": null, 
+                "info_type": "battery.date", 
+                "flags": [
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.phases", 
+                "flags": [
+                    64
+                ], 
+                "setvar": "output_phases"
+            }, 
+            {
+                "info_len": 0.1, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.frequency", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 0.1, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.10.4.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.frequency.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": ".1.3.6.1.4.1.534.1.4.4.1.2.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.voltage", 
+                "flags": [
+                    16384
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.10.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.voltage.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": ".1.3.6.1.4.1.534.1.10.6.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.voltage.low", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": ".1.3.6.1.4.1.534.1.10.7.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.voltage.high", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.3.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.current", 
+                "flags": [
+                    16384
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.4.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.realpower", 
+                "flags": [
+                    16384
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.2.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L1-N.voltage", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.2.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L2-N.voltage", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.2.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L3-N.voltage", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.3.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L1.current", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.3.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L2.current", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.3.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L3.current", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.4.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L1.realpower", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.4.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L2.realpower", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.4.4.1.4.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L3.realpower", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.4.4.1.5.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L1.power.percent", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.4.4.1.5.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L2.power.percent", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.2.1.33.1.4.4.1.5.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.L3.power.percent", 
+                "flags": [
+                    32768
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.10.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "output.voltage.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.phases", 
+                "flags": [
+                    64
+                ], 
+                "setvar": "input_phases"
+            }, 
+            {
+                "info_len": 0.1, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.frequency", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.voltage", 
+                "flags": [
+                    4096
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.10.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.voltage.nominal", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 0.1, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.3.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.current", 
+                "flags": [
+                    4096
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.2.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L1-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.2.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L2-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.2.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L3-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.3.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L1.current", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.3.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L2.current", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.3.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L3.current", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.4.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L1.realpower", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.4.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L2.realpower", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.4.1.4.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.L3.realpower", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.3.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.quality", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.5.3.1.2.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.bypass.voltage", 
+                "flags": [
+                    4096
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.5.3.1.2.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.bypass.L1-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.5.3.1.2.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.bypass.L2-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.5.3.1.2.3", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "input.bypass.L3-N.voltage", 
+                "flags": [
+                    8192
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.5.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.temperature", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.9.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.temperature.low", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.10.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.temperature.high", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.6.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.humidity", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.11.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.humidity.low", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    1
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.6.12.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ambient.humidity.high", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.8.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "test.battery.start.quick", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 0.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.6", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "shutdown.return", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 0.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "shutdown.stop", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "load.off", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 30.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.1", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "load.off.delay", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "load.on", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 20.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.9.2", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "load.on.delay", 
+                "flags": [
+                    786432, 
+                    1
+                ], 
+                "setvar": null
+            }, 
+            {
+                "info_len": 1.0, 
+                "info_flags": [
+                    0
+                ], 
+                "OID": "1.3.6.1.4.1.534.1.7.1.0", 
+                "oid2info": null, 
+                "dfl": "", 
+                "info_type": "ups.alarms", 
+                "flags": [
+                    0
+                ], 
+                "setvar": null
+            }
+        ]
+    }, 
+    "MIB2NUT": {
+        "powerware": {
+            "sysOID": ".1.3.6.1.4.1.534.1", 
+            "mib_version": "0.88", 
+            "oid_pwr_status": null, 
+            "oid_auto_check": "1.3.6.1.4.1.534.1.1.2.0", 
+            "alarms_info": "pw_alarms", 
+            "mib_name": "pw", 
+            "snmp_info": "pw_mib"
+        }, 
+        "pxgx_ups": {
+            "sysOID": ".1.3.6.1.4.1.534.2.12", 
+            "mib_version": "0.88", 
+            "oid_pwr_status": null, 
+            "oid_auto_check": "1.3.6.1.4.1.534.1.1.2.0", 
+            "alarms_info": "pw_alarms", 
+            "mib_name": "pxgx_ups", 
+            "snmp_info": "pw_mib"
+        }
+    }, 
+    "ALARMS-INFO": {
+        "pw_alarms": [
+            {
+                "status_value": "LB", 
+                "OID": "1.3.6.1.4.1.534.1.7.4", 
+                "alarm_value": null
+            }, 
+            {
+                "status_value": "OVER", 
+                "OID": ".1.3.6.1.4.1.534.1.7.7", 
+                "alarm_value": "Output overload!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.8", 
+                "alarm_value": "Internal failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.9", 
+                "alarm_value": "Battery discharged!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.10", 
+                "alarm_value": "Inverter failure!"
+            }, 
+            {
+                "status_value": "BYPASS", 
+                "OID": ".1.3.6.1.4.1.534.1.7.11", 
+                "alarm_value": "On bypass!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.12", 
+                "alarm_value": "Bypass not available!"
+            }, 
+            {
+                "status_value": "OFF", 
+                "OID": ".1.3.6.1.4.1.534.1.7.13", 
+                "alarm_value": "Output off!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.14", 
+                "alarm_value": "Input failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.15", 
+                "alarm_value": "Building alarm!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.16", 
+                "alarm_value": "Shutdown imminent!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.17", 
+                "alarm_value": "On inverter!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.20", 
+                "alarm_value": "Breaker open!"
+            }, 
+            {
+                "status_value": "RB", 
+                "OID": ".1.3.6.1.4.1.534.1.7.23", 
+                "alarm_value": "Battery bad!"
+            }, 
+            {
+                "status_value": "OFF", 
+                "OID": ".1.3.6.1.4.1.534.1.7.24", 
+                "alarm_value": "Output off as requested!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.25", 
+                "alarm_value": "Diagnostic test failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.26", 
+                "alarm_value": "Communication with UPS lost!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.27", 
+                "alarm_value": "Shutdown pending!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.29", 
+                "alarm_value": "Bad ambient temperature!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.30", 
+                "alarm_value": "Redundancy lost!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.31", 
+                "alarm_value": "Bad temperature!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.32", 
+                "alarm_value": "Charger failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.33", 
+                "alarm_value": "Fan failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.34", 
+                "alarm_value": "Fuse failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.35", 
+                "alarm_value": "Powerswitch failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.36", 
+                "alarm_value": "Parallel or composite module failure!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.37", 
+                "alarm_value": "Using alternative power source!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.38", 
+                "alarm_value": "Alternative power source unavailable!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.40", 
+                "alarm_value": "Bad remote temperature!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.41", 
+                "alarm_value": "Bad remote humidity!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.42", 
+                "alarm_value": "Bad output condition!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": ".1.3.6.1.4.1.534.1.7.43", 
+                "alarm_value": "Awaiting power!"
+            }, 
+            {
+                "status_value": "BYPASS", 
+                "OID": ".1.3.6.1.4.1.534.1.7.44", 
+                "alarm_value": "On maintenance bypass!"
+            }, 
+            {
+                "status_value": null, 
+                "OID": null, 
+                "alarm_value": null
+            }
+        ]
+    }
+}
\ No newline at end of file
Index: nut-2.7.4/scripts/DMF/test.xml
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/test.xml
@@ -0,0 +1,139 @@
+<?xml version="1.0" ?>
+<nut>
+	<lookup name="pw_alarm_lb">
+		<lookup_info oid="1" value="LB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="pw_mode_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value=""/>
+		<lookup_info oid="3" value="normal"/>
+		<lookup_info oid="4" value=""/>
+		<lookup_info oid="5" value=""/>
+		<lookup_info oid="6" value=""/>
+		<lookup_info oid="7" value=""/>
+		<lookup_info oid="8" value="parallel capacity"/>
+		<lookup_info oid="9" value="parallel redundancy"/>
+		<lookup_info oid="10" value="high efficiency"/>
+		<lookup_info oid="240" value=""/>
+		<lookup_info oid="100" value=""/>
+		<lookup_info oid="96" value=""/>
+		<lookup_info oid="81" value="high efficiency"/>
+		<lookup_info oid="80" value="normal"/>
+		<lookup_info oid="64" value=""/>
+		<lookup_info oid="16" value=""/>
+	</lookup>
+	<lookup name="pw_batt_test_info">
+		<lookup_info oid="1" value="Unknown"/>
+		<lookup_info oid="2" value="Done and passed"/>
+		<lookup_info oid="3" value="Done and error"/>
+		<lookup_info oid="4" value="In progress"/>
+		<lookup_info oid="5" value="Not supported"/>
+		<lookup_info oid="6" value="Inhibited"/>
+		<lookup_info oid="7" value="Scheduled"/>
+	</lookup>
+	<lookup name="pw_alarm_ob">
+		<lookup_info oid="1" value="OB"/>
+		<lookup_info oid="2" value=""/>
+	</lookup>
+	<lookup name="eaton_abm_status_info">
+		<lookup_info oid="1" value="charging"/>
+		<lookup_info oid="2" value="discharging"/>
+		<lookup_info oid="3" value="floating"/>
+		<lookup_info oid="4" value="resting"/>
+		<lookup_info oid="5" value="unknown"/>
+		<lookup_info oid="6" value="disabled"/>
+	</lookup>
+	<lookup name="ietf_yes_no_info">
+		<lookup_info oid="1" value="yes"/>
+		<lookup_info oid="2" value="no"/>
+	</lookup>
+	<lookup name="pw_battery_abm_status">
+		<lookup_info oid="1" value="CHRG"/>
+		<lookup_info oid="2" value="DISCHRG"/>
+	</lookup>
+	<lookup name="pw_pwr_info">
+		<lookup_info oid="1" value=""/>
+		<lookup_info oid="2" value="OFF"/>
+		<lookup_info oid="3" value="OL"/>
+		<lookup_info oid="4" value="BYPASS"/>
+		<lookup_info oid="5" value="OB"/>
+		<lookup_info oid="6" value="OL BOOST"/>
+		<lookup_info oid="7" value="OL TRIM"/>
+		<lookup_info oid="8" value="OL"/>
+		<lookup_info oid="9" value="OL"/>
+		<lookup_info oid="10" value="OL"/>
+		<lookup_info oid="240" value="OB"/>
+		<lookup_info oid="100" value="BYPASS"/>
+		<lookup_info oid="96" value="BYPASS"/>
+		<lookup_info oid="81" value="OL"/>
+		<lookup_info oid="80" value="OL"/>
+		<lookup_info oid="64"/>
+		<lookup_info oid="16" value="OFF"/>
+	</lookup>
+	<alarm name="pw_alarms">
+		<info_alarm alarm="None" status="LB"/>
+		<info_alarm alarm="Output overload!" oid=".1.3.6.1.4.1.534.1.7.7" status="OVER"/>
+		<info_alarm alarm="Internal failure!" oid=".1.3.6.1.4.1.534.1.7.8"/>
+		<info_alarm alarm="Battery discharged!" oid=".1.3.6.1.4.1.534.1.7.9" status="None"/>
+		<info_alarm alarm="Inverter failure!" oid=".1.3.6.1.4.1.534.1.7.10" status="None"/>
+		<info_alarm alarm="On bypass!" oid=".1.3.6.1.4.1.534.1.7.11" status="BYPASS"/>
+		<info_alarm alarm="Bypass not available!" oid=".1.3.6.1.4.1.534.1.7.12" status="None"/>
+		<info_alarm alarm="Output off!" oid=".1.3.6.1.4.1.534.1.7.13" status="OFF"/>
+		<info_alarm alarm="Input failure!" oid=".1.3.6.1.4.1.534.1.7.14" status="None"/>
+		<info_alarm alarm="Building alarm!" oid=".1.3.6.1.4.1.534.1.7.15" status="None"/>
+		<info_alarm alarm="Shutdown imminent!" oid=".1.3.6.1.4.1.534.1.7.16" status="None"/>
+		<info_alarm alarm="On inverter!" oid=".1.3.6.1.4.1.534.1.7.17" status="None"/>
+		<info_alarm alarm="Breaker open!" oid=".1.3.6.1.4.1.534.1.7.20" status="None"/>
+		<info_alarm alarm="Battery bad!" oid=".1.3.6.1.4.1.534.1.7.23" status="RB"/>
+		<info_alarm alarm="Output off as requested!" oid=".1.3.6.1.4.1.534.1.7.24" status="OFF"/>
+		<info_alarm alarm="Diagnostic test failure!" oid=".1.3.6.1.4.1.534.1.7.25" status="None"/>
+		<info_alarm alarm="Communication with UPS lost!" oid=".1.3.6.1.4.1.534.1.7.26" status="None"/>
+		<info_alarm alarm="Shutdown pending!" oid=".1.3.6.1.4.1.534.1.7.27" status="None"/>
+		<info_alarm alarm="Bad ambient temperature!" oid=".1.3.6.1.4.1.534.1.7.29" status="None"/>
+		<info_alarm alarm="Redundancy lost!" oid=".1.3.6.1.4.1.534.1.7.30" status="None"/>
+		<info_alarm alarm="Bad temperature!" oid=".1.3.6.1.4.1.534.1.7.31" status="None"/>
+		<info_alarm alarm="Charger failure!" oid=".1.3.6.1.4.1.534.1.7.32" status="None"/>
+		<info_alarm alarm="Fan failure!" oid=".1.3.6.1.4.1.534.1.7.33" status="None"/>
+		<info_alarm alarm="Fuse failure!" oid=".1.3.6.1.4.1.534.1.7.34" status="None"/>
+		<info_alarm alarm="Powerswitch failure!" oid=".1.3.6.1.4.1.534.1.7.35" status="None"/>
+		<info_alarm alarm="Parallel or composite module failure!" oid=".1.3.6.1.4.1.534.1.7.36" status="None"/>
+		<info_alarm alarm="Using alternative power source!" oid=".1.3.6.1.4.1.534.1.7.37" status="None"/>
+		<info_alarm alarm="Alternative power source unavailable!" oid=".1.3.6.1.4.1.534.1.7.38" status="None"/>
+		<info_alarm alarm="Bad remote temperature!" oid=".1.3.6.1.4.1.534.1.7.40" status="None"/>
+		<info_alarm alarm="Bad remote humidity!" oid=".1.3.6.1.4.1.534.1.7.41" status="None"/>
+		<info_alarm alarm="Bad output condition!" oid=".1.3.6.1.4.1.534.1.7.42" status="None"/>
+		<info_alarm alarm="Awaiting power!" oid=".1.3.6.1.4.1.534.1.7.43" status="None"/>
+		<info_alarm alarm="On maintenance bypass!" oid=".1.3.6.1.4.1.534.1.7.44" status="BYPASS"/>
+		<info_alarm alarm="None" status="None"/>
+	</alarm>
+	<snmp name = "name">
+		<snmp_info name = "output.frequency" multiplier = "0.1" oid = "1.3.6.1.4.1.534.1.4.2.0" default = "" lookup = "pw_pwr_info" setvar = "input_phases"
+													    static = "yes"
+													    absent = "yes"
+													    
+													    writable = "no"
+													    string = "no"/>
+<!--
+<snmp name = "name">
+    <info
+        name = "<string>"
+        multiplier = "0.2" or constant if string = "yes"
+        oid = "<string>" or NULL
+        default = "<string>" or NULL
+        lookup = "<string>" or NUUL
+        ?setvar? = "(input_phases|output_phases|bypass_phases)"
+        ^^^ implies SU_FLAG_SETINT if setvar is not NULL
+        // flags
+        SU_FLAG_STATIC ->
+        static = "1"
+        absent = "1"
+        optimize: check the ( value[0] == 'y' || value[0] == '1')
+        // info_flags
+        0   - no attribute
+        ST_FLAG_RW - readwrite/writtable="yes"
+        ST_FLAG_STRING - string = "yes"
+    /> -->
+    
+	</snmp>
+</nut>
Index: nut-2.7.4/scripts/DMF/xmlify-mib.py
===================================================================
--- /dev/null
+++ nut-2.7.4/scripts/DMF/xmlify-mib.py
@@ -0,0 +1,246 @@
+#!/usr/bin/python2.7
+
+# This Python script takes structure contents from JSON markup generated
+# by `jsonify-mib.py` and generates XML DMF structure that can be parsed
+# by `dmf.c` routines.
+#
+#    Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+#    Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+#    Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+#
+
+from __future__ import print_function
+
+import argparse
+import sys
+import json
+import xml.dom.minidom as MD
+
+# ext commons.h
+#/* state tree flags */
+ST_FLAG_RW = 0x0001
+ST_FLAG_STRING = 0x0002
+ST_FLAG_IMMUTABLE = 0x0004
+
+# snmp-ups.h
+SU_FLAG_OK = (1 << 0)		#/* show element to upsd - internal to snmp driver */
+SU_FLAG_STATIC = (1 << 1)	#/* retrieve info only once. */
+SU_FLAG_ABSENT = (1 << 2)	#/* data is absent in the device,
+				# * use default value. */
+SU_FLAG_STALE = (1 << 3)	#/* data stale, don't try too often - internal to snmp driver */
+SU_FLAG_NEGINVALID = (1 << 4)	#/* Invalid if negative value */
+SU_FLAG_UNIQUE = (1 << 5)	#/* There can be only be one
+				# * provider of this info,
+				# * disable the other providers */
+SU_FLAG_SETINT = (1 << 6)	#/* save value */
+SU_OUTLET = (1 << 7)	        #/* outlet template definition */
+SU_CMD_OFFSET = (1 << 8)	#/* Add +1 to the OID index */
+
+SU_STATUS_PWR = (0 << 8)	#/* indicates power status element */
+SU_STATUS_BATT = (1 << 8)	#/* indicates battery status element */
+SU_STATUS_CAL = (2 << 8)	#/* indicates calibration status element */
+SU_STATUS_RB = (3 << 8)		#/* indicates replace battery status element */
+SU_STATUS_NUM_ELEM = 4
+SU_OUTLET_GROUP = (1 << 10)	#/* outlet group template definition */
+
+#/* Phase specific data */
+SU_PHASES = (0x3F << 12)
+SU_INPHASES = (0x3 << 12)
+SU_INPUT_1 = (1 << 12)		#/* only if 1 input phase */
+SU_INPUT_3 = (1 << 13)		#/* only if 3 input phases */
+SU_OUTPHASES = (0x3 << 14)
+SU_OUTPUT_1 = (1 << 14)		#/* only if 1 output phase */
+SU_OUTPUT_3 = (1 << 15)		#/* only if 3 output phases */
+SU_BYPPHASES = (0x3 << 16)
+SU_BYPASS_1 = (1 << 16)		#/* only if 1 bypass phase */
+SU_BYPASS_3 = (1 << 17)		#/* only if 3 bypass phases */
+
+#/* hints for su_ups_set, applicable only to rw vars */
+SU_TYPE_INT = (0 << 18)		#/* cast to int when setting value */
+SU_TYPE_STRING = (1 << 18)	#/* cast to string. FIXME: redundant with ST_FLAG_STRING */
+SU_TYPE_TIME = (2 << 18)	#/* cast to int */
+SU_TYPE_CMD = (3 << 18)		#/* instant command */
+SU_TYPE_DAISY_1 = (1 << 19)
+SU_TYPE_DAISY_2 = (2 << 19)
+
+def die (msg):
+    print ("E: " + msg, file=sys.stderr)
+    sys.exit (1)
+
+def warn (msg):
+    print ("W: " + msg, file=sys.stderr)
+
+def mkElement (_element, **attrs):
+    el = MD.Element (_element)
+    for name, value in attrs.items ():
+        if value is None:
+            continue
+        el.setAttribute (name, str(value))
+    return el
+
+def mk_lookup (inp, root):
+    if not "INFO" in inp:
+        return
+
+    for name, lookup in inp ["INFO"].items ():
+        lookup_el = mkElement ("lookup", name=name)
+        for oid, value in lookup:
+            info_el = mkElement ("lookup_info", oid=oid, value=value)
+            lookup_el.appendChild (info_el)
+        root.appendChild (lookup_el)
+
+def mk_alarms (inp, root):
+    if not "ALARMS-INFO" in inp:
+        return
+    for name, lookup in inp ["ALARMS-INFO"].items ():
+        lookup_el = mkElement ("alarm", name=name)
+        for info in lookup:
+            info_el = mkElement ("info_alarm", oid=info ["OID"], status=info ["status_value"], alarm=info ["alarm_value"])
+            lookup_el.appendChild (info_el)
+        root.appendChild (lookup_el)
+
+def mk_snmp (inp, root):
+    if not "SNMP-INFO" in inp:
+        return
+    for name, lookup in inp ["SNMP-INFO"].items ():
+        lookup_el = mkElement ("snmp", name=name)
+        for info in lookup:
+
+            kwargs = dict (
+                    name=info ["info_type"],
+                    default=info.get ("dfl"),
+                    lookup=info.get ("oid2info"),
+                    oid=info.get ("OID")
+                    )
+
+            ### process info_flags
+            kwargs ["multiplier"] = info ["info_len"]
+
+            # I detected some differences against the original structures
+            # if the info_flags is ignored!
+            for name, info_flag, value in (
+                    ("writable", ST_FLAG_RW, "yes"),
+                    ("string", ST_FLAG_STRING, "yes"),
+                    ("immutable", ST_FLAG_IMMUTABLE, "yes"),
+                    ):
+                if not info_flag in info ["info_flags"]:
+                    continue
+                kwargs [name] = value
+                info ["info_flags"].remove (info_flag)
+
+            # ignore the "0" flag which means no bits set
+            len1 = len (info ["info_flags"])
+            if 0 in info ["info_flags"]:
+                info ["info_flags"].remove (0)
+                len2 = len (info ["info_flags"])
+                if ((len1-1) != len2):
+                    die ("Killed too much in info_flags array!")
+
+            # This is a assert - if there are info_flags we do not cover,
+            # fail here!!! (Mostly useful for NUT forks that might have a
+            # different schema that this stock script does not cover OOB).
+            if len (info ["info_flags"]) > 0:
+                die ("There are unprocessed items in info_flags (len == %d) in '%s'" % ( (len (info ["info_flags"])), info, ))
+
+            ### process flags
+            for name, flag, value in (
+                    ("flag_ok", SU_FLAG_OK, "yes"),
+                    ("static", SU_FLAG_STATIC, "yes"),
+                    ("absent", SU_FLAG_ABSENT, "yes"),
+                    ("positive", SU_FLAG_NEGINVALID, "yes"),
+                    ("unique", SU_FLAG_UNIQUE, "yes"),
+                    ("power_status", SU_STATUS_PWR, "yes"),
+                    ("battery_status", SU_STATUS_BATT, "yes"),
+                    ("calibration", SU_STATUS_CAL, "yes"),
+                    ("replace_battery", SU_STATUS_RB, "yes"),
+                    ("command", SU_TYPE_CMD, "yes"),
+                    ("outlet_group", SU_OUTLET_GROUP, "yes"),
+                    ("outlet", SU_OUTLET, "yes"),
+                    ("output_1_phase", SU_OUTPUT_1, "yes"),
+                    ("output_3_phase", SU_OUTPUT_3, "yes"),
+                    ("input_1_phase", SU_INPUT_1, "yes"),
+                    ("input_3_phase", SU_INPUT_3, "yes"),
+                    ("bypass_1_phase", SU_BYPASS_1, "yes"),
+                    ("bypass_3_phase", SU_BYPASS_3, "yes"),
+                    ("type_daisy", SU_TYPE_DAISY_1, "1"),
+                    ("type_daisy", SU_TYPE_DAISY_2, "2"),
+                    ):
+                if not flag in info ["flags"]:
+                    continue
+                kwargs [name] = value
+                info ["flags"].remove (flag)
+
+            # ignore flags not relevant to XML generations
+            for flag in (SU_FLAG_OK, SU_TYPE_STRING, SU_TYPE_INT):
+                if flag in info ["flags"]:
+                    info ["flags"].remove (flag)
+
+            if SU_FLAG_SETINT in info ["flags"]:
+                if not "setvar" in info:
+                    die ("SU_FLAG_SETINT in flags, but not setvar for '%s'", (info, ))
+                kwargs ["setvar"] = info ["setvar"]
+                info ["flags"].remove (SU_FLAG_SETINT)
+
+            # ignore the "0" flag which means no bits set
+            len1 = len (info ["flags"])
+            if 0 in info ["flags"]:
+                info ["flags"].remove (0)
+                len2 = len (info ["flags"])
+                if ((len1-1) != len2):
+                    die ("Killed too much in flags array!")
+
+            # This is a assert - if there are info_flags we do not cover, fail here!!!
+            if len (info ["flags"]) > 0:
+                die ("There are unprocessed items in flags (len == %d) in '%s'" % ( (len (info ["flags"])), info, ))
+
+            info_el = mkElement ("snmp_info", **kwargs)
+            lookup_el.appendChild (info_el)
+        root.appendChild (lookup_el)
+
+def mk_mib2nut (inp, root):
+    if not "MIB2NUT" in inp:
+        return
+
+    for name, lookup in inp ["MIB2NUT"].items ():
+
+        kwargs = dict (name=name)
+        for attr, key in (
+                ("oid", "sysOID"),
+                ("version", "mib_version"),
+                ("power_status", "oid_pwr_status"),
+                ("auto_check", "oid_auto_check"),
+                ("mib_name", "mib_name"),
+                ("snmp_info", "snmp_info"),
+                ("alarms_info", "alarms_info")):
+            if not key in lookup or lookup [key] is None:
+                continue
+            kwargs [attr] = lookup [key]
+
+        lookup_el = mkElement ("mib2nut", **kwargs)
+        root.appendChild (lookup_el)
+
+def s_mkparser ():
+    p = argparse.ArgumentParser ()
+    p.add_argument ("json", help="json input file (default stdin)", default='-', nargs='?')
+    return p
+
+## MAIN
+p = s_mkparser ()
+args = p.parse_args (sys.argv[1:])
+
+impl = MD.getDOMImplementation ()
+doc = impl.createDocument (None, "nut", None)
+root = doc.documentElement
+
+inp = None
+if args.json == '-':
+    inp = json.load (sys.stdin)
+else:
+    with open (args.json, "rt") as fp:
+        inp = json.load (fp)
+
+mk_lookup (inp, root)
+mk_alarms (inp, root)
+mk_snmp (inp, root)
+mk_mib2nut (inp, root)
+print (doc.toprettyxml ())
Index: nut-2.7.4/scripts/Makefile.am
===================================================================
--- nut-2.7.4.orig/scripts/Makefile.am
+++ nut-2.7.4/scripts/Makefile.am
@@ -26,3 +26,8 @@ EXTRA_DIST = README \
     Windows/Makefile
 
 SUBDIRS = augeas devd hotplug python systemd udev Solaris
+if WITH_SNMP
+if WITH_NEON
+  SUBDIRS += DMF
+endif
+endif
Index: nut-2.7.4/scripts/README
===================================================================
--- nut-2.7.4.orig/scripts/README
+++ nut-2.7.4/scripts/README
@@ -6,6 +6,7 @@ distributions,
 - Python Client module and application,
 - Perl client module,
 - Augeas support lenses and modules for NUT,
+- scripts to generate DMF data files from existing drivers/*-mib.c structures,
 - systemd support files.
 
 They have either been contributed by users of the software, or by the NUT Team
Index: nut-2.7.4/scripts/augeas/Makefile.am
===================================================================
--- nut-2.7.4.orig/scripts/augeas/Makefile.am
+++ nut-2.7.4/scripts/augeas/Makefile.am
@@ -14,3 +14,12 @@ dist-hook:
 		echo "Skipping Augeas ups.conf lens regeneration."; \
 		echo "----------------------------------------------------------------------"; \
 	fi
+
+if WITH_AUGLENS
+# Now "make install" should cover delivery of Augeas lenses...
+# The "auglensdir" value should be set up by configure
+# The *.aug files are generated by rule above or by autogen.sh and/or configure
+ auglens_DATA = \
+    nuthostsconf.aug  nutupsconf.aug   nutupsdusers.aug   nutupsschedconf.aug \
+    nutnutconf.aug    nutupsdconf.aug  nutupsmonconf.aug  nutupssetconf.aug
+endif
Index: nut-2.7.4/scripts/subdriver/gen-snmp-subdriver.sh
===================================================================
--- nut-2.7.4.orig/scripts/subdriver/gen-snmp-subdriver.sh
+++ nut-2.7.4/scripts/subdriver/gen-snmp-subdriver.sh
@@ -3,13 +3,13 @@
 # an auxiliary script to produce a "stub" snmp-ups subdriver from
 # SNMP data from a real agent or from dump files
 #
-# Version: 0.6
+# Version: 0.8
 #
 # See also: docs/snmp-subdrivers.txt
 #
 # Copyright (C)
 # 2011 - 2012 Arnaud Quette <arnaud.quette@free.fr>
-# 2015        Arnaud Quette <ArnaudQuette@Eaton.com>
+# 2015 - 2016 Arnaud Quette <ArnaudQuette@Eaton.com>
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
@@ -31,6 +31,7 @@
 usage() {
     echo "Usage: $0 [options] [file]"
     echo "Options:"
+    echo " -d, --dmf           -- generate DMF formatted files instead of C-style"
     echo " -h, --help          -- show this message and quit"
     echo " -n name             -- subdriver name (use natural capitalization)"
     echo " -M DIRLIST          -- colon separated list of directories to also search for MIBs"
@@ -67,6 +68,7 @@ MIBS_DIRLIST="+."
 COMMUNITY="public"
 SYSOID=""
 MODE=0
+DMF=0
 
 # constants
 NAME=gen-snmp-subdriver
@@ -88,9 +90,265 @@ get_snmp_data() {
 	fi
 
     # 2) get the content of the mfr specif MIB
+    # FIXME: test return value of the walk, and possibly ramp-up the path to get something.
+    # only works if we're pointed somehow in the right direction
+    # i.e. doesn't work if sysOID is .1.3.6.1.4.1.705.1 and data is at .1.3.6.1.4.1.534...
+    # Ex: sysOID = ".1.X.Y.Z"
+    # try with ".1.X.Y.Z", if fails try with .1.X.Y", if fails try with .1.X"...
     echo "Retrieving SNMP information. This may take some time"
     snmpwalk -On -v1 -c $COMMUNITY $HOSTNAME $SYSOID 2>/dev/null 1> $DFL_NUMWALKFILE
-    snmpwalk -Os -v1 -m ALL -M $MIBS_DIRLIST -c $COMMUNITY $HOSTNAME $SYSOID 2>/dev/null 1> $DFL_STRWALKFILE
+    snmpwalk -Os -v1 -m ALL -M$MIBS_DIRLIST -c $COMMUNITY $HOSTNAME $SYSOID 2>/dev/null 1> $DFL_STRWALKFILE
+}
+
+generate_C() {
+	# create file names
+	LDRIVER=`echo $DRIVER | tr A-Z a-z`
+	UDRIVER=`echo $DRIVER | tr a-z A-Z`
+	CFILE="$LDRIVER-mib.c"
+	HFILE="$LDRIVER-mib.h"
+
+	#FIXME: LDRIVER & UDRIVER => replace - by _
+
+	# generate header file
+	echo "Creating $HFILE"
+	cat > "$HFILE" <<-EOF
+	/* ${HFILE} - subdriver to monitor ${DRIVER} SNMP devices with NUT
+	 *
+	 *  Copyright (C)
+	 *  2011 - 2016	Arnaud Quette <arnaud.quette@free.fr>
+	 *
+	 *  This program is free software; you can redistribute it and/or modify
+	 *  it under the terms of the GNU General Public License as published by
+	 *  the Free Software Foundation; either version 2 of the License, or
+	 *  (at your option) any later version.
+	 *
+	 *  This program is distributed in the hope that it will be useful,
+	 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+	 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+	 *  GNU General Public License for more details.
+	 *
+	 *  You should have received a copy of the GNU General Public License
+	 *  along with this program; if not, write to the Free Software
+	 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+	 */
+
+	#ifndef ${UDRIVER}_MIB_H
+	#define ${UDRIVER}_MIB_H
+
+	#include "main.h"
+	#include "snmp-ups.h"
+
+	extern mib2nut_info_t ${LDRIVER};
+
+	#endif /* ${UDRIVER}_MIB_H */
+	EOF
+
+	# generate source file
+	# create header
+	echo "Creating $CFILE"
+	cat > "$CFILE" <<-EOF
+	/* ${CFILE} - subdriver to monitor ${DRIVER} SNMP devices with NUT
+	 *
+	 *  Copyright (C)
+	 *  2011 - 2016	Arnaud Quette <arnaud.quette@free.fr>
+	 *
+	 *  Note: this subdriver was initially generated as a "stub" by the
+	 *  gen-snmp-subdriver script. It must be customized!
+	 *
+	 *  This program is free software; you can redistribute it and/or modify
+	 *  it under the terms of the GNU General Public License as published by
+	 *  the Free Software Foundation; either version 2 of the License, or
+	 *  (at your option) any later version.
+	 *
+	 *  This program is distributed in the hope that it will be useful,
+	 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+	 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+	 *  GNU General Public License for more details.
+	 *
+	 *  You should have received a copy of the GNU General Public License
+	 *  along with this program; if not, write to the Free Software
+	 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+	 */
+
+	#include "${HFILE}"
+
+	#define ${UDRIVER}_MIB_VERSION  "0.1"
+
+	#define ${UDRIVER}_SYSOID       "${SYSOID}"
+
+	/* To create a value lookup structure (as needed on the 2nd line of the example
+	 * below), use the following kind of declaration, outside of the present snmp_info_t[]:
+	 * static info_lkp_t onbatt_info[] = {
+	 * 	{ 1, "OB" },
+	 * 	{ 2, "OL" },
+	 * 	{ 0, NULL }
+	 * };
+	 */
+
+	/* ${UDRIVER} Snmp2NUT lookup table */
+	static snmp_info_t ${LDRIVER}_mib[] = {
+
+		/* Data format:
+		 * { info_type, info_flags, info_len, OID, dfl, flags, oid2info, setvar },
+		 *
+		 *	info_type:	NUT INFO_ or CMD_ element name
+		 *	info_flags:	flags to set in addinfo
+		 *	info_len:	length of strings if STR
+		 *				cmd value if CMD, multiplier otherwise
+		 *	OID: SNMP OID or NULL
+		 *	dfl: default value
+		 *	flags: snmp-ups internal flags (FIXME: ...)
+		 *	oid2info: lookup table between OID and NUT values
+		 *	setvar: variable to set for SU_FLAG_SETINT
+		 *
+		 * Example:
+		 * { "input.voltage", 0, 0.1, ".1.3.6.1.4.1.705.1.6.2.1.2.1", "", SU_INPUT_1, NULL },
+		 * { "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.7.3.0", "", SU_FLAG_OK | SU_STATUS_BATT, onbatt_info },
+		 *
+		 * To create a value lookup structure (as needed on the 2nd line), use the
+		 * following kind of declaration, outside of the present snmp_info_t[]:
+		 * static info_lkp_t onbatt_info[] = {
+		 * 	{ 1, "OB" },
+		 * 	{ 2, "OL" },
+		 * 	{ 0, NULL }
+		 * };
+		 */
+	EOF
+
+	# extract OID string paths, one by one
+	LINENB="0"
+	while IFS= read -r line; do
+		LINENB="`expr $LINENB + 1`"
+		FULL_STR_OID="$line"
+		STR_OID="`echo $line | cut -d'.' -f1`"
+		echo $line | grep STRING > /dev/null
+		if [ $? -eq 0 ]; then
+			ST_FLAG_TYPE="ST_FLAG_STRING"
+			SU_INFOSIZE="SU_INFOSIZE"
+		else
+			ST_FLAG_TYPE="0"
+			SU_INFOSIZE="1"
+		fi
+		# get the matching numeric OID
+		NUM_OID="`sed -n ${LINENB}p ${NUMWALKFILE} | cut -d' ' -f1`"
+		printf "\t/* ${FULL_STR_OID} */\n\t{ \"unmapped.${STR_OID}\", ${ST_FLAG_TYPE}, ${SU_INFOSIZE}, \"${NUM_OID}\", NULL, SU_FLAG_OK, NULL, NULL },\n"
+	done < ${STRWALKFILE} >> ${CFILE}
+
+	# append footer
+	cat >> "$CFILE" <<-EOF
+
+		/* end of structure. */
+		{ NULL, 0, 0, NULL, NULL, 0, NULL }
+	};
+
+	mib2nut_info_t	${LDRIVER} = { "${LDRIVER}", ${UDRIVER}_MIB_VERSION, NULL, NULL, ${LDRIVER}_mib, ${UDRIVER}_SYSOID };
+	EOF
+}
+
+generate_DMF() {
+
+	# create file names
+	LDRIVER=`echo $DRIVER | tr A-Z a-z`
+	UDRIVER=`echo $DRIVER | tr a-z A-Z`
+	DMFFILE="$LDRIVER-mib.dmf"
+
+	#FIXME: LDRIVER & UDRIVER => replace - by _
+
+	# generate DMF file
+	echo "Creating $DMFFILE"
+	printf "<!-- ${DMFFILE} - Data Mapping File to monitor ${DRIVER} SNMP devices with NUT -->\n" > ${DMFFILE}
+	printf "<!-- this DMF was generated automatically. It must be customized! -->\n" >> ${DMFFILE}
+	printf "<?xml version=\"1.0\" ?>\n<nut>\n\t<snmp name=\"${LDRIVER}_mib\">\n" >> ${DMFFILE}
+	printf "\t\t<!-- Data format: -->\n" >> ${DMFFILE}
+	printf "\t\t<!-- To create a value lookup structure (as needed on the 2nd line of the example" >> ${DMFFILE}
+	printf "below), use the following kind of declaration:\n" >> ${DMFFILE}
+	printf "\t\t<lookup name=\"onbatt_info\">\n" >> ${DMFFILE}
+	printf "\t\t\t<lookup_info oid=\"1\" value=\"OB\"/>\n" >> ${DMFFILE}
+	printf "\t\t\t<lookup_info oid=\"2\" value=\"OL\"/>\n" >> ${DMFFILE}
+	printf "\t\t</lookup> -->\n\n" >> ${DMFFILE}
+	printf "\t\t<!-- To create a variable mapping entry, use the following kind of declaration:\n" >> ${DMFFILE}
+	printf "\t\t<snmp_info multiplier=\"...\" name=\"...\" oid=\"...\" power_status=\"...\" default=\"\" static=\"yes\" string=\"yes\"/>\n\n" >> ${DMFFILE}
+	printf "\t\tPossible attributes:\n" >> ${DMFFILE}
+	printf "\t\t* oid: numeric SNMP OID to get data from\n" >> ${DMFFILE}
+	printf "\t\t* multiplier: if present, multiply the value by this\n" >> ${DMFFILE}
+	printf "\t\t* power_status=\"yes\": if present and set to \"yes\", indicates power status element\n" >> ${DMFFILE}
+	printf "\t\t* battery_status=\"yes\": if present and set to \"yes\", indicates battery status element\n" >> ${DMFFILE}
+	printf "\t\t* calibration=\"yes\": if present and set to \"yes\", indicates calibration status element\n" >> ${DMFFILE}
+	printf "\t\t* replace_battery=\"yes\": if present and set to \"yes\", indicates replace battery status element\n" >> ${DMFFILE}
+	printf "\t\t* default: the default value, if we can't retrieve the OID value\n" >> ${DMFFILE}
+	printf "\t\t* static: retrieve info only once\n" >> ${DMFFILE}
+	printf "\t\t* string: the value of the OID is to be processed as a string\n" >> ${DMFFILE}
+	printf "\t\t* absent: data is absent in the device, use default value\n" >> ${DMFFILE}
+	printf "\t\t* positive: Invalid if negative value\n" >> ${DMFFILE}
+	printf "\t\t* unique: There can be only be one provider of this info, disable the other providers\n" >> ${DMFFILE}
+	printf "\t\t* input_1_phase: only processed if 1 input phase\n" >> ${DMFFILE}
+	printf "\t\t* input_3_phase: only processed if 3 input phase\n" >> ${DMFFILE}
+	printf "\t\t* output_1_phase: only processed if 1 output phase\n" >> ${DMFFILE}
+	printf "\t\t* output_3_phase: only processed if 3 output phase\n" >> ${DMFFILE}
+	printf "\t\t* bypass_1_phase: only processed if 1 bypass phase\n" >> ${DMFFILE}
+	printf "\t\t* bypass_1_phase: only processed if 3 bypass phase\n" >> ${DMFFILE}
+	printf "\t\t* outlet: outlet template definition\n" >> ${DMFFILE}
+	printf "\t\t* outlet_group: outlet group template definition\n" >> ${DMFFILE}
+	printf "\t\t* command: instant command definition\n" >> ${DMFFILE}
+	printf "\t\tExamples:\n" >> ${DMFFILE}
+	printf "\t\t<snmp_info multiplier=\"0.1\" name=\"input.voltage\" oid=\".1.3.6.1.4.1.705.1.6.2.1.2.1\" input_1_phase=\"yes\"/>\n" >> ${DMFFILE}
+	printf "\t\t<snmp_info multiplier=\"0.1\" name=\"ups.status\" oid=\".1.3.6.1.4.1.705.1.7.3.0\" string=\"yes\" battery_status=\"yes\" lookup=\"onbatt_info\"/>\n\t\t-->\n" >> ${DMFFILE}
+
+	printf "\n\t\t<!-- To create an alarm lookup structure (as needed in the mib2nut example" >> ${DMFFILE}
+	printf "below), use the following kind of declaration:\n" >> ${DMFFILE}
+	printf "\t\t<alarm name=\"pw_alarms\">\n" >> ${DMFFILE}
+	printf "\t\t\t<info_alarm alarm=\"...\" oid=\"...\" status=\"...\"/>\n" >> ${DMFFILE}
+	printf "\t\t</alarm>\n" >> ${DMFFILE}
+	printf "\t\tPossible attributes:\n" >> ${DMFFILE}
+	printf "\t\t* oid: numeric SNMP OID to match\n" >> ${DMFFILE}
+	printf "\t\t* alarm: if present, and different than \"None\", value to be published in *ups.alarm*\n" >> ${DMFFILE}
+	printf "\t\t* status: if present, and different than \"None\", value to be published in *ups.status*\n\n" >> ${DMFFILE}
+	printf "\t\tExamples:\n" >> ${DMFFILE}
+	printf "\t\t<alarm name=\"pw_alarms\">\n" >> ${DMFFILE}
+	printf "\t\t\t<info_alarm alarm=\"None\" oid=\"1.3.6.1.4.1.534.1.7.4\" status=\"LB\"/>\n" >> ${DMFFILE}
+	printf "\t\t\t<info_alarm alarm=\"Output overload!\" oid=\".1.3.6.1.4.1.534.1.7.7\" status=\"OVER\"/>\n" >> ${DMFFILE}
+	printf "\t\t\t<info_alarm alarm=\"Internal failure!\" oid=\".1.3.6.1.4.1.534.1.7.8\" status=\"None\"/>\n" >> ${DMFFILE}
+	printf "\t\t</alarm>\n\t\t-->\n" >> ${DMFFILE}
+	
+	# extract OID string paths, one by one
+	LINENB="0"
+	while IFS= read -r line; do
+		LINENB="`expr $LINENB + 1`"
+		FULL_STR_OID="$line"
+		STR_OID="`echo $line | cut -d'.' -f1`"
+		echo $line | grep STRING > /dev/null
+		if [ $? -eq 0 ]; then
+			ST_FLAG_TYPE="ST_FLAG_STRING"
+			SU_INFOSIZE="SU_INFOSIZE"
+		else
+			ST_FLAG_TYPE="0"
+			SU_INFOSIZE="1"
+		fi
+		# get the matching numeric OID
+		NUM_OID="`sed -n ${LINENB}p ${NUMWALKFILE} | cut -d' ' -f1`"
+		printf "\t\t<!-- ${FULL_STR_OID} -->\n\t\t<snmp_info name=\"unmapped.${STR_OID}\", oid=\"${NUM_OID}\", default=\"\"/>\n"
+	done < ${STRWALKFILE} >> ${DMFFILE}
+
+	# append footer
+	# FIXME: missing license field in mib2nut
+	printf "\t</snmp>\n\t<mib2nut auto_check=\"\" mib_name=\"${LDRIVER}_mib\" name=\"${LDRIVER}_mib\" oid=\"${SYSOID}\" snmp_info=\"${LDRIVER}_mib\" version=\"0.1\"/>\n" >> "$DMFFILE"
+
+	printf "\n\t<!-- Data format: -->\n" >> ${DMFFILE}
+	printf "\t<!-- To create a MIB mapping entry, use the following kind of declaration:\n" >> ${DMFFILE}
+	printf "\t<mib2nut alarms_info=\"...\" auto_check=\"...\" mib_name=\"...\" name=\"...\" oid=\".1.3.6.1.4.1.534.1\" snmp_info=\"...\" version=\"...\"/>" >> ${DMFFILE}
+	printf "\tPossible attributes:\n" >> ${DMFFILE}
+	printf "\t* oid: sysOID to match to use the present MIB\n" >> ${DMFFILE}
+	printf "\t* alarms_info: alarm lookup structure to use, to resolve status and alarms\n" >> ${DMFFILE}
+	printf "\t* auto_check: OID to counter check if the present MIB matches the device\n" >> ${DMFFILE}
+	printf "\t* mib_name: internal name of the DMF structure\n" >> ${DMFFILE}
+	printf "\t* name: friendly name of the DMF structure\n" >> ${DMFFILE}
+	printf "\t* snmp_info: snmp_info structure to use\n" >> ${DMFFILE}
+	printf "\t* version: version of the present mib2nut structure\n" >> ${DMFFILE}
+	printf "\tExamples:\n" >> ${DMFFILE}
+	printf "\t<mib2nut alarms_info=\"pw_alarms\" auto_check=\"1.3.6.1.4.1.534.1.1.2.0\" mib_name=\"pw\" name=\"powerware\" oid=\".1.3.6.1.4.1.534.1\" snmp_info=\"pw_mib\" version=\"0.88\"/>\n\t-->\n" >> ${DMFFILE}
+
+	printf "</nut>\n" >> "$DMFFILE"
+
 }
 
 # process command line options
@@ -101,6 +359,9 @@ while [ $# -gt 0 ]; do
     elif [ $# -gt 1 -a "$1" = "-M" ]; then
         MIBS_DIRLIST="$MIBS_DIRLIST:$2"
         shift 2
+    elif [ "$1" = "-d" ]; then
+        DMF=1
+        shift
     elif [ "$1" = "-k" ]; then
         KEEP=yes
         shift
@@ -210,153 +471,16 @@ STR_OID_COUNT="`cat $STRWALKFILE | wc -l
 
 echo "COUNT = $NUM_OID_COUNT / $NUM_OID_COUNT"
 
-# create file names
-LDRIVER=`echo $DRIVER | tr A-Z a-z`
-UDRIVER=`echo $DRIVER | tr a-z A-Z`
-CFILE="$LDRIVER-mib.c"
-HFILE="$LDRIVER-mib.h"
-
-# generate header file
-echo "Creating $HFILE"
-cat > "$HFILE" <<EOF
-/* ${HFILE} - subdriver to monitor ${DRIVER} SNMP devices with NUT
- *
- *  Copyright (C)
- *  2011 - 2012	Arnaud Quette <arnaud.quette@free.fr>
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- */
-
-#ifndef ${UDRIVER}_MIB_H
-#define ${UDRIVER}_MIB_H
-
-#include "main.h"
-#include "snmp-ups.h"
-
-extern mib2nut_info_t ${LDRIVER};
-
-#endif /* ${UDRIVER}_MIB_H */
-EOF
-
-# generate source file
-# create header
-echo "Creating $CFILE"
-cat > "$CFILE" <<EOF
-/* ${CFILE} - subdriver to monitor ${DRIVER} SNMP devices with NUT
- *
- *  Copyright (C)
- *  2011 - 2012	Arnaud Quette <arnaud.quette@free.fr>
- *
- *  Note: this subdriver was initially generated as a "stub" by the
- *  gen-snmp-subdriver script. It must be customized!
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
- */
-
-#include "${HFILE}"
-
-#define ${UDRIVER}_MIB_VERSION  "0.1"
-
-#define ${UDRIVER}_SYSOID       "${SYSOID}"
-
-/* To create a value lookup structure (as needed on the 2nd line of the example
- * below), use the following kind of declaration, outside of the present snmp_info_t[]:
- * static info_lkp_t onbatt_info[] = {
- * 	{ 1, "OB" },
- * 	{ 2, "OL" },
- * 	{ 0, NULL }
- * };
- */
-
-/* ${UDRIVER} Snmp2NUT lookup table */
-static snmp_info_t ${LDRIVER}_mib[] = {
-
-	/* Data format:
-	 * { info_type, info_flags, info_len, OID, dfl, flags, oid2info, setvar },
-	 *
-	 *	info_type:	NUT INFO_ or CMD_ element name
-	 *	info_flags:	flags to set in addinfo
-	 *	info_len:	length of strings if STR
-	 *				cmd value if CMD, multiplier otherwise
-	 *	OID: SNMP OID or NULL
-	 *	dfl: default value
-	 *	flags: snmp-ups internal flags (FIXME: ...)
-	 *	oid2info: lookup table between OID and NUT values
-	 *	setvar: variable to set for SU_FLAG_SETINT
-	 *
-	 * Example:
-	 * { "input.voltage", 0, 0.1, ".1.3.6.1.4.1.705.1.6.2.1.2.1", "", SU_INPUT_1, NULL },
-	 * { "ups.status", ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.705.1.7.3.0", "", SU_FLAG_OK | SU_STATUS_BATT, onbatt_info },
-	 *
-	 * To create a value lookup structure (as needed on the 2nd line), use the
-	 * following kind of declaration, outside of the present snmp_info_t[]:
-	 * static info_lkp_t onbatt_info[] = {
-	 * 	{ 1, "OB" },
-	 * 	{ 2, "OL" },
-	 * 	{ 0, NULL }
-	 * };
-	 */
-EOF
-
-
-# extract OID string paths, one by one
-LINENB="0"
-while IFS= read -r line; do
-	LINENB="`expr $LINENB + 1`"
-	FULL_STR_OID="$line"
-	STR_OID="`echo $line | cut -d'.' -f1`"
-	echo $line | grep STRING > /dev/null
-	if [ $? -eq 0 ]; then
-		ST_FLAG_TYPE="ST_FLAG_STRING"
-		SU_INFOSIZE="SU_INFOSIZE"
-	else
-		ST_FLAG_TYPE="0"
-		SU_INFOSIZE="1"
-	fi
-	# get the matching numeric OID
-	NUM_OID="`sed -n ${LINENB}p ${NUMWALKFILE} | cut -d' ' -f1`"
-	printf "\t/* ${FULL_STR_OID} */\n\t{ \"unmapped.${STR_OID}\", ${ST_FLAG_TYPE}, ${SU_INFOSIZE}, \"${NUM_OID}\", NULL, SU_FLAG_OK, NULL, NULL },\n"
-done < ${STRWALKFILE} >> ${CFILE}
-
-# append footer
-cat >> "$CFILE" <<EOF
-
-	/* end of structure. */
-	{ NULL, 0, 0, NULL, NULL, 0, NULL }
-};
-
-mib2nut_info_t	${LDRIVER} = { "${LDRIVER}", ${UDRIVER}_MIB_VERSION, NULL, NULL, ${LDRIVER}_mib, ${UDRIVER}_SYSOID };
-EOF
+generate_C
+if [ "$DMF" -eq 1 ]; then
+	generate_DMF
+fi
 
 # Display the remaining tasks
 cat <<EOF
 Done.
 
-Do not forget to:
+For C-style integration, do not forget to:
 * bump DRIVER_VERSION in snmp-ups.c (add "0.01")
 * copy "${HFILE}" and "${CFILE}" to "../../drivers"
 * add #include "${HFILE}" to drivers/snmp-ups.c
@@ -364,4 +488,7 @@ Do not forget to:
 * add ${LDRIVER}-mib.c to snmp_ups_SOURCES in drivers/Makefile.am
 * add ${LDRIVER}-mib.h to dist_noinst_HEADERS in drivers/Makefile.am
 * "./autogen.sh && ./configure && make" from the top level directory
+
+If otherwise using DMF, ensure that MIB2NUT information are present in
+snmp-discovery.dmf
 EOF
Index: nut-2.7.4/tests/Makefile.am
===================================================================
--- nut-2.7.4.orig/tests/Makefile.am
+++ nut-2.7.4/tests/Makefile.am
@@ -8,9 +8,10 @@ check_PROGRAMS = $(TESTS)
 
 cppunittest_CXXFLAGS = $(CPPUNIT_CFLAGS)
 cppunittest_LDFLAGS = $(CPPUNIT_LIBS)
+cppunittest_LDADD = ../clients/libnutclient.la
 
 # List of src files for CppUnit tests
-CPPUNITTESTSRC = example.cpp
+CPPUNITTESTSRC = example.cpp nutclienttest.cpp
 
 cppunittest_SOURCES = $(CPPUNITTESTSRC) cpputest.cpp
 
Index: nut-2.7.4/tests/nutclienttest.cpp
===================================================================
--- /dev/null
+++ nut-2.7.4/tests/nutclienttest.cpp
@@ -0,0 +1,100 @@
+/* nutclienttest - CppUnit nutclient unit test
+
+   Copyright (C) 2016  Emilien Kia <emilien.kia@gmail.com>
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+*/
+#include <cppunit/extensions/HelperMacros.h>
+
+class NutClientTest : public CppUnit::TestFixture
+{
+	CPPUNIT_TEST_SUITE( NutClientTest );
+		CPPUNIT_TEST( test_stringset_to_strarr );
+		CPPUNIT_TEST( test_stringvector_to_strarr );
+	CPPUNIT_TEST_SUITE_END();
+
+public:
+	void setUp();
+	void tearDown();
+
+	void test_stringset_to_strarr();
+	void test_stringvector_to_strarr();
+};
+
+// Registers the fixture into the 'registry'
+CPPUNIT_TEST_SUITE_REGISTRATION( NutClientTest );
+
+#include "../clients/nutclient.h"
+extern "C" {
+strarr stringset_to_strarr(const std::set<std::string>& strset);
+strarr stringvector_to_strarr(const std::vector<std::string>& strset);
+} // extern "C"
+
+void NutClientTest::setUp()
+{
+}
+
+void NutClientTest::tearDown()
+{
+}
+
+void NutClientTest::test_stringset_to_strarr()
+{
+	std::set<std::string> strset;
+	strset.insert("test");
+	strset.insert("hello");
+	strset.insert("world");
+
+	strarr arr = stringset_to_strarr(strset);
+	CPPUNIT_ASSERT_MESSAGE("stringset_to_strarr(...) result is null", arr!=NULL);
+
+	std::set<std::string> res;
+
+	char** ptr = arr;
+	while(*ptr!=NULL)
+	{
+		res.insert(std::string(*ptr));
+		ptr++;
+	}
+
+	CPPUNIT_ASSERT_EQUAL_MESSAGE("stringset_to_strarr(...) result has not 3 items", (size_t)3, res.size());
+	CPPUNIT_ASSERT_MESSAGE("stringset_to_strarr(...) result has not item \"test\"", res.find("test")!=res.end());
+	CPPUNIT_ASSERT_MESSAGE("stringset_to_strarr(...) result has not item \"hello\"", res.find("hello")!=res.end());
+	CPPUNIT_ASSERT_MESSAGE("stringset_to_strarr(...) result has not item \"world\"", res.find("world")!=res.end());
+	
+	strarr_free(arr);
+}
+
+void NutClientTest::test_stringvector_to_strarr()
+{
+	std::vector<std::string> strset;
+	strset.push_back("test");
+	strset.push_back("hello");
+	strset.push_back("world");
+
+	strarr arr = stringvector_to_strarr(strset);
+	CPPUNIT_ASSERT_MESSAGE("stringvector_to_strarr(...) result is null", arr!=NULL);
+
+	char** ptr = arr;
+	CPPUNIT_ASSERT_EQUAL_MESSAGE("stringvector_to_strarr(...) result has not item 0==\"test\"", std::string("test"), std::string(*ptr));
+	++ptr;
+	CPPUNIT_ASSERT_EQUAL_MESSAGE("stringvector_to_strarr(...) result has not item 1==\"hello\"", std::string("hello"), std::string(*ptr));
+	++ptr;
+	CPPUNIT_ASSERT_EQUAL_MESSAGE("stringvector_to_strarr(...) result has not item 2==\"world\"", std::string("world"), std::string(*ptr));
+	++ptr;
+	CPPUNIT_ASSERT_EQUAL_MESSAGE("stringvector_to_strarr(...) result has not only 3 items", (char*)NULL, *ptr);
+	
+	strarr_free(arr);
+}
Index: nut-2.7.4/tools/nut-scanner/Makefile.am
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/Makefile.am
+++ nut-2.7.4/tools/nut-scanner/Makefile.am
@@ -1,14 +1,35 @@
-BUILT_SOURCES = nutscan-usb.h nutscan-snmp.h
+BUILT_SOURCES = nutscan-usb.h nutscan-snmp.c
 
-nutscan-usb.h nutscan-snmp.h:
+nutscan-usb.h nutscan-snmp.c:
 	cd ..; $(MAKE) $(AM_MAKEFLAGS) nut-scanner-deps
 
+# We optionally append valued to this below
+bin_PROGRAMS =
+if WITH_NEON
+if WITH_SNMP
+if WITH_DMF
+ bin_PROGRAMS += nut-scanner-reindex-dmfsnmp
+ nut_scanner_reindex_dmfsnmp_SOURCES = nut-scanner-reindex-dmfsnmp.c \
+    $(top_srcdir)/include/dmfsnmp.h
+ nut_scanner_reindex_dmfsnmp_LDADD = $(top_builddir)/common/libnutdmfsnmp.la \
+    $(top_builddir)/common/libcommon.la $(top_builddir)/common/libparseconf.la \
+    $(LIBNETSNMP_LIBS) $(LIBNEON_LIBS) $(LUA_LIB) 
+ nut_scanner_reindex_dmfsnmp_CFLAGS = -I$(top_srcdir)/include \
+    -I$(top_srcdir)/drivers -I$(top_srcdir)/tools/nut-scanner \
+    $(LIBNETSNMP_CFLAGS) $(LIBNEON_CFLAGS)
+if HAVE_DMF_LUA
+ nut_scanner_reindex_dmfsnmp_CFLAGS += -DWITH_DMF_LUA=1 $(LUA_INCLUDE)
+endif
+endif
+endif
+endif
+
 # Only build nut-scanner, and its library, if libltdl was found (required!)
 if WITH_LIBLTDL
- bin_PROGRAMS = nut-scanner
+ bin_PROGRAMS += nut-scanner
  lib_LTLIBRARIES = libnutscan.la
 endif
-libnutscan_la_SOURCES = scan_nut.c scan_ipmi.c \
+libnutscan_la_SOURCES = scan_nut.c scan_ipmi.c nutscan-snmp.c \
 			nutscan-device.c nutscan-ip.c nutscan-display.c \
 			nutscan-init.c  scan_usb.c scan_snmp.c scan_xml_http.c \
 			scan_avahi.c scan_eaton_serial.c nutscan-serial.c \
@@ -17,12 +38,31 @@ libnutscan_la_SOURCES = scan_nut.c scan_
 			../../common/common.c ../../common/str.c
 libnutscan_la_LIBADD = $(NETLIBS) $(LIBLTDL_LIBS)
 libnutscan_la_LDFLAGS = $(SERLIBS) -version-info 1:0:0
-libnutscan_la_CFLAGS = -I$(top_srcdir)/clients -I$(top_srcdir)/include $(LIBLTDL_CFLAGS) -I$(top_srcdir)/drivers
+libnutscan_la_CFLAGS = -I$(top_srcdir)/clients -I$(top_srcdir)/include $(LIBLTDL_CFLAGS) -I$(top_srcdir)/drivers $(LUA_INCLUDE)
 
 nut_scanner_SOURCES = nut-scanner.c
 nut_scanner_CFLAGS = -I$(top_srcdir)/clients -I$(top_srcdir)/include
 nut_scanner_LDADD = libnutscan.la
 
+if WITH_SNMP
+if WITH_NEON
+nut_scanner_CFLAGS += -I$(top_srcdir)/drivers
+if WITH_DMF
+nut_scanner_CFLAGS += -DWITH_DMFMIB=1
+if HAVE_DMF_LUA
+nut_scanner_CFLAGS += -DWITH_DMF_LUA=1 $(LUA_INCLUDE)
+nut_scanner_LDADD += $(LUA_LIB)
+endif
+endif
+libnutscan_la_LIBADD += $(top_builddir)/common/libnutdmfsnmp.la
+#	$(top_builddir)/common/libcommon.la $(top_builddir)/common/libparseconf.la
+# The libs needed to handle XML parsing and usage of DMF SNMP are ltdl()'ed
+# but without this builds fail (TODO: Revise responsible code? LTDL in DMF?)
+#	$(LIBNETSNMP_LIBS)
+libnutscan_la_LIBADD += $(LIBNEON_LIBS) $(LUA_LIB)
+endif
+endif
+
 if WITH_SSL
   libnutscan_la_CFLAGS += $(LIBSSL_CFLAGS)
   libnutscan_la_LIBADD += $(LIBSSL_LIBS)
@@ -43,13 +83,14 @@ if WITH_IPMI
   libnutscan_la_CFLAGS += $(LIBIPMI_CFLAGS)
 endif
 
-dist_noinst_HEADERS = nutscan-usb.h nutscan-snmp.h
+# C is not a header, but there is no dist_noinst_SOURCES
+dist_noinst_HEADERS = nutscan-usb.h nutscan-snmp.c
 
 if WITH_DEV
- include_HEADERS = nut-scan.h nutscan-device.h nutscan-ip.h nutscan-init.h
+ include_HEADERS = nut-scan.h nutscan-device.h nutscan-ip.h nutscan-init.h nutscan-serial.h nutscan-snmp.h
 else
- dist_noinst_HEADERS += nut-scan.h nutscan-device.h nutscan-ip.h nutscan-init.h nutscan-serial.h
+ dist_noinst_HEADERS += nut-scan.h nutscan-device.h nutscan-ip.h nutscan-init.h nutscan-serial.h nutscan-snmp.h
 endif
 
-CLEANFILES = nutscan-usb.h nutscan-snmp.h
+CLEANFILES = nutscan-usb.h nutscan-snmp.c
 
Index: nut-2.7.4/tools/nut-scanner/README
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/README
+++ nut-2.7.4/tools/nut-scanner/README
@@ -8,8 +8,12 @@ linkman:nut-scanner[8] is available to d
 (USB, SNMP, Eaton XML/HTTP and IPMI) and NUT servers (using Avahi or the
 classic connection method).
 
-This tool actually use a library, called *libnutscan*, to perform actual
-processing.
+This tool actually uses a library, called *libnutscan*, to perform actual
+processing. The library is built with DMF support for SNMP device discovery,
+when it can use loadable files that map MIB and other needed details to NUT
+internals. If the client does not set relevant flags for loading DMF, or if
+no data was successfully loaded, the library would fall back to using the
+legacy static built-in structure with some mappings available in it.
 
 
 Client access library
Index: nut-2.7.4/tools/nut-scanner/nut-scan.h
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/nut-scan.h
+++ nut-2.7.4/tools/nut-scanner/nut-scan.h
@@ -52,6 +52,7 @@ typedef struct nutscan_snmp {
 	char * privProtocol;
 	char * peername;
 	void * handle;
+	char * fingerprints_file;
 } nutscan_snmp_t;
 
 /* IPMI structure */
Index: nut-2.7.4/tools/nut-scanner/nut-scanner-reindex-dmfsnmp.c
===================================================================
--- /dev/null
+++ nut-2.7.4/tools/nut-scanner/nut-scanner-reindex-dmfsnmp.c
@@ -0,0 +1,293 @@
+/* dmf-reindex.c - Network UPS Tools XML-driver-loader: validate large DMFs
+ * by importing them, and print a concise DMF with bits just for nut-scanner
+ * to initialize its `snmp_device_id_t snmp_device_table[]` array of strings.
+ *
+ * Copyright (C) 2016 Carlos Dominguez <CarlosDominguez@eaton.com>
+ * Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
+ * Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#include <errno.h>
+#include <dirent.h>
+#include <assert.h>
+
+#include "config.h"
+#include "common.h"
+#ifndef DMFREINDEXER_MAKECHECK
+# include "nut_version.h"
+#endif
+#include "dmf.h"
+
+// These strings are embedded into <nut> tags to show their schema version
+// Strings must verbatim match the XSD (no trailing slash etc.)
+#ifndef XSD_DMFNUTSCAN_VERSION
+#define XSD_DMFNUTSCAN_VERSION  "1.0.0"
+#endif
+#ifndef XSD_DMFNUTSCAN_XMLNS
+#define XSD_DMFNUTSCAN_XMLNS    "http://www.networkupstools.org/dmf/snmp/nutscan"
+#endif
+
+const char optstring[] = "?hDVkKZ:";
+#define ERR_BAD_OPTION	(-1)
+
+#ifdef HAVE_GETOPT_LONG
+const struct option longopts[] = {
+	{ "help",no_argument,NULL,'h' },
+	{ "nut_debug_level",no_argument,NULL,'D' },
+	{ "version",no_argument,NULL,'V' },
+	{ "proceed_on_errors",no_argument,NULL,'k' },
+	{ "abort_on_errors",no_argument,NULL,'K' },
+	{ "dmf_dir", required_argument, NULL, 'Z' },
+	{NULL,0,NULL,0}};
+#else
+#define getopt_long(a,b,c,d,e)	getopt(a,b,c) 
+#endif /* HAVE_GETOPT_LONG */
+
+int main(int argc, char *argv[])
+{
+	int opt_ret;
+	int result = 0;
+	int ret_code = EXIT_SUCCESS;
+	int proceed_on_errors = 1;
+	char *dir_name = NULL; // TODO: Make configurable the dir and/or list of files
+	int dir_name_dynamic = 0;
+	// TODO: Consider DEFAULT_DMFNUTSCAN_DIR for automatic output mode into a file?
+#ifdef DEFAULT_DMFSNMP_DIR_OVERRIDE
+#ifdef DEFAULT_DMFSNMP_DIR
+#undef DEFAULT_DMFSNMP_DIR
+#endif
+#define DEFAULT_DMFSNMP_DIR DEFAULT_DMFSNMP_DIR_OVERRIDE
+#endif
+
+#ifdef DEFAULT_DMFSNMP_DIR
+	dir_name = DEFAULT_DMFSNMP_DIR;
+#else
+	dir_name = "./";
+#endif
+
+// TODO: Usage (help), Command-line args
+// option to append just a few (new) files to existing (large) index
+
+	while((opt_ret = getopt_long(argc, argv, optstring, longopts, NULL))!=-1) {
+
+		switch(opt_ret) {
+			case 'Z':
+				if (dir_name_dynamic != 0)
+					free(dir_name);
+				dir_name = strdup(optarg);
+				dir_name_dynamic = 1;
+				break;
+			case 'D':
+				nut_debug_level++;
+				break;
+			case 'k':
+				proceed_on_errors = 1;
+				break;
+			case 'K':
+				proceed_on_errors = 0;
+				break;
+			case 'V':
+				printf("Network UPS Tools - %s\n",
+#ifdef DMFREINDEXER_MAKECHECK
+					"private build for DMF make check"
+#else
+					NUT_VERSION_MACRO
+#endif
+					);
+				exit(EXIT_SUCCESS);
+				break;
+			case '?':
+				ret_code = ERR_BAD_OPTION;
+			case 'h':
+			default:
+				puts("nut-scanner-reindex-dmfsnmp : a tool to reindex existing DMF files into the subset needed by nut-scanner.\n");
+				puts("OPTIONS:");
+				printf("  -Z, --dmf_dir: Directory where large DMF MIB mapping file which you want to index reside\n");
+				printf("\nMiscellaneous options:\n");
+				printf("  -V, --version: Display NUT version\n");
+				printf("  -D, --nut_debug_level: Raise the debugging level.  Use this multiple times to see more details.\n");
+				printf("  -k, --proceed-on-errors: If some files could not be parsed, process what we have read%s.\n", proceed_on_errors==1?" (default)":"");
+				printf("  -K, --abort-on-errors: If some files could not be parsed, do not process anything%s.\n", proceed_on_errors==1?"":" (default)");
+				return ret_code;
+		}
+	}
+
+	mibdmf_parser_t * dmp = mibdmf_parser_new();
+	if (!dmp) {
+		upsdebugx(2,"=== DMF-Reindex: FATAL: Can not allocate the DMF parsing structures\n");
+		return ENOMEM;
+	}
+
+	upsdebugx(1, "=== DMF-Reindex: Loading DMF structures from directory '%s':\n\n", dir_name);
+	result = mibdmf_parse_dir(dir_name, dmp);
+	if (result != 0 && proceed_on_errors != 1) {
+	// TODO: Error-checking? Faults in some parses should be fatal or not?
+		upsdebugx(1,"=== DMF-Reindex: FATAL: Could not find or parse some files\n");
+		return result;
+	}
+
+	// Loop through discovered device_table and print it back as DMF markup
+	upsdebugx(2, "=== DMF-Reindex: Print DMF subset for snmp_device_table[]...\n\n");
+
+	snmp_device_id_t *devtab = mibdmf_get_device_table(dmp);
+	if (!devtab)
+	{
+		upsdebugx(1,"=== DMF-Reindex: FATAL: Can not access the parsed device_table\n");
+		return ENOMEM;
+	}
+
+	// Below we sprintf the index into a memory string, parse the result as
+	// a DMF with a new alist and tables (to validate) and test the same data
+	// is found. And only then output the stdout text.
+	// TODO: uniquify output, so that an old index that was read in does not
+	// pollute the parsed results (at least not for completely same items as
+	// already exist in the table)? What to do about partial hits ~ updates?
+	size_t i;
+	size_t newdmf_len=0, newdmf_size=1024;
+	char *newdmf = (char*)calloc(newdmf_size, sizeof(char));
+	if (!newdmf) {
+		upsdebugx(2,"=== DMF-Reindex: FATAL: Can not allocate the buffer for parsed DMF\n");
+		return ENOMEM;
+	}
+	newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+		"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
+		"<nut version=\"%s\" xmlns=\"%s\">\n",
+		XSD_DMFNUTSCAN_VERSION, XSD_DMFNUTSCAN_XMLNS);
+	for (i=0; devtab[i].oid != NULL || devtab[i].mib != NULL || devtab[i].sysoid != NULL ; i++)
+	{
+		upsdebugx(2,"[num=%zu (lenbefore=%zu)]", i, newdmf_len);
+
+		// ASSUMPTION: String increments would not exceed these few bytes
+		if ( (newdmf_size - newdmf_len) < 256)
+		{
+			newdmf_size += 1024;
+			newdmf = (char*)realloc(newdmf, newdmf_size * sizeof(char));
+			if (!newdmf) {
+				upsdebugx(2,"=== DMF-Reindex: FATAL: Can not extend the buffer for parsed DMF\n");
+				return ENOMEM;
+			}
+			upsdebugx(2, "\nExtended the buffer to %zu bytes\n", newdmf_size);
+		}
+
+		newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+			"\t<mib2nut ");
+
+		// This attr is always present, even if as an empty string:
+		newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+			"auto_check=\"%s\" ", devtab[i].oid ? devtab[i].oid : ""); // [3 oid_auto_check] oid
+
+		if (devtab[i].mib != NULL)
+			newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+				"mib_name=\"%s\" ", devtab[i].mib); // [0 mib_name] mib
+
+		if (devtab[i].sysoid != NULL)
+			newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+				"oid=\"%s\" ", devtab[i].sysoid);  // [5 sysOID] sysoid/NULL
+
+		newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+			"/>\n");
+	}
+	newdmf_len += snprintf(newdmf + newdmf_len, (newdmf_size - newdmf_len),
+		"</nut>\n");
+
+	upsdebugx(2,"[LAST: num=%zu (lenafter=%zu)] ", i, newdmf_len);
+	upsdebugx(1, "\n=== DMF-Reindex: Indexed %zu entries...\n\n", i);
+
+	mibdmf_parser_t * newdmp = mibdmf_parser_new();
+	if (!newdmp) {
+		upsdebugx(2,"=== DMF-Reindex: FATAL: Can not allocate the DMF verification parsing structures\n\n");
+		return ENOMEM;
+	}
+
+	upsdebugx(1, "=== DMF-Reindex: Loading DMF structures from prepared string (verification)\n\n");
+	ret_code = mibdmf_parse_str(newdmf, newdmp);
+	// Error checking for one (just made) document makes sense and is definite
+	if ( result != 0 ) {
+		upsdebugx(2, "=== DMF-Reindex: The generated document FAILED syntax verification\n\n");
+		return ret_code;
+	}
+
+	// Loop through reparsed device_table and compare to original one
+	upsdebugx(1, "=== DMF-Reindex: Verify reparsed content for snmp_device_table[]...\n\n");
+	snmp_device_id_t *newdevtab = mibdmf_get_device_table(newdmp);
+	if (!newdevtab)
+	{
+		upsdebugx(2,"=== DMF-Reindex: FATAL: Can not access the reparsed device_table\n");
+		return ENOMEM;
+	}
+
+	size_t j=-1, k=-1;
+	result=0;
+	// Make sure that all values we've considered are present in re-parse
+	for (k=0; devtab[k].oid != NULL || devtab[k].mib != NULL || devtab[k].sysoid != NULL ; k++)
+	{
+		int r = 0;
+		for (j=0; newdevtab[j].oid != NULL || newdevtab[j].mib != NULL || newdevtab[j].sysoid != NULL ; j++)
+		{ // Note: OID attribute may be empty or NULL, these are assumed equal
+			if ( (dmf_streq(newdevtab[j].oid, devtab[k].oid)
+			    ||dmf_streq(newdevtab[j].oid, "")
+			    ||dmf_streq(newdevtab[j].oid, NULL) )
+			 && dmf_streq(newdevtab[j].mib, devtab[k].mib)
+			 && dmf_streq(newdevtab[j].sysoid, devtab[k].sysoid) )
+			{
+				r = 1;
+				break;
+			}
+		}
+
+		if ( r==0 )
+		{
+			upsdebugx(2,"=== DMF-Reindex: mismatch in line %zu of the old table (no hits in new table)\n", k);
+			result++;
+		}
+	}
+
+	for (j=0; newdevtab[j].oid != NULL || newdevtab[j].mib != NULL || newdevtab[j].sysoid != NULL ; j++) ;
+
+	if ( i!=j )
+	{
+		upsdebugx(2,"=== DMF-Reindex: mismatch in amount of lines of old(%zu) and new(%zu) tables\n", i, j);
+		result++;
+	}
+
+	if ( i<=1 )
+	{
+		upsdebugx(2,"=== DMF-Reindex: empty table was generated\n");
+		result++;
+	}
+
+	if ( result != 0 )
+	{
+		upsdebugx(2,"=== DMF-Reindex: The generated document FAILED content verification (%d issues)\n\n", result);
+		return result;
+	}
+
+	upsdebugx(1, "=== DMF-Reindex: Checks succeeded - printing generated DMF to stdout...\n\n");
+	printf("%s", newdmf);
+
+	upsdebugx(2, "=== DMF-Reindex: Freeing data...\n\n");
+	mibdmf_parser_destroy(&newdmp);
+	mibdmf_parser_destroy(&dmp);
+	free(newdmf);
+
+	upsdebugx(1, "=== DMF-Reindex: All done\n\n");
+
+	if (dir_name_dynamic != 0)
+		free (dir_name);
+
+	return ret_code;
+}
Index: nut-2.7.4/tools/nut-scanner/nut-scanner.c
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/nut-scanner.c
+++ nut-2.7.4/tools/nut-scanner/nut-scanner.c
@@ -1,5 +1,6 @@
 /*
  *  Copyright (C) 2011 - 2012  Arnaud Quette <arnaud.quette@free.fr>
+ *  Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -17,8 +18,9 @@
  */
 
 /*! \file nut-scanner.c
-    \brief a tool to detect NUT supported devices
+    \brief A tool to detect NUT supported devices
     \author Arnaud Quette <arnaud.quette@free.fr>
+    \author Jim Klimov <EvgenyKlimov@eaton.com>
 */
 
 #include <stdio.h>
@@ -34,11 +36,39 @@
 
 #include "nut-scan.h"
 
+#ifdef WITH_DMFMIB
+# ifdef WANT_LIBNUTSCAN_SNMP_DMF
+# undef WANT_LIBNUTSCAN_SNMP_DMF
+# endif
+
+// This chains to also include nutscan-snmp.h and the desired
+// variables need structures defined lower in the dmf.h file.
+// But there is protection in nutscan-snmp.h to only declare
+// those vars if dmf.h was already completely imported.
+#include "dmf.h"
+
+// Now we may "want" the variables from libnutscan with types from dmf.h
+#define WANT_LIBNUTSCAN_SNMP_DMF 1
+#include "nutscan-snmp.h"
+#endif /* WITH_DMFMIB */
+
+#ifdef DEFAULT_DMFNUTSCAN_DIR_OVERRIDE
+# ifdef DEFAULT_DMFNUTSCAN_DIR
+# undef DEFAULT_DMFNUTSCAN_DIR
+# endif
+#define DEFAULT_DMFNUTSCAN_DIR DEFAULT_DMFNUTSCAN_DIR_OVERRIDE
+#endif
+
+#ifndef DEFAULT_DMFNUTSCAN_DIR
+#define DEFAULT_DMFNUTSCAN_DIR "./"
+#endif
+
 #define DEFAULT_TIMEOUT 5
 
 #define ERR_BAD_OPTION	(-1)
 
-const char optstring[] = "?ht:s:e:E:c:l:u:W:X:w:x:p:b:B:d:D:CUSMOAm:NPqIVa";
+// TODO : #ifdef WITH_DMFMIB for options to set up path(s) to the DMFs to load
+const char optstring[] = "?ht:s:e:E:c:l:u:W:X:w:x:p:b:B:d:L:CUSMOAm:NPqIVazZ:D";
 
 #ifdef HAVE_GETOPT_LONG
 const struct option longopts[] =
@@ -57,7 +87,7 @@ const struct option longopts[] =
 	{ "username",required_argument,NULL,'b' },
 	{ "password",required_argument,NULL,'B' },
 	{ "authType",required_argument,NULL,'d' },
-	{ "cipher_suite_id",required_argument,NULL,'D' },
+	{ "cipher_suite_id",required_argument,NULL,'L' },
 	{ "port",required_argument,NULL,'p' },
 	{ "complete_scan",no_argument,NULL,'C' },
 	{ "usb_scan",no_argument,NULL,'U' },
@@ -72,6 +102,10 @@ const struct option longopts[] =
 	{ "help",no_argument,NULL,'h' },
 	{ "version",no_argument,NULL,'V' },
 	{ "available",no_argument,NULL,'a' },
+	{ "snmp_fingerprints_file",required_argument,NULL,'F' },
+	{ "snmp_scan_dmf", no_argument, NULL, 'z' },
+	{ "snmp_scan_dmf_dir", required_argument, NULL, 'Z' },
+	{ "nut_debug_level", no_argument, NULL, 'D' },
 	{NULL,0,NULL,0}};
 #else
 #define getopt_long(a,b,c,d,e)	getopt(a,b,c) 
@@ -209,6 +243,33 @@ int main(int argc, char *argv[])
 			case 'm':
 				cidr = strdup(optarg);
 				break;
+			case 'D':
+				nut_debug_level++;
+				break;
+
+#ifdef WITH_DMFMIB
+			case 'z':
+				if(!nutscan_avail_snmp || !nutscan_avail_xml_http) {
+					goto display_help;
+				}
+				dmfnutscan_snmp_dir = DEFAULT_DMFNUTSCAN_DIR;
+				allow_snmp = 1;
+				break;
+			case 'Z':
+				if(!nutscan_avail_snmp || !nutscan_avail_xml_http) {
+					goto display_help;
+				}
+				dmfnutscan_snmp_dir = strdup(optarg);
+				allow_snmp = 1;
+				break;
+#else
+			case 'z':
+			case 'Z':
+				fprintf(stderr,"DMF SNMP support not built in, option (-%c) ignored (only enabling built-in SNMP).\n", opt_ret);
+				allow_snmp = 1;
+				break;
+#endif /* WITH_DMFMIB */
+
 			case 'c':
 				if(!nutscan_avail_snmp) {
 					goto display_help;
@@ -289,7 +350,7 @@ int main(int argc, char *argv[])
 					fprintf(stderr,"Unknown authentication type (%s). Defaulting to MD5\n", optarg);
 				}
 				break;
-			case 'D':
+			case 'L':
 				if(!nutscan_avail_ipmi) {
 					goto display_help;
 				}
@@ -342,12 +403,21 @@ int main(int argc, char *argv[])
 			case 'V':
 				printf("Network UPS Tools - %s\n", NUT_VERSION_MACRO);
 				exit(EXIT_SUCCESS);
+			case 'F':
+				if(!nutscan_avail_snmp) {
+					goto display_help;
+				}
+				snmp_sec.fingerprints_file = strdup(optarg);
+				break;
 			case 'a':
 				printf("OLDNUT\n");
 				if(nutscan_avail_usb) {
 					printf("USB\n");
 				}
 				if(nutscan_avail_snmp) {
+					if(nutscan_avail_xml_http) {
+						printf("SNMP_DMF\n");
+					}
 					printf("SNMP\n");
 				}
 				if(nutscan_avail_xml_http) {
@@ -373,7 +443,20 @@ display_help:
 					printf("  -U, --usb_scan: Scan USB devices.\n");
 				}
 				if( nutscan_avail_snmp ) {
-					printf("  -S, --snmp_scan: Scan SNMP devices.\n");
+					printf("  -S, --snmp_scan: Scan SNMP devices using built-in mapping definitions.\n");
+#ifdef WITH_DMFMIB
+					printf("  -z, --snmp_scan_dmf: Scan SNMP devices using DMF files in default directory (" DEFAULT_DMFNUTSCAN_DIR ").\n");
+					printf("  -Z, --snmp_scan_dmf_dir: Scan SNMP devices using DMF files in specified directory.\n");
+					if( nutscan_avail_xml_http) {
+						printf("      (libneon will be used to work with dynamically loaded DMF MIB library).\n");
+					} else {
+						printf("      (libneon support seems missing, so built-in definitions will\n"
+						       "       be used rather than DMF MIB library).\n");
+					}
+#else
+					printf("  -z, --snmp_scan_dmf: Not implemented in this build.\n");
+					printf("  -Z, --snmp_scan_dmf_dir: Not implemented in this build.\n");
+#endif /* WITH_DMFMIB */
 				}
 				if( nutscan_avail_xml_http ) {
 					printf("  -M, --xml_scan: Scan XML/HTTP devices.\n");
@@ -395,6 +478,9 @@ display_help:
 				printf("  -m, --mask_cidr <IP address/mask>: Give a range of IP using CIDR notation.\n");
 
 				if( nutscan_avail_snmp ) {
+					printf("\nSNMP specific options:\n");
+					printf("  -F, --fingerprints-file <filename>: provide an additional list of SNMP fingerprints\n");
+
 					printf("\nSNMP v1 specific options:\n");
 					printf("  -c, --community <community name>: Set SNMP v1 community name (default = public)\n");
 
@@ -416,7 +502,7 @@ display_help:
 					/* Specify the password to use when authenticationg with the remote host.  If not specified, a null password is assumed. Maximum password length is 16 for IPMI
 					 * 1.5 and 20 for IPMI 2.0. */
 					printf("  -d, --authType <authentication type>: Specify the IPMI 1.5 authentication type to use (NONE, STRAIGHT_PASSWORD_KEY, MD2, and MD5) with the remote host (default=MD5)\n");
-					printf("  -D, --cipher_suite_id <cipher suite id>: Specify the IPMI 2.0 cipher suite ID to use, for authentication, integrity, and confidentiality (default=3)\n");
+					printf("  -L, --cipher_suite_id <cipher suite id>: Specify the IPMI 2.0 cipher suite ID to use, for authentication, integrity, and confidentiality (default=3)\n");
 				}
 
 				printf("\nNUT specific options:\n");
@@ -428,9 +514,9 @@ display_help:
 				printf("  -V, --version: Display NUT version\n");
 				printf("  -a, --available: Display available bus that can be scanned\n");
 				printf("  -q, --quiet: Display only scan result. No information on currently scanned bus is displayed.\n");
+				printf("  -D, --nut_debug_level: Raise the debugging level.  Use this multiple times to see more details.\n");
 				return ret_code;
 		}
-
 	}
 
 	if( cidr ) {
@@ -469,7 +555,11 @@ display_help:
 			nutscan_avail_snmp = 0;
 		}
 		else {
-			printq(quiet,"Scanning SNMP bus.\n");
+#ifdef WITH_DMFMIB
+			printq(quiet,"Scanning SNMP bus with DMF MIB support if possible.\n");
+#else
+			printq(quiet,"Scanning SNMP bus with built-in MIBs only.\n");
+#endif
 #ifdef HAVE_PTHREAD
 			if( pthread_create(&thread[TYPE_SNMP],NULL,run_snmp,&snmp_sec)) {
 				nutscan_avail_snmp = 0;
@@ -588,5 +678,9 @@ display_help:
 
 	nutscan_free();
 
+#ifdef WITH_DMFMIB
+	uninit_snmp_device_table();
+#endif
+
 	return EXIT_SUCCESS;
 }
Index: nut-2.7.4/tools/nut-scanner/nutscan-init.c
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/nutscan-init.c
+++ nut-2.7.4/tools/nut-scanner/nutscan-init.c
@@ -24,7 +24,6 @@
 #include "common.h"
 #include <ltdl.h>
 #include <unistd.h>
-#include <dirent.h>
 #include <stdio.h>
 #include <string.h>
 
@@ -42,66 +41,49 @@ int nutscan_load_avahi_library(const cha
 int nutscan_load_ipmi_library(const char *libname_path);
 int nutscan_load_upsclient_library(const char *libname_path);
 
-/* FIXME: would be good to get more from /etc/ld.so.conf[.d] */
-char * search_paths[] = {
-	LIBDIR,
-	"/usr"LIBDIR,
-	"/usr/lib64",
-	"/lib64",
-	"/usr/lib",
-	"/lib",
-	"/usr/local/lib",
-	NULL
-};
-
-const char * get_libname(const char* base_libname)
-{
-	DIR *dp;
-	struct dirent *dirp;
-	int index = 0;
-	char *libname_path = NULL;
-	char current_test_path[LARGEBUF];
-
-	for(index = 0 ; (search_paths[index] != NULL) && (libname_path == NULL) ; index++)
-	{
-		memset(current_test_path, 0, LARGEBUF);
-
-		if ((dp = opendir(search_paths[index])) == NULL)
-			continue;
-
-		while ((dirp = readdir(dp)) != NULL)
-		{
-			if(!strncmp(dirp->d_name, base_libname, strlen(base_libname))) {
-				snprintf(current_test_path, LARGEBUF, "%s/%s", search_paths[index], dirp->d_name);
-				libname_path = realpath(current_test_path, NULL);
-				if (libname_path != NULL)
-					break;
-			}
-		}
-		closedir(dp);
-	}
-	/* fprintf(stderr,"Looking for lib %s, found %s\n", base_libname, (libname_path!=NULL)?libname_path:"NULL");*/
-	return libname_path;
-}
-
 void nutscan_init(void)
 {
+	char *libname = NULL;
 #ifdef WITH_USB
-	nutscan_avail_usb = nutscan_load_usb_library(get_libname("libusb-0.1.so"));
+	libname = get_libname("libusb-0.1.so");
+	if (libname) {
+		nutscan_avail_usb = nutscan_load_usb_library(libname);
+		free(libname);
+	}
 #endif
 #ifdef WITH_SNMP
-	nutscan_avail_snmp = nutscan_load_snmp_library(get_libname("libnetsnmp.so"));
+	libname = get_libname("libnetsnmp.so");
+	if (libname) {
+		nutscan_avail_snmp = nutscan_load_snmp_library(libname);
+		free(libname);
+	}
 #endif
 #ifdef WITH_NEON
-	nutscan_avail_xml_http = nutscan_load_neon_library(get_libname("libneon.so"));
+	libname = get_libname("libneon.so");
+	if (libname) {
+		nutscan_avail_xml_http = nutscan_load_neon_library(libname);
+		free(libname);
+	}
 #endif
 #ifdef WITH_AVAHI
-	nutscan_avail_avahi = nutscan_load_avahi_library(get_libname("libavahi-client.so"));
+	libname = get_libname("libavahi-client.so");
+	if (libname) {
+		nutscan_avail_avahi = nutscan_load_avahi_library(libname);
+		free(libname);
+	}
 #endif
 #ifdef WITH_FREEIPMI
-	nutscan_avail_ipmi = nutscan_load_ipmi_library(get_libname("libfreeipmi.so"));
+	libname = get_libname("libfreeipmi.so");
+	if (libname) {
+		nutscan_avail_ipmi = nutscan_load_ipmi_library(libname);
+		free(libname);
+	}
 #endif
-	nutscan_avail_nut = nutscan_load_upsclient_library(get_libname("libupsclient.so"));
+	libname = get_libname("libupsclient.so");
+	if (libname) {
+		nutscan_avail_nut = nutscan_load_upsclient_library(libname);
+		free(libname);
+	}
 }
 
 void nutscan_free(void)
Index: nut-2.7.4/tools/nut-scanner/nutscan-snmp.h
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/nutscan-snmp.h
+++ nut-2.7.4/tools/nut-scanner/nutscan-snmp.h
@@ -1,6 +1,7 @@
 /* nutscan-snmp
  *  Copyright (C) 2011 - Frederic Bohe <FredericBohe@Eaton.com>
  *  Copyright (C) 2016 - Arnaud Quette <ArnaudQuette@Eaton.com>
+ *  Copyright (C) 2016 - Jim Klimov <EvgenyKlimov@Eaton.com>
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -20,37 +21,53 @@
 #ifndef DEVSCAN_SNMP_H
 #define DEVSCAN_SNMP_H
 
+#include <stddef.h> //define NULL
+
 typedef struct {
         char *          oid;
         char *          mib;
         char *       sysoid;
 } snmp_device_id_t;
 
-/* SNMP IDs device table */
-static snmp_device_id_t snmp_device_table[] = {
-	{ "",  "apc_ats", ".1.3.6.1.4.1.318.1.3.11"},
-	{ ".1.3.6.1.4.1.534.10.2.1.2.0",  "eaton_ats", ".1.3.6.1.4.1.705.1"},
-	{ ".1.3.6.1.4.1.13742.1.1.12.0",  "raritan", ".1.3.6.1.4.1.13742"},
-	{ "",  "xppc", ".1.3.6.1.4.1.935"},
-	{ "1.3.6.1.4.1.534.1.1.2.0",  "pw", ".1.3.6.1.4.1.534.1"},
-	{ "1.3.6.1.4.1.534.1.1.2.0",  "pxgx_ups", ".1.3.6.1.4.1.534.2.12"},
-	{ "1.3.6.1.2.1.33.1.1.1.0",  "ietf", ".1.3.6.1.2.1.33"},
-	{ "",  "ietf", ".1.3.6.1.4.1.850.1"},
-	{ ".1.3.6.1.4.1.232.165.3.1.1.0",  "cpqpower", ".1.3.6.1.4.1.232.165.3"},
-	{ ".1.3.6.1.4.1.17373.3.1.1.0",  "aphel_genesisII", ".1.3.6.1.4.1.17373"},
-	{ ".1.3.6.1.4.1.534.6.6.6.1.1.12.0",  "aphel_revelation", ".1.3.6.1.4.1.534.6.6.6"},
-	{ ".1.3.6.1.4.1.534.6.6.7.1.2.1.2.0",  "eaton_epdu", ".1.3.6.1.4.1.534.6.6.7"},
-	{ ".1.3.6.1.4.1.20677.1",  "pulizzi_switched1", ".1.3.6.1.4.1.20677.1"},
-	{ ".1.3.6.1.4.1.20677.1",  "pulizzi_switched2", ".1.3.6.1.4.1.20677.2"},
-	{ ".1.3.6.1.4.1.3808.1.1.1.1.1.1.0",  "cyberpower", ".1.3.6.1.4.1.3808"},
-	{ ".1.3.6.1.4.1.705.1.1.1.0",  "mge", ".1.3.6.1.4.1.705.1"},
-	{ "",  "delta_ups", ".1.3.6.1.4.1.2254.2.4"},
-	{ "",  "huawei", ".1.3.6.1.4.1.8072.3.2.10"},
-	{ ".1.3.6.1.4.1.4555.1.1.1.1.1.1.0",  "netvision", ".1.3.6.1.4.1.4555.1.1.1"},
-	{ ".1.3.6.1.4.1.318.1.1.1.1.1.1.0",  "apcc", NULL},
-	{ ".1.3.6.1.4.1.4779.1.3.5.2.1.24.1",  "baytech", NULL},
-	{ ".1.3.6.1.4.1.2947.1.1.2.0",  "bestpower", NULL},
-        /* Terminating entry */
-        { NULL, NULL, NULL}
-};
+
 #endif /* DEVSCAN_SNMP_H */
+
+/* SNMP IDs device table, excerpt generated from our available MIBs */
+/* The consumer defines an instance of this table, either dynamic with DMF
+ * or a precompiled legacy binary based on ifdef WITH_DMFMIB compile-time
+ * support and real-time DMF availability (as fallback for no/bad/empty DMF),
+ * with explicit reference like below (builtin generated into nutscan-snmp.c).
+ * Note: This is commented away with ifdefs, so the consumers who only need
+ * the structure definition are not burdened with an external reference to
+ * structure instances they would not need.
+ */
+
+#if WANT_DEVSCAN_SNMP_BUILTIN == 1
+# ifndef DEVSCAN_SNMP_BUILTIN
+#  define DEVSCAN_SNMP_BUILTIN
+/* Can use a copy of the structure that was pre-compiled into the binary */
+    extern snmp_device_id_t *snmp_device_table_builtin;
+# endif /* DEVSCAN_SNMP_BUILTIN */
+#endif /* WANT_DEVSCAN_SNMP_BUILTIN */
+
+#if WANT_DEVSCAN_SNMP_DMF == 1
+# ifndef DEVSCAN_SNMP_DMF
+#  define DEVSCAN_SNMP_DMF
+/* Can use a copy of the structure that will be populated dynamically */
+    extern snmp_device_id_t *snmp_device_table_dmf;
+# endif /* DEVSCAN_SNMP_DMF */
+#endif /* WANT_DEVSCAN_SNMP_DMF */
+
+#if WANT_LIBNUTSCAN_SNMP_DMF == 1
+# ifndef LIBNUTSCAN_SNMP_DMF
+#  ifdef DMF_SNMP_H
+#   define LIBNUTSCAN_SNMP_DMF
+    // Note: This requires types defined in "dmf.h"
+    // Variable implemented in scan_snmp.c
+    extern char *dmfnutscan_snmp_dir;
+    extern mibdmf_parser_t *dmfnutscan_snmp_dmp;
+    // Just reference this to NULLify when client quits and frees DMF stuff
+    void uninit_snmp_device_table();
+#  endif /* DMF_SNMP_H already included */
+# endif /* LIBNUTSCAN_SNMP_DMF */
+#endif /* WANT_LIBNUTSCAN_SNMP_DMF */
Index: nut-2.7.4/tools/nut-scanner/scan_snmp.c
===================================================================
--- nut-2.7.4.orig/tools/nut-scanner/scan_snmp.c
+++ nut-2.7.4/tools/nut-scanner/scan_snmp.c
@@ -1,5 +1,5 @@
 /*
- *  Copyright (C) 2011 - EATON
+ *  Copyright (C) 2011-2016 by EATON
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -19,6 +19,7 @@
 /*! \file scan_snmp.c
     \brief detect NUT supported SNMP devices
     \author Frederic Bohe <fredericbohe@eaton.com>
+    \author Jim Klimov <EvgenyKlimov@Eaton.com>
 */
 
 #include "common.h"
@@ -58,7 +59,33 @@
 #ifdef HAVE_PTHREAD
 #include <pthread.h>
 #endif
+
+// Cause the header to also declare the external reference to pre-generated
+// compilable structure with the subset of MIB mappings needed by nut-scanner
+#ifndef WANT_DEVSCAN_SNMP_BUILTIN
+#define WANT_DEVSCAN_SNMP_BUILTIN 1
+#endif
+
+// Caller defined this macro to not 1, or undefined it somehow.
+// Maybe a developer might want to disable it as an experiment.
+// Or some patchwork or script made a mistake... Tell them!
+#if WANT_DEVSCAN_SNMP_BUILTIN != 1
+# if defined(__clang__) || defined(__GNUC__) || defined(__GNUG__) || defined(_MSC_VER)
+#  if defined(__GNUC__) || defined(__GNUG__)
+#   pragma GCC diagnostic push
+#   pragma GCC diagnostic warning "-Wcpp"
+#   pragma GCC diagnostic ignored "-Werror"
+#   pragma GCC diagnostic ignored "-Wall"
+#  endif
+#pragma message("WARNING: scan_snmp.c is being built without (WANT_DEVSCAN_SNMP_BUILTIN==1) - you have no fallback if DMF is missing at run-time!")
+#  if defined(__GNUC__) || defined(__GNUG__)
+#   pragma GCC diagnostic pop
+#  endif
+# endif
+#endif
+
 #include "nutscan-snmp.h"
+#include "dmf.h"
 
 /* Address API change */
 #ifndef usmAESPrivProtocol
@@ -75,6 +102,17 @@ static pthread_mutex_t dev_mutex;
 #endif
 long g_usec_timeout ;
 
+// Pointer to the array we ultimately use (builtin or dynamic)
+snmp_device_id_t *snmp_device_table = NULL;
+
+// This would point to DMF data loaded to by this library, if loaded
+snmp_device_id_t *snmp_device_table_dmf = NULL;
+mibdmf_parser_t *dmfnutscan_snmp_dmp = NULL;
+
+// Caller of this library like nut-scanner.c should declare extern reference
+// to this variable and set it to non-NULL string in order to try loading DMFs
+char *dmfnutscan_snmp_dir = NULL;
+
 /* dynamic link library stuff */
 static lt_dlhandle dl_handle = NULL;
 static const char *dl_error = NULL;
@@ -103,6 +141,64 @@ static oid * (*nut_usmHMACMD5AuthProtoco
 static oid * (*nut_usmHMACSHA1AuthProtocol);
 static oid * (*nut_usmDESPrivProtocol);
 
+void uninit_snmp_device_table() {
+	if (snmp_device_table == snmp_device_table_dmf)
+		snmp_device_table = NULL;
+	if (dmfnutscan_snmp_dmp!=NULL)
+		mibdmf_parser_destroy(&dmfnutscan_snmp_dmp);
+	snmp_device_table_dmf = NULL;
+	dmfnutscan_snmp_dmp = NULL;
+}
+
+/* return 0 on error */
+int init_snmp_device_table()
+{
+	// A simple routine to load nutscan DMFs, safe to call several times
+	if (snmp_device_table != NULL)
+		return 1;
+
+	if (dmfnutscan_snmp_dir != NULL) {
+		// parse_dir, check success, assign var
+		upsdebugx(1, "init_snmp_device_table() trying to load DMF from %s",
+			dmfnutscan_snmp_dir);
+		dmfnutscan_snmp_dmp = mibdmf_parser_new();
+		if (dmfnutscan_snmp_dmp == NULL) {
+			upsdebugx(1, "PROBLEM: Can not allocate the DMF parsing structures");
+		} else {
+			mibdmf_parse_dir(dmfnutscan_snmp_dir, dmfnutscan_snmp_dmp);
+			snmp_device_table_dmf = mibdmf_get_device_table(dmfnutscan_snmp_dmp);
+			int device_table_counter = mibdmf_get_device_table_counter(dmfnutscan_snmp_dmp);
+			if (snmp_device_table_dmf != NULL && 
+			    device_table_counter>1 )
+			{
+				snmp_device_table = snmp_device_table_dmf;
+				upsdebugx(1, "SUCCESS: Can use the SNMP device mapping parsed from DMF library with %d definitions", device_table_counter-1);
+				// Note: caller should free these structures in the end, just like below
+			} else {
+				upsdebugx(1, "PROBLEM: Can not access the SNMP device mapping parsed from DMF library, or loaded an empty table");
+				uninit_snmp_device_table();
+			}
+		}
+	}
+
+#ifdef DEVSCAN_SNMP_BUILTIN
+	if (snmp_device_table == NULL && snmp_device_table_builtin!=NULL) {
+		upsdebugx(1, "SUCCESS: Can use the built-in SNMP device mapping table");
+		snmp_device_table = (snmp_device_id_t *)(&snmp_device_table_builtin);
+	}
+#else
+	upsdebugx(1, "NOTE: The built-in SNMP device mapping table is not built in in this build!");
+#endif
+
+	if (snmp_device_table == NULL) {
+		upsdebugx(1, "FATAL: No SNMP device mapping table found. SNMP search disabled");
+		return 0;
+	}
+
+	upsdebugx(1, "init_snmp_device_table() got a valid SNMP device mapping table");
+	return 1;
+}
+
 /* return 0 on error */
 int nutscan_load_snmp_library(const char *libname_path)
 {
@@ -116,12 +212,12 @@ int nutscan_load_snmp_library(const char
 	}
 
 	if (libname_path == NULL) {
-		fprintf(stderr, "SNMP library not found. SNMP search disabled.\n");
+		upsdebugx(1, "SNMP library not found. SNMP search disabled");
 		return 0;
 	}
 
 	if( lt_dlinit() != 0 ) {
-		fprintf(stderr, "Error initializing lt_init\n");
+		upsdebugx(1, "Error initializing lt_init");
 		return 0;
 	}
 
@@ -258,7 +354,12 @@ static void scan_snmp_add_device(nutscan
 	/* SNMP device found */
 	dev = nutscan_new_device();
 	dev->type = TYPE_SNMP;
-	dev->driver = strdup("snmp-ups");
+	if (dmfnutscan_snmp_dmp!=NULL) {
+		/* DMF is loaded thus used, successfully */
+		dev->driver = strdup("snmp-ups-dmf");
+	} else {
+		dev->driver = strdup("snmp-ups");
+	}
 	dev->port = strdup(session->peername);
 	buf = malloc( response->variables->val_len + 1 );
 	if( buf ) {
@@ -432,31 +533,31 @@ static int init_session(struct snmp_sess
 		}
 
 		/* Process mandatory fields, based on the security level */
-                switch (snmp_sess->securityLevel) {
-                        case SNMP_SEC_LEVEL_AUTHNOPRIV:
-                                if (sec->authPassword == NULL) {
-                                        fprintf(stderr,
+		switch (snmp_sess->securityLevel) {
+			case SNMP_SEC_LEVEL_AUTHNOPRIV:
+				if (sec->authPassword == NULL) {
+					fprintf(stderr,
 			"authPassword is required for SNMPv3 in %s mode\n",
 						sec->secLevel);
 					return 0;
 				}
 				break;
-                        case SNMP_SEC_LEVEL_AUTHPRIV:
-                                if ((sec->authPassword == NULL) ||
+			case SNMP_SEC_LEVEL_AUTHPRIV:
+				if ((sec->authPassword == NULL) ||
 					(sec->privPassword == NULL)) {
-                                        fprintf(stderr,
+					fprintf(stderr,
 	"authPassword and privPassword are required for SNMPv3 in %s mode\n",
 						sec->secLevel);
 					return 0;
 				}
 				break;
-                        default:
-                                /* nothing else needed */
-                                break;
-                }
+			default:
+				/* nothing else needed */
+				break;
+		}
 
-                /* Process authentication protocol and key */
-               	snmp_sess->securityAuthKeyLen = USM_AUTH_KU_LEN;
+		/* Process authentication protocol and key */
+		snmp_sess->securityAuthKeyLen = USM_AUTH_KU_LEN;
 
 		/* default to MD5 */
 		snmp_sess->securityAuthProto = (*nut_usmHMACMD5AuthProtocol);
@@ -549,8 +650,8 @@ static void * try_SysOID(void * arg)
 	struct snmp_session snmp_sess;
 	void * handle;
 	struct snmp_pdu *pdu, *response = NULL, *resp = NULL;
-        oid name[MAX_OID_LEN];
-        size_t name_len = MAX_OID_LEN;
+	oid name[MAX_OID_LEN];
+	size_t name_len = MAX_OID_LEN;
 	nutscan_snmp_t * sec = (nutscan_snmp_t *)arg;
 	int index = 0;
 	int sysoid_found = 0;
@@ -667,13 +768,17 @@ nutscan_device_t * nutscan_scan_snmp(con
 	pthread_mutex_init(&dev_mutex,NULL);
 #endif
 
-        if( !nutscan_avail_snmp ) {
-                return NULL;
-        }
-
+	if( !nutscan_avail_snmp ) {
+		return NULL;
+	}
 
 	g_usec_timeout = usec_timeout;
 
+	if (init_snmp_device_table() == 0)
+		return NULL;
+	if (snmp_device_table == NULL)
+		return NULL;
+
 	/* Initialize the SNMP library */
 	(*nut_init_snmp)("nut-scanner");
 
Index: nut-2.7.4/tools/nut-snmpinfo.py
===================================================================
--- nut-2.7.4.orig/tools/nut-snmpinfo.py
+++ nut-2.7.4/tools/nut-snmpinfo.py
@@ -1,6 +1,7 @@
 #!/usr/bin/env python
 #   Copyright (C) 2011 - Frederic Bohe <FredericBohe@Eaton.com>
 #   Copyright (C) 2016 - Arnaud Quette <ArnaudQuette@Eaton.com>
+#   Copyright (C) 2016 - Jim Klimov <EvgenyKlimov@Eaton.com>
 #
 #   This program is free software; you can redistribute it and/or modify
 #   it under the terms of the GNU General Public License as published by
@@ -22,7 +23,7 @@ import glob
 import re
 import sys
 
-output_file_name="./nut-scanner/nutscan-snmp.h"
+output_file_name="./nut-scanner/nutscan-snmp.c"
 output_file = open(output_file_name,'w')
 
 #expand #define constant
@@ -49,9 +50,10 @@ def expand_define(filename,constant):
 	return ret_line
 
 
-output_file.write( "/* nutscan-snmp\n" )
+output_file.write( "/* nutscan-snmp.c - fully generated during build of NUT\n" )
 output_file.write( " *  Copyright (C) 2011 - Frederic Bohe <FredericBohe@Eaton.com>\n" )
 output_file.write( " *  Copyright (C) 2016 - Arnaud Quette <ArnaudQuette@Eaton.com>\n" )
+output_file.write( " *  Copyright (C) 2016 - Jim Klimov <EvgenyKlimov@Eaton.com>\n" )
 output_file.write( " *\n" )
 output_file.write( " *  This program is free software; you can redistribute it and/or modify\n" )
 output_file.write( " *  it under the terms of the GNU General Public License as published by\n" )
@@ -68,17 +70,24 @@ output_file.write( " *  along with this
 output_file.write( " *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA\n" )
 output_file.write( " */\n" )
 output_file.write( "\n" )
-output_file.write( "#ifndef DEVSCAN_SNMP_H\n" )
-output_file.write( "#define DEVSCAN_SNMP_H\n" )
+output_file.write( "#include \"nutscan-snmp.h\"\n" )
 output_file.write( "\n" )
-output_file.write( "typedef struct {\n" )
-output_file.write( "        char *          oid;\n" )
-output_file.write( "        char *          mib;\n" )
-output_file.write( "        char *       sysoid;\n" )
-output_file.write( "} snmp_device_id_t;\n" )
+output_file.write( "#ifndef NULL\n" )
+output_file.write( "#define NULL (void*)0ULL\n" )
+output_file.write( "#endif\n" )
 output_file.write( "\n" )
-output_file.write( "/* SNMP IDs device table */\n" )
-output_file.write( "static snmp_device_id_t snmp_device_table[] = {\n" )
+output_file.write( "// marker to tell humans and GCC that the unused parameter is there for some\n" )
+output_file.write( "// reason (i.e. API compatibility) and compiler should not warn if not used\n" )
+output_file.write( "#ifndef UNUSED_PARAM\n" )
+output_file.write( "# ifdef __GNUC__\n" )
+output_file.write( "#  define UNUSED_PARAM __attribute__ ((__unused__))\n" )
+output_file.write( "# else\n" )
+output_file.write( "#  define UNUSED_PARAM\n" )
+output_file.write( "# endif\n" )
+output_file.write( "#endif\n" )
+output_file.write( "\n" )
+output_file.write( "/* SNMP IDs device table, not used in this file itself - silence the warning if we can */\n" )
+output_file.write( "snmp_device_id_t snmp_device_table_builtin[] UNUSED_PARAM = {\n" )
 
 for filename in glob.glob('../drivers/*-mib.c'):
 	list_of_line = open(filename,'r').read().split(';')
@@ -143,4 +152,4 @@ for filename in glob.glob('../drivers/*-
 output_file.write( "        /* Terminating entry */\n" )
 output_file.write( "        { NULL, NULL, NULL}\n" )
 output_file.write( "};\n" )
-output_file.write( "#endif /* DEVSCAN_SNMP_H */\n" )
+output_file.write( "\n" )
