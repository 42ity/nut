From 3f16e10c48f07abd757eb7f55f273433cdef6eb5 Mon Sep 17 00:00:00 2001
From: Arnaud Quette <arnaud.quette@free.fr>
Date: Thu, 10 Mar 2016 11:41:51 +0100
Subject: [PATCH] snmp-ups: Eaton 3ph UPS improvements

Fix the battery test status reporting, and start to simplify the mapping
layout by getting rid of some #define. Also add the following:
- battery test result "Unknown"
- last battery replacement date (battery.date)
- output.voltage thresholds (high and low) and nominal value
---
 drivers/powerware-mib.c | 41 +++++++++++++++++++++++------------------
 1 file changed, 23 insertions(+), 18 deletions(-)

diff --git a/drivers/powerware-mib.c b/drivers/powerware-mib.c
index 1c2f9f2..0fa4025 100644
--- a/drivers/powerware-mib.c
+++ b/drivers/powerware-mib.c
@@ -25,7 +25,7 @@
 
 #include "powerware-mib.h"
 
-#define PW_MIB_VERSION "0.87"
+#define PW_MIB_VERSION "0.88"
 
 /* TODO: more sysOID and MIBs support:
  * 
@@ -71,7 +71,6 @@
 #define PW_OID_BY_VOLTAGE	"1.3.6.1.4.1.534.1.5.3.1.2"	/* XUPS-MIB::xupsBypassVoltage */
 
 #define PW_OID_BATTEST_START	"1.3.6.1.4.1.534.1.8.1"		/* XUPS-MIB::xupsTestBattery   set to startTest(1) to initiate test*/
-#define PW_OID_BATTEST_RES	"1.3.6.1.4.1.534.1.8.2"		/* XUPS-MIB::xupsTestBatteryStatus */
 
 #define PW_OID_CONT_OFFDELAY	"1.3.6.1.4.1.534.1.9.1"		/* XUPS-MIB::xupsControlOutputOffDelay */
 #define PW_OID_CONT_ONDELAY	"1.3.6.1.4.1.534.1.9.2"		/* XUPS-MIB::xupsControlOutputOnDelay */
@@ -179,7 +178,7 @@ static info_lkp_t eaton_abm_status_info[] = {
 };
 
 static info_lkp_t pw_batt_test_info[] = {
-	{ 1, "" },			/* unknown */
+	{ 1, "Unknown" },
 	{ 2, "Done and passed" },
 	{ 3, "Done and error" },
 	{ 4, "In progress" },
@@ -236,12 +235,12 @@ static snmp_info_t pw_mib[] = {
 	{ "ups.temperature.low", ST_FLAG_RW, 1.0, "1.3.6.1.4.1.534.1.6.2.0", "", 0, NULL },
 	/* XUPS-MIB::xupsEnvAmbientUpperLimit.0 */
 	{ "ups.temperature.high", ST_FLAG_RW, 1.0, "1.3.6.1.4.1.534.1.6.3.0", "", 0, NULL },
-	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, PW_OID_BATTEST_RES, "",
-		0, &pw_batt_test_info[0] },
-	{ "ups.start.auto", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, IETF_OID_AUTO_RESTART, "",
-		SU_FLAG_OK, &ietf_yes_no_info[0] },
-	{ "battery.charger.status", ST_FLAG_STRING, SU_INFOSIZE, PW_OID_BATT_STATUS, "",
-		SU_STATUS_BATT, &eaton_abm_status_info[0] },
+	/* XUPS-MIB::xupsTestBatteryStatus */
+	{ "ups.test.result", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.4.1.534.1.8.2.0", "", 0, &pw_batt_test_info[0] },
+	/* UPS-MIB::upsAutoRestart */
+	{ "ups.start.auto", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.2.1.33.1.8.5.0", "", SU_FLAG_OK, &ietf_yes_no_info[0] },
+	/* XUPS-MIB::xupsBatteryAbmStatus.0 */
+	{ "battery.charger.status", ST_FLAG_STRING, SU_INFOSIZE, "1.3.6.1.4.1.534.1.2.5.0", "", SU_STATUS_BATT, &eaton_abm_status_info[0] },
 
 	/* Battery page */
 	{ "battery.charge", 0, 1.0, PW_OID_BATT_CHARGE, "",
@@ -254,14 +253,23 @@ static snmp_info_t pw_mib[] = {
 		0, NULL },
 	{ "battery.runtime.low", 0, 60.0, IETF_OID_CONF_RUNTIME_LOW, "",
 		0, NULL },
+	{ "battery.date", ST_FLAG_RW | ST_FLAG_STRING, SU_INFOSIZE, ".1.3.6.1.4.1.534.1.2.6.0", NULL, SU_FLAG_OK, NULL },
 
 	/* Output page */
 	{ "output.phases", 0, 1.0, PW_OID_OUT_LINES, "",
 		SU_FLAG_SETINT, NULL, &output_phases },
-	{ "output.frequency", 0, 0.1, PW_OID_OUT_FREQUENCY, "",
-		0, NULL },
-	{ "output.voltage", 0, 1.0, PW_OID_OUT_VOLTAGE ".1", "",
-		SU_OUTPUT_1, NULL },
+	/* XUPS-MIB::xupsOutputFrequency.0 */
+	{ "output.frequency", 0, 0.1, "1.3.6.1.4.1.534.1.4.2.0", "", 0, NULL },
+	/* XUPS-MIB::xupsConfigOutputFreq.0 */
+	{ "output.frequency.nominal", 0, 0.1, "1.3.6.1.4.1.534.1.10.4.0", "", 0, NULL },
+	/* XUPS-MIB::xupsOutputVoltage.1 */
+	{ "output.voltage", 0, 1.0, ".1.3.6.1.4.1.534.1.4.4.1.2.1", "", SU_OUTPUT_1, NULL },
+	/* XUPS-MIB::xupsConfigOutputVoltage.0 */
+	{ "output.voltage.nominal", 0, 1.0, "1.3.6.1.4.1.534.1.10.1.0", "", 0, NULL },
+	/* XUPS-MIB::xupsConfigLowOutputVoltageLimit.0 */
+	{ "output.voltage.low", 0, 1.0, ".1.3.6.1.4.1.534.1.10.6.0", "", 0, NULL },
+	/* XUPS-MIB::xupsConfigHighOutputVoltageLimit.0 */
+	{ "output.voltage.high", 0, 1.0, ".1.3.6.1.4.1.534.1.10.7.0", "", 0, NULL },
 	{ "output.current", 0, 1.0, PW_OID_OUT_CURRENT ".1", "",
 		SU_OUTPUT_1, NULL },
 	{ "output.realpower", 0, 1.0, PW_OID_OUT_POWER ".1", "",
@@ -293,8 +301,6 @@ static snmp_info_t pw_mib[] = {
 		SU_OUTPUT_3, NULL },
 	{ "output.voltage.nominal", 0, 1.0, PW_OID_CONF_OVOLTAGE, "",
 		0, NULL },
-	{ "output.frequency.nominal", 0, 0.1, PW_OID_CONF_FREQ, "",
-		0, NULL },
 
 	/* Input page */
 	{ "input.phases", 0, 1.0, PW_OID_IN_LINES, "",
@@ -303,6 +309,8 @@ static snmp_info_t pw_mib[] = {
 		0, NULL },
 	{ "input.voltage", 0, 1.0, PW_OID_IN_VOLTAGE ".0", "",
 		SU_INPUT_1, NULL },
+	/* XUPS-MIB::xupsConfigInputVoltage.0 */
+	{ "input.voltage.nominal", 0, 1.0, "1.3.6.1.4.1.534.1.10.2.0", "", 0, NULL },
 	{ "input.current", 0, 0.1, PW_OID_IN_CURRENT ".0", "",
 		SU_INPUT_1, NULL },
 	{ "input.L1-N.voltage", 0, 1.0, PW_OID_IN_VOLTAGE ".1", "",
@@ -325,8 +333,6 @@ static snmp_info_t pw_mib[] = {
 		SU_INPUT_3, NULL },
 	{ "input.quality", 0, 1.0, PW_OID_IN_LINE_BADS, "",
 		0, NULL },
-	{ "input.voltage.nominal", 0, 1.0, PW_OID_CONF_IVOLTAGE, "",
-		0, NULL },
 
 	/* this segfaults? do we assume the same number of bypass phases as input phases?
 	{ "input.bypass.phases", 0, 1.0, PW_OID_BY_LINES, "",
@@ -347,7 +353,6 @@ static snmp_info_t pw_mib[] = {
 	{ "ambient.temperature.low", ST_FLAG_RW, 1.0, "1.3.6.1.4.1.534.1.6.9.0", "", 0, NULL },
 	/* XUPS-MIB::xupsEnvRemoteTempUpperLimit.0 */
 	{ "ambient.temperature.high", ST_FLAG_RW, 1.0, "1.3.6.1.4.1.534.1.6.10.0", "", 0, NULL },
-	
 	/* XUPS-MIB::xupsEnvRemoteHumidity.0 */
 	{ "ambient.humidity", 0, 1.0, "1.3.6.1.4.1.534.1.6.6.0", "", 0, NULL },
 	/* XUPS-MIB::xupsEnvRemoteHumidityLowerLimit.0 */
-- 
2.1.4

