From 45ace8b3478515a1b7a2fb5a10a4cd77706b905e Mon Sep 17 00:00:00 2001
From: Michal Vyskocil <michalvyskocil@eaton.com>
Date: Mon, 22 Jun 2015 13:46:56 +0200
Subject: [PATCH] Problem: can't scan one IP address for XML proto

Solution: add ETN_nutscan_xml_http, which can do so + modify nut-scanner
to support.

nut-scanner -M -s ip-address

Note: this is quick and dirty modification of nutscan_scan_xml_http,
which is NOT intended to be upstreamed! Two major blockers
 * ETN_nutscan_xml_http is non standard and hacky function
 * nut-scanner lost an ability to perform the scan

---
 tools/nut-scanner/nut-scan.h      |   6 ++
 tools/nut-scanner/nut-scanner.c   |  13 +++-
 tools/nut-scanner/scan_xml_http.c | 132 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 148 insertions(+), 3 deletions(-)

NOTE: UPDATED the patch cosmetically 2016-08-25 by Jim Klimov
(to help in merging the spread-out code branches)

diff --git a/tools/nut-scanner/nut-scan.h b/tools/nut-scanner/nut-scan.h
index ce19726..0ded7aa 100644
--- a/tools/nut-scanner/nut-scan.h
+++ b/tools/nut-scanner/nut-scan.h
@@ -2,6 +2,7 @@
  *  Copyright (C)
  *    2011 - EATON
  *    2012 - Arnaud Quette <arnaud.quette@free.fr>
+ *    2016 - EATON - IP addressed XML scan
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -22,6 +23,7 @@
     \brief general header for nut-scanner
     \author Frederic Bohe <fredericbohe@eaton.com>
     \author Arnaud Quette <arnaud.quette@free.fr>
+    \author Michal Vyskocil <MichalVyskocil@eaton.com>
 */
 
 #ifndef NUT_SCAN_H
@@ -83,12 +83,18 @@ typedef struct nutscan_ipmi {
 #define IPMI_1_5		1
 #define IPMI_2_0		0
 
+/* XML HTTP structure */
+typedef struct nutscan_xml {
+	int port;		/* Port for xml http */
+} nutscan_xml_t;
+
 /* Scanning */
 nutscan_device_t * nutscan_scan_snmp(const char * start_ip, const char * stop_ip, long usec_timeout, nutscan_snmp_t * sec);
 
 nutscan_device_t * nutscan_scan_usb();
 
 nutscan_device_t * nutscan_scan_xml_http(long usec_timeout);
+nutscan_device_t * ETN_nutscan_scan_xml_http(const char * start_ip, long usec_timeout, nutscan_xml_t * sec);
 
 nutscan_device_t * nutscan_scan_nut(const char * startIP, const char * stopIP, const char * port, long usec_timeout);
 
diff --git a/tools/nut-scanner/nut-scanner.c b/tools/nut-scanner/nut-scanner.c
index 3cc1d20..18df658 100644
--- a/tools/nut-scanner/nut-scanner.c
+++ b/tools/nut-scanner/nut-scanner.c
@@ -1,5 +1,6 @@
 /*
  *  Copyright (C) 2011 - 2012  Arnaud Quette <arnaud.quette@free.fr>
+ *  Copyright (C) 2016 Michal Vyskocil <MichalVyskocil@eaton.com>
  *  Copyright (C) 2016 Jim Klimov <EvgenyKlimov@eaton.com>
  *
  *  This program is free software; you can redistribute it and/or modify
@@ -20,6 +21,7 @@
 /*! \file nut-scanner.c
     \brief A tool to detect NUT supported devices
     \author Arnaud Quette <arnaud.quette@free.fr>
+    \author Michal Vyskocil <MichalVyskocil@eaton.com>
     \author Jim Klimov <EvgenyKlimov@eaton.com>
 */
 
@@ -102,7 +102,14 @@ static void * run_snmp(void * arg)
 }
 static void * run_xml(void * arg)
 {
+/* Note: This routine is from EATON customized patch; the upstream code was:
 	dev[TYPE_XML] = nutscan_scan_xml_http(timeout);
+	return NULL;
+*/
+
+	nutscan_xml_t * sec = (nutscan_xml_t *)arg;
+
+	dev[TYPE_XML] = ETN_nutscan_scan_xml_http(start_ip, timeout, sec);
 	return NULL;
 }
 
@@ -152,6 +154,7 @@ int main(int argc, char *argv[])
 {
 	nutscan_snmp_t snmp_sec;
 	nutscan_ipmi_t ipmi_sec;
+	nutscan_xml_t  xml_sec;
 	int opt_ret;
 	char *	cidr = NULL;
 	int allow_all = 0;
@@ -168,12 +171,16 @@ int main(int argc, char *argv[])
 
 	memset(&snmp_sec, 0, sizeof(snmp_sec));
 	memset(&ipmi_sec, 0, sizeof(ipmi_sec));
+	memset(&xml_sec, 0, sizeof(xml_sec));
 	/* Set the default values for IPMI */
 	ipmi_sec.authentication_type = IPMI_AUTHENTICATION_TYPE_MD5;
 	ipmi_sec.ipmi_version = IPMI_1_5; /* default to IPMI 1.5, if not otherwise specified */
 	ipmi_sec.cipher_suite_id = 3; /* default to HMAC-SHA1; HMAC-SHA1-96; AES-CBC-128 */
 	ipmi_sec.privilege_level = IPMI_PRIVILEGE_LEVEL_ADMIN; /* should be sufficient */
 
+	/* Set the default values for XML HTTP */
+	xml_sec.port = 4679;
+
 	nutscan_init();
 
 	display_func = nutscan_display_ups_conf;
@@ -476,11 +483,17 @@ display_help:
 	if( allow_xml && nutscan_avail_xml_http) {
 		printq(quiet,"Scanning XML/HTTP bus.\n");
 #ifdef HAVE_PTHREAD
+/* Note: This routine is from EATON customized patch; the upstream code was:
 		if(pthread_create(&thread[TYPE_XML],NULL,run_xml,NULL)) {
+*/
+		if(pthread_create(&thread[TYPE_XML],NULL,run_xml,&xml_sec)) {
 			nutscan_avail_xml_http = 0;
 		}
 #else
+/* Note: This routine is from EATON customized patch; the upstream code was:
 		dev[TYPE_XML] = nutscan_scan_xml_http(timeout);
+*/
+		dev[TYPE_XML] = ETN_nutscan_scan_xml_http(start_ip, timeout, &xml_sec);
 #endif /* HAVE_PTHREAD */
 	}
 
diff --git a/tools/nut-scanner/scan_xml_http.c b/tools/nut-scanner/scan_xml_http.c
index 0ca07e1..4bcd593 100644
--- a/tools/nut-scanner/scan_xml_http.c
+++ b/tools/nut-scanner/scan_xml_http.c
@@ -1,5 +1,6 @@
 /*
  *  Copyright (C) 2011 - EATON
+ *  Copyright (C) 2016 - EATON - IP addressed XML scan
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of the GNU General Public License as published by
@@ -19,6 +20,7 @@
 /*! \file scan_xml_http.c
     \brief detect NUT supported XML HTTP devices
     \author Frederic Bohe <fredericbohe@eaton.com>
+    \author Michal Vyskocil <MichalVyskocil@eaton.com>
 */
 
 #include "common.h"
@@ -237,9 +237,141 @@ nutscan_device_t * nutscan_scan_xml_http(long usec_timeout)
 
 	return nutscan_rewind_device(current_nut_dev);
 }
+nutscan_device_t * ETN_nutscan_scan_xml_http(const char * start_ip, long usec_timeout, nutscan_xml_t * sec)
+{
+	char *scanMsg = "<SCAN_REQUEST/>";
+	int port = 4679;
+	int peerSocket;
+	struct sockaddr_in sockAddress;
+	socklen_t sockAddressLength = sizeof(sockAddress);
+	memset(&sockAddress, 0, sizeof(sockAddress));
+	fd_set fds;
+	struct timeval timeout;
+	int ret;
+	char buf[SMALLBUF];
+	char string[SMALLBUF];
+	ssize_t recv_size;
+	int i;
+
+	nutscan_device_t * nut_dev = NULL;
+	nutscan_device_t * current_nut_dev = NULL;
+
+	if( !nutscan_avail_xml_http ) {
+		return NULL;
+	}
+
+	if((peerSocket = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
+		fprintf(stderr,"Error creating socket\n");
+		return NULL;
+	}
+
+#define MAX 3
+	for (i = 0; i != MAX || current_nut_dev == NULL; i++) {
+		/* Initialize socket */
+		sockAddress.sin_family = AF_INET;
+		//sockAddress.sin_addr.s_addr = INADDR_BROADCAST;
+		inet_pton(AF_INET, start_ip, &(sockAddress.sin_addr));
+		sockAddress.sin_port = htons(port);
+		//setsockopt(peerSocket, SOL_SOCKET, SO_BROADCAST, &sockopt_on,
+		//		sizeof(sockopt_on));
+
+		/* Send scan request */
+		if(sendto(peerSocket, scanMsg, strlen(scanMsg), 0,
+					(struct sockaddr *)&sockAddress,
+					sockAddressLength) <= 0)
+		{
+			fprintf(stderr,"Error sending Eaton <SCAN_REQUEST/>, #%d/%d\n", i, MAX);
+			usleep(usec_timeout);
+			continue;
+		}
+		else
+		{
+			FD_ZERO(&fds);
+			FD_SET(peerSocket,&fds);
+
+			timeout.tv_sec = usec_timeout / 1000000;
+			timeout.tv_usec = usec_timeout % 1000000;
+
+			while ((ret=select(peerSocket+1,&fds,NULL,NULL,
+						&timeout) )) {
+
+				timeout.tv_sec = usec_timeout / 1000000;
+				timeout.tv_usec = usec_timeout % 1000000;
+
+				if( ret == -1 ) {
+					fprintf(stderr,
+						"Error waiting on \
+						socket: %d\n",errno);
+					break;
+				}
+
+				sockAddressLength = sizeof(struct sockaddr_in);
+				recv_size = recvfrom(peerSocket,buf,
+						sizeof(buf),0,
+						(struct sockaddr *)&sockAddress,
+						&sockAddressLength);
+
+				if(recv_size==-1) {
+					fprintf(stderr,
+						"Error reading \
+						socket: %d, #%d/%d\n",errno, i, MAX);
+					usleep(usec_timeout);
+					continue;
+				}
+
+				if( getnameinfo(
+						(struct sockaddr *)&sockAddress,
+									sizeof(struct sockaddr_in),string,
+									sizeof(string),NULL,0,
+						NI_NUMERICHOST) != 0) {
+
+					fprintf(stderr,
+						"Error converting IP address \
+						: %d, #%d/%d\n",errno);
+					usleep(usec_timeout);
+					continue;
+				}
+
+				nut_dev = nutscan_new_device();
+				if(nut_dev == NULL) {
+					fprintf(stderr,"Memory allocation \
+						error\n");
+					return NULL;
+				}
+
+				nut_dev->type = TYPE_XML;
+				/* Try to read device type */
+				ne_xml_parser *parser = (*nut_ne_xml_create)();
+				(*nut_ne_xml_push_handler)(parser, startelm_cb,
+							NULL, NULL, nut_dev);
+				(*nut_ne_xml_parse)(parser, buf, recv_size);
+				(*nut_ne_xml_destroy)(parser);
+
+				nut_dev->driver = strdup("netxml-ups");
+				sprintf(buf,"http://%s",string);
+				nut_dev->port = strdup(buf);
+
+				current_nut_dev = nutscan_add_device_to_device(
+						current_nut_dev,nut_dev);
+
+				//XXX: quick and dirty change - now we scanned exactly ONE IP address,
+				//     which is exactly the amount we wanted
+				goto end;
+			}
+		}
+	}
+
+end:
+	close(peerSocket);
+	return nutscan_rewind_device(current_nut_dev);
+}
 #else /* WITH_NEON */
 nutscan_device_t * nutscan_scan_xml_http(long usec_timeout)
 {
 	return NULL;
 }
+nutscan_device_t * ETN_nutscan_scan_xml_http(const char * start_ip, long usec_timeout, nutscan_xml_t * sec)
+{
+	return NULL;
+}
 #endif /* WITH_NEON */
-- 
2.1.4

