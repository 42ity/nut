= DMF - Device Mapping File

== Abstract

The aim is to develop a solution allowing to modify or even add new NUT
SNMP (only, right now) MIBs mappings without having to recompile the binary
driver (`snmp-ups`) or the whole NUT source. Support for DMF requires linking
with the `libneon` XML parser, already used in `netxml-ups` NUT driver.

The present solution is a first iteration to read this information from an
external file (XML formatted). The `*-mib.c` files present in the vanilla
NUT sources at this time have been processed to produce `*.dmf` data files
ready for dynamic loading at end-user installations. Conversion tools are
also distributed in this iteration, see their chapter below. They do bring
some Python dependency requirements, but are not strict requirements for
NUT (as common-case nor `distcheck` builds) -- the tools are only intended
for manual usage by a few developers.

The source files and recipes related to DMF support are dispersed across the
NUT codebase, while helpful resources (including the generation of DMF files)
are distributed in `$NUTSRC/scripts/DMF/` subdirectory.

As something between conversion tools and a sample program, the `dmf-reindex`
code is provided to read the library of complete DMFs (and validate their
contents along the way), and produce a DMF file that only contains truncated
`mib2nut` entries as needed for the `nut-scanner`. This `dmf-reindex` program
is expected to become an end-user tool, to help during updates of the DMF set.
NOTE: In the current iteration the `dmf-reindex` program is not configurable,
so it just scans all `*.dmf*` files in the current directory and prints XML
DMF markup to `stdout` so you can redirect it to another file. To avoid later
duplicate entries, consider naming that file with a different extension (may
be uppercased `*.DMF` for example) or save it into a different directory.

NOTE: If you provide your own DMF files that are not generated from existing
`*-mib.c` sources, use some filename pattern that does not end in `-mib.dmf`!

Overview of DMF usage from C code is maintained in the `dmf.h` file, driver
and application developers should look there for the "The big theory" details.
It is expected that DMF will outgrow the initial SNMP use-case, so there is
a separation of `dmf.h` and `dmfsnmp.h` already in place.

A second iteration is experimentally provided, but may be incomplete and is
subject to change after some team discussions, which is to support not only
static mappings of the first iteration (so as to be functionally and logically
equivalent to the pre-DMF code), but also add support for dynamic mappings
using an interpreted language. LUA is the first implementation in the works,
so it would be the default option (given experimental status, it is not
compilable by default unless you define `-DWITH_DMF_LUA=1` to the compiler
command-line or `CFLAGS`; also the implementation is currently compatible
with LUA-5.1 or *older* -- so the include-file path and library name should
match your OS distribution's naming for this version).

== DMF XML spec

The DMF files are implemented as XML with a particular schema.

Verifiable schemas are provided as XSD files and can be run against existing
or generated DMF files with `make dmf-validate` in the `scripts/DMF` directory
(uses `xmllint` which is also needed to build NUT manpages with `asciidoc`).

The command-line method of verification that a DMF SNMP file or an index file
built for the `nut-scanner` conforms to expected schema is:

----
    $ xmllint --noout --schema $SCHEMADIR/dmfsnmp.xsd $TESTEDFILE.dmf
    $ xmllint --noout --schema $SCHEMADIR/dmfnutscan.xsd $TESTEDINDEX.dmf
----

There are *4* main structures in the DMF XML:

 * `info_lkp_t`: mapping between NUT and SNMP values for a variable

 * `alarms_info_t`: mapping between NUT and SNMP `ups.alarm` values for a
   variable

 * `snmp_info_t`: mapping between NUT variables and SNMP OIDs

 * `mib2nut_info_t`: declaration of discovery and mapping (`snmp_info_t`)
    information

These structures are wrapped by a `nut` tag with `version` and `xmlns`
attributes so the DMF file can refer to the currently applicable schema.

=== LOOKUP

----
<nut>
    <lookup name="ats_output_status_info">
        <item oid = "1" info = "OFF" />
    </lookup>
</nut>
----

== LUA FUNCTIONS

Is possible to emulate non provide data by LUA, for example, the UPS provides
current in Amperes and voltage, but not power in Watts, is possible to have
a function for calculate this value and serve.
A simple example:

        <functions name="eaton_functions">
          <function name="device.amperes">
            function deviceamperes(device)
                power = tonumber(lua_C_gateway("input.power", device))
                voltage = tonumber(lua_C_gateway("input.voltage", device))
                if voltage ~= 0 and power ~= 0 then
                    return power / voltage
                else
                    return nil
                end
            end
          </function>
          <function name="device.luaOutlet">
            function deviceluaOutlet(device)
                outlet = tonumber(lua_C_gateway("outlet.count", device))
                if outlet ~= 0 then
                  for i=0,outlet,1
                    do
                      publish_Lua_dstate("device."..device..".outlet."..i..".wastePower", wastePower(device, i))
                    end
                end
                
                return nil
            end
            
            
            function wastePower(device, outlet)
                power = tonumber(lua_C_gateway("outlet."..outlet..".power", device))
                realpower = tonumber(lua_C_gateway("outlet."..outlet..".realpower", device))
                
                return power - realpower
            end
          </function>
        </functions>
        <snmp name="eaton_marlin_mib">
                <snmp_info flag_ok="yes" multiplier="128.0" name="device.amperes" string="yes" function="eaton_functions"/>
                <snmp_info flag_ok="yes" multiplier="128.0" name="device.luaOutlet" string="yes" function="eaton_functions"/>
   
Functions block is the function collection for a driver (mib2nut)

Function block is the function collection for one value (snmp_info)
  -Attribute name should be the same as the "snmp" name.
  -Have mandatory at least one function named with the same name of the "snmp", main function,
      but without point (device.lua -> function devicelua(device))
  -Could have more functions, but main fuction will be allways the mandatory one, unique,
      and is the entry point.
  -"device" parameter is mandatory for internal requerements.
  -Main function can returns data, if returns, a new variable is going a be created by
      the driver, named as (device.X.function_name) with the returned value, if not,
      nothing is publish by the driver.
  
There is implemented two Lua - C functions bindings

  lua_C_gateway(variable, device) - As a parameter recives the name of the requested variable
    and number of device (string, integer), returns the value for this variable as string.
    
  publish_Lua_dstate(variable, value) - As a parameter recives the name of a variable and value
    for this variable (string, string), this function create new variables and publish directly data
    bypassing the driver, useful for publish multiple variables or publish in difren variable name,
    no returns.
                
== Tools

For the sake of future temporary co-existence of legacy and DMF-enhanced
implementations of `snmp-ups` as a fall-back solution or for peace of mind
for conservative users, and even more as an aid to the deviated downstream
NUT forks that might have modified MIB files (perhaps in-house NUT builds
of some end-users), the tools we made to convert existing C-structure MIB
implementations to such external DMF files are also distributed here.

Before using the scripts, make sure you have run `./autogen.sh && ./configure`
in the root of NUT sources tree and generally can build NUT (the `pycparser`
tries to compile instrumented sources, and requires the toolchain as well as
the `config.h` file generated by `configure` script).

They are a mix of Python and shell scripts:

 * `jsonify-mib.py`: process MIB mapping from C source and print it to stdout
    as JSON

 * `nut_cpp`: calls the C preprosessor and filters away GCC modifiers that are
    not handled well by `pycparser` code

 * `xmlify-mib.py`: process JSON output produced by `jsonify-mib.py` and output
    the final DMF XML format

 * `dmfify-mib.sh`: execute this from the `$NUT_SOURCE/scripts/DMF/` directory
    and it will find and process existing `../../drivers/*-mib.c` files to feed
    them into the pipeline of the two scripts above and produce `*.dmf` files.
    It calls `jsonify-mib.py --test` so the parsed structures are recreated
    into a C file, compiled and instantly tested to make sure they match.

NOTE: At this time the Python scripts are not intended for direct execution
(exec bits not set), so you should prepend them with versioned parser name
(e.g. `python2.7 jsonify-mib.py`). If your system default version is Python-2.x
then just `python` program name may suffice.

Details on some of the tools are presented below.

=== Python and pycparser prerequisites

You need Python version 2.7 with an `argparse` module, as well as a separate
project `pycparser` installed on the build host to run the `jsonify-mib.py`
script:

 * via your package management
   As an example, you can do so:

  ** on Debian and derivative systems, using:

----
    # apt-get install python-pycparser
----

        and / or

----
    # apt-get install python3-pycparser
----

  ** on Redhat and derivative systems, using:

----
    # yum install <... to be completed>
----

  ** on OpenIndiana and similar systems, using:

----
    # pkg install -v pycparser
----

   and / or specifically

----
    # pkg install pycparser-27
----


 * or using `pip`:

----
    virtualenv dmf
    source dmf/bin/activate
    pip install -e pycparser
----

=== jsonify-mib.py

Tool parses `*-mib.c` files (picking `snmp_info_t` and `info_lkp_t` structures)
and prints the output of those as JSON. Note this is NOT intended as final DMF
form, this JSON markup is an intermediate form for easier processing.

Usage is then like this:

----
    $ python2.7 jsonify-mib.py ../../drivers/apc-ats-mib.c
    {
        "INFO": {
            "ats_output_status_info": {
                "1": "OFF",
                "2": "OL"
            },
            "ats_sensitivity_info": {
                "1": "high",
                "2": "low"
            },
    ...
----

=== xmlify-mib.py

Assming you have installed Python e.g. using instructions above, you can
produce final DMF XML markup from the intermediate JSON by simply piping
it to the standard input of this script:

----
    $ python2.7 xmlify-mib.py < apc-ats-mib.json > apc-ats-mib.dmf
----

You can also build a pipeline of these two scripts, which is essentially
what `dmfify-mib.sh` is for.

